{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/**\n * Functions related to dom operations.\n */\nimport { EventHandler } from './event-handler';\nimport { isNullOrUndefined, getValue, setValue, isObject, extend } from './util';\nvar SVG_REG = /^svg|^path|^g/;\n/**\n * Function to create Html element.\n *\n * @param {string} tagName - Name of the tag, id and class names.\n * @param {ElementProperties} properties - Object to set properties in the element.\n * @param {ElementProperties} properties.id - To set the id to the created element.\n * @param {ElementProperties} properties.className - To add classes to the element.\n * @param {ElementProperties} properties.innerHTML - To set the innerHTML to element.\n * @param {ElementProperties} properties.styles - To set the some custom styles to element.\n * @param {ElementProperties} properties.attrs - To set the attributes to element.\n * @returns {any} ?\n * @private\n */\nexport function createElement(tagName, properties) {\n  var element = SVG_REG.test(tagName) ? document.createElementNS('http://www.w3.org/2000/svg', tagName) : document.createElement(tagName);\n  if (typeof properties === 'undefined') {\n    return element;\n  }\n  element.innerHTML = properties.innerHTML ? properties.innerHTML : '';\n  if (properties.className !== undefined) {\n    element.className = properties.className;\n  }\n  if (properties.id !== undefined) {\n    element.id = properties.id;\n  }\n  if (properties.styles !== undefined) {\n    element.style.cssText = properties.styles;\n  }\n  if (properties.attrs !== undefined) {\n    attributes(element, properties.attrs);\n  }\n  return element;\n}\n/**\n * Updates the CSS text of an element by merging new styles with existing styles.\n *\n * @param {HTMLElement} element - The element whose styles need to be updated.\n * @param {string} cssText - The new CSS styles to be added or updated.\n * @returns {void}\n */\nexport function updateCSSText(element, cssText) {\n  var existingStyles = element.style.cssText.split(';').reduce(function (styles, style) {\n    var _a = style.split(':'),\n      key = _a[0],\n      value = _a[1];\n    if (key && value) {\n      styles[key.trim()] = value.trim();\n    }\n    return styles;\n  }, {});\n  var newStyles = cssText.split(';').reduce(function (styles, style) {\n    var _a = style.split(':'),\n      key = _a[0],\n      value = _a[1];\n    if (key && value) {\n      styles[key.trim()] = value.trim();\n    }\n    return styles;\n  }, {});\n  var styleElement = document.createElement('div');\n  // Use safe iteration over keys using Object.keys\n  Object.keys(__assign({}, existingStyles, newStyles)).forEach(function (key) {\n    styleElement.style.setProperty(key, newStyles[key] || existingStyles[key]);\n  });\n  element.style.cssText = styleElement.style.cssText;\n}\n/**\n * The function used to add the classes to array of elements\n *\n * @param  {Element[]|NodeList} elements - An array of elements that need to add a list of classes\n * @param  {string|string[]} classes - String or array of string that need to add an individual element as a class\n * @returns {any} .\n * @private\n */\nexport function addClass(elements, classes) {\n  var classList = getClassList(classes);\n  var regExp = RegExp;\n  for (var _i = 0, _a = elements; _i < _a.length; _i++) {\n    var ele = _a[_i];\n    for (var _b = 0, classList_1 = classList; _b < classList_1.length; _b++) {\n      var className = classList_1[_b];\n      if (isObject(ele)) {\n        var curClass = getValue('attributes.className', ele);\n        if (isNullOrUndefined(curClass)) {\n          setValue('attributes.className', className, ele);\n        } else if (!new regExp('\\\\b' + className + '\\\\b', 'i').test(curClass)) {\n          setValue('attributes.className', curClass + ' ' + className, ele);\n        }\n      } else {\n        if (!ele.classList.contains(className)) {\n          ele.classList.add(className);\n        }\n      }\n    }\n  }\n  return elements;\n}\n/**\n * The function used to add the classes to array of elements\n *\n * @param  {Element[]|NodeList} elements - An array of elements that need to remove a list of classes\n * @param  {string|string[]} classes - String or array of string that need to add an individual element as a class\n * @returns {any} .\n * @private\n */\nexport function removeClass(elements, classes) {\n  var classList = getClassList(classes);\n  for (var _i = 0, _a = elements; _i < _a.length; _i++) {\n    var ele = _a[_i];\n    var flag = isObject(ele);\n    var canRemove = flag ? getValue('attributes.className', ele) : ele.className !== '';\n    if (canRemove) {\n      for (var _b = 0, classList_2 = classList; _b < classList_2.length; _b++) {\n        var className = classList_2[_b];\n        if (flag) {\n          var classes_1 = getValue('attributes.className', ele);\n          var classArr = classes_1.split(' ');\n          var index = classArr.indexOf(className);\n          if (index !== -1) {\n            classArr.splice(index, 1);\n          }\n          setValue('attributes.className', classArr.join(' '), ele);\n        } else {\n          ele.classList.remove(className);\n        }\n      }\n    }\n  }\n  return elements;\n}\n/**\n * The function used to get classlist.\n *\n * @param  {string | string[]} classes - An element the need to check visibility\n * @returns {string[]} ?\n * @private\n */\nfunction getClassList(classes) {\n  var classList = [];\n  if (typeof classes === 'string') {\n    classList.push(classes);\n  } else {\n    classList = classes;\n  }\n  return classList;\n}\n/**\n * The function used to check element is visible or not.\n *\n * @param  {Element|Node} element - An element the need to check visibility\n * @returns {boolean} ?\n * @private\n */\nexport function isVisible(element) {\n  var ele = element;\n  return ele.style.visibility === '' && ele.offsetWidth > 0;\n}\n/**\n * The function used to insert an array of elements into a first of the element.\n *\n * @param  {Element[]|NodeList} fromElements - An array of elements that need to prepend.\n * @param  {Element} toElement - An element that is going to prepend.\n * @param {boolean} isEval - ?\n * @returns {Element[] | NodeList} ?\n * @private\n */\nexport function prepend(fromElements, toElement, isEval) {\n  var docFrag = document.createDocumentFragment();\n  for (var _i = 0, _a = fromElements; _i < _a.length; _i++) {\n    var ele = _a[_i];\n    docFrag.appendChild(ele);\n  }\n  toElement.insertBefore(docFrag, toElement.firstElementChild);\n  if (isEval) {\n    executeScript(toElement);\n  }\n  return fromElements;\n}\n/**\n * The function used to insert an array of elements into last of the element.\n *\n * @param  {Element[]|NodeList} fromElements - An array of elements that need to append.\n * @param  {Element} toElement - An element that is going to prepend.\n * @param {boolean} isEval - ?\n * @returns {Element[] | NodeList} ?\n * @private\n */\nexport function append(fromElements, toElement, isEval) {\n  var docFrag = document.createDocumentFragment();\n  if (fromElements instanceof NodeList) {\n    while (fromElements.length > 0) {\n      docFrag.appendChild(fromElements[0]);\n    }\n  } else {\n    for (var _i = 0, _a = fromElements; _i < _a.length; _i++) {\n      var ele = _a[_i];\n      docFrag.appendChild(ele);\n    }\n  }\n  toElement.appendChild(docFrag);\n  if (isEval) {\n    executeScript(toElement);\n  }\n  return fromElements;\n}\n/**\n * The function is used to evaluate script from Ajax request\n *\n * @param {Element} ele - An element is going to evaluate the script\n * @returns {void} ?\n */\nfunction executeScript(ele) {\n  var eleArray = ele.querySelectorAll('script');\n  eleArray.forEach(function (element) {\n    var script = document.createElement('script');\n    script.text = element.innerHTML;\n    document.head.appendChild(script);\n    detach(script);\n  });\n}\n/**\n * The function used to remove the element from parentnode\n *\n * @param  {Element|Node|HTMLElement} element - An element that is going to detach from the Dom\n * @returns {any} ?\n * @private\n */\nexport function detach(element) {\n  var parentNode = element.parentNode;\n  if (parentNode) {\n    return parentNode.removeChild(element);\n  }\n}\n/**\n * The function used to remove the element from Dom also clear the bounded events\n *\n * @param  {Element|Node|HTMLElement} element - An element remove from the Dom\n * @returns {void} ?\n * @private\n */\nexport function remove(element) {\n  var parentNode = element.parentNode;\n  EventHandler.clearEvents(element);\n  parentNode.removeChild(element);\n}\n/**\n * The function helps to set multiple attributes to an element\n *\n * @param  {Element|Node} element - An element that need to set attributes.\n * @param  {string} attributes - JSON Object that is going to as attributes.\n * @returns {Element} ?\n * @private\n */\nexport function attributes(element, attributes) {\n  var keys = Object.keys(attributes);\n  var ele = element;\n  for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n    var key = keys_1[_i];\n    if (isObject(ele)) {\n      var iKey = key;\n      if (key === 'tabindex') {\n        iKey = 'tabIndex';\n      }\n      ele.attributes[\"\" + iKey] = attributes[\"\" + key];\n    } else {\n      ele.setAttribute(key, attributes[\"\" + key]);\n    }\n  }\n  return ele;\n}\n/**\n * The function selects the element from giving context.\n *\n * @param  {string} selector - Selector string need fetch element\n * @param  {Document|Element} context - It is an optional type, That specifies a Dom context.\n * @param {boolean} needsVDOM ?\n * @returns {any} ?\n * @private\n */\nexport function select(selector, context, needsVDOM) {\n  if (context === void 0) {\n    context = document;\n  }\n  selector = querySelectId(selector);\n  return context.querySelector(selector);\n}\n/**\n * The function selects an array of element from the given context.\n *\n * @param  {string} selector - Selector string need fetch element\n * @param  {Document|Element} context - It is an optional type, That specifies a Dom context.\n * @param {boolean} needsVDOM ?\n * @returns {HTMLElement[]} ?\n * @private\n */\nexport function selectAll(selector, context, needsVDOM) {\n  if (context === void 0) {\n    context = document;\n  }\n  selector = querySelectId(selector);\n  var nodeList = context.querySelectorAll(selector);\n  return nodeList;\n}\n/**\n * The function selects an id of element from the given context.\n *\n * @param  {string} selector - Selector string need fetch element\n * @returns {string} ?\n * @private\n */\nfunction querySelectId(selector) {\n  var charRegex = /(!|\"|\\$|%|&|'|\\(|\\)|\\*|\\/|:|;|<|=|\\?|@|\\]|\\^|`|{|}|\\||\\+|~)/g;\n  if (selector.match(/#[0-9]/g) || selector.match(charRegex)) {\n    var idList = selector.split(',');\n    for (var i = 0; i < idList.length; i++) {\n      var list = idList[parseInt(i.toString(), 10)].split(' ');\n      for (var j = 0; j < list.length; j++) {\n        if (list[parseInt(j.toString(), 10)].indexOf('#') > -1) {\n          if (!list[parseInt(j.toString(), 10)].match(/\\[.*\\]/)) {\n            var splitId = list[parseInt(j.toString(), 10)].split('#');\n            if (splitId[1].match(/^\\d/) || splitId[1].match(charRegex)) {\n              var setId = list[parseInt(j.toString(), 10)].split('.');\n              setId[0] = setId[0].replace(/#/, '[id=\\'') + '\\']';\n              list[parseInt(j.toString(), 10)] = setId.join('.');\n            }\n          }\n        }\n      }\n      idList[parseInt(i.toString(), 10)] = list.join(' ');\n    }\n    return idList.join(',');\n  }\n  return selector;\n}\n/**\n * Returns single closest parent element based on class selector.\n *\n * @param  {Element} element - An element that need to find the closest element.\n * @param  {string} selector - A classSelector of closest element.\n * @returns {Element} ?\n * @private\n */\nexport function closest(element, selector) {\n  var el = element;\n  if (typeof el.closest === 'function') {\n    return el.closest(selector);\n  }\n  while (el && el.nodeType === 1) {\n    if (matches(el, selector)) {\n      return el;\n    }\n    el = el.parentNode;\n  }\n  return null;\n}\n/**\n * Returns all sibling elements of the given element.\n *\n * @param  {Element|Node} element - An element that need to get siblings.\n * @returns {Element[]} ?\n * @private\n */\nexport function siblings(element) {\n  var siblings = [];\n  var childNodes = Array.prototype.slice.call(element.parentNode.childNodes);\n  for (var _i = 0, childNodes_1 = childNodes; _i < childNodes_1.length; _i++) {\n    var curNode = childNodes_1[_i];\n    if (curNode.nodeType === Node.ELEMENT_NODE && element !== curNode) {\n      siblings.push(curNode);\n    }\n  }\n  return siblings;\n}\n/**\n * set the value if not exist. Otherwise set the existing value\n *\n * @param  {HTMLElement} element - An element to which we need to set value.\n * @param  {string} property - Property need to get or set.\n * @param  {string} value - value need to set.\n * @returns {string} ?\n * @private\n */\nexport function getAttributeOrDefault(element, property, value) {\n  var attrVal;\n  var isObj = isObject(element);\n  if (isObj) {\n    attrVal = getValue('attributes.' + property, element);\n  } else {\n    attrVal = element.getAttribute(property);\n  }\n  if (isNullOrUndefined(attrVal) && value) {\n    if (!isObj) {\n      element.setAttribute(property, value.toString());\n    } else {\n      element.attributes[\"\" + property] = value;\n    }\n    attrVal = value;\n  }\n  return attrVal;\n}\n/**\n * Set the style attributes to Html element.\n *\n * @param {HTMLElement} element - Element which we want to set attributes\n * @param {any} attrs - Set the given attributes to element\n * @returns {void} ?\n * @private\n */\nexport function setStyleAttribute(element, attrs) {\n  if (attrs !== undefined) {\n    Object.keys(attrs).forEach(function (key) {\n      element.style[\"\" + key] = attrs[\"\" + key];\n    });\n  }\n}\n/**\n * Method for add and remove classes to a dom element.\n *\n * @param {Element} element - Element for add and remove classes\n * @param {string[]} addClasses - List of classes need to be add to the element\n * @param {string[]} removeClasses - List of classes need to be remove from the element\n * @returns {void} ?\n * @private\n */\nexport function classList(element, addClasses, removeClasses) {\n  addClass([element], addClasses);\n  removeClass([element], removeClasses);\n}\n/**\n * Method to check whether the element matches the given selector.\n *\n * @param {Element} element - Element to compare with the selector.\n * @param {string} selector - String selector which element will satisfy.\n * @returns {void} ?\n * @private\n */\nexport function matches(element, selector) {\n  var matches = element.matches || element.msMatchesSelector || element.webkitMatchesSelector;\n  if (matches) {\n    return matches.call(element, selector);\n  } else {\n    return [].indexOf.call(document.querySelectorAll(selector), element) !== -1;\n  }\n}\n/**\n * Method to get the html text from DOM.\n *\n * @param {HTMLElement} ele - Element to compare with the selector.\n * @param {string} innerHTML - String selector which element will satisfy.\n * @returns {void} ?\n * @private\n */\nexport function includeInnerHTML(ele, innerHTML) {\n  ele.innerHTML = innerHTML;\n}\n/**\n * Method to get the containsclass.\n *\n * @param {HTMLElement} ele - Element to compare with the selector.\n * @param {string} className - String selector which element will satisfy.\n * @returns {any} ?\n * @private\n */\nexport function containsClass(ele, className) {\n  if (isObject(ele)) {\n    var regExp = RegExp;\n    return new regExp('\\\\b' + className + '\\\\b', 'i').test(ele.attributes.className);\n  } else {\n    return ele.classList.contains(className);\n  }\n}\n/**\n * Method to check whether the element matches the given selector.\n *\n * @param {Object} element - Element to compare with the selector.\n * @param {boolean} deep ?\n * @returns {any} ?\n * @private\n */\nexport function cloneNode(element, deep) {\n  if (isObject(element)) {\n    if (deep) {\n      return extend({}, {}, element, true);\n    }\n  } else {\n    return element.cloneNode(deep);\n  }\n}","map":{"version":3,"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","EventHandler","isNullOrUndefined","getValue","setValue","isObject","extend","SVG_REG","createElement","tagName","properties","element","test","document","createElementNS","innerHTML","className","undefined","id","styles","style","cssText","attrs","attributes","updateCSSText","existingStyles","split","reduce","_a","key","value","trim","newStyles","styleElement","keys","forEach","setProperty","addClass","elements","classes","classList","getClassList","regExp","RegExp","_i","ele","_b","classList_1","curClass","contains","add","removeClass","flag","canRemove","classList_2","classes_1","classArr","index","indexOf","splice","join","remove","push","isVisible","visibility","offsetWidth","prepend","fromElements","toElement","isEval","docFrag","createDocumentFragment","appendChild","insertBefore","firstElementChild","executeScript","append","NodeList","eleArray","querySelectorAll","script","text","head","detach","parentNode","removeChild","clearEvents","keys_1","iKey","setAttribute","select","selector","context","needsVDOM","querySelectId","querySelector","selectAll","nodeList","charRegex","match","idList","list","parseInt","toString","j","splitId","setId","replace","closest","el","nodeType","matches","siblings","childNodes","Array","slice","childNodes_1","curNode","Node","ELEMENT_NODE","getAttributeOrDefault","property","attrVal","isObj","getAttribute","setStyleAttribute","addClasses","removeClasses","msMatchesSelector","webkitMatchesSelector","includeInnerHTML","containsClass","cloneNode","deep"],"sources":["D:/weektable/frontend/node_modules/@syncfusion/ej2-base/src/dom.js"],"sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/**\n * Functions related to dom operations.\n */\nimport { EventHandler } from './event-handler';\nimport { isNullOrUndefined, getValue, setValue, isObject, extend } from './util';\nvar SVG_REG = /^svg|^path|^g/;\n/**\n * Function to create Html element.\n *\n * @param {string} tagName - Name of the tag, id and class names.\n * @param {ElementProperties} properties - Object to set properties in the element.\n * @param {ElementProperties} properties.id - To set the id to the created element.\n * @param {ElementProperties} properties.className - To add classes to the element.\n * @param {ElementProperties} properties.innerHTML - To set the innerHTML to element.\n * @param {ElementProperties} properties.styles - To set the some custom styles to element.\n * @param {ElementProperties} properties.attrs - To set the attributes to element.\n * @returns {any} ?\n * @private\n */\nexport function createElement(tagName, properties) {\n    var element = (SVG_REG.test(tagName) ? document.createElementNS('http://www.w3.org/2000/svg', tagName) : document.createElement(tagName));\n    if (typeof (properties) === 'undefined') {\n        return element;\n    }\n    element.innerHTML = (properties.innerHTML ? properties.innerHTML : '');\n    if (properties.className !== undefined) {\n        element.className = properties.className;\n    }\n    if (properties.id !== undefined) {\n        element.id = properties.id;\n    }\n    if (properties.styles !== undefined) {\n        element.style.cssText = properties.styles;\n    }\n    if (properties.attrs !== undefined) {\n        attributes(element, properties.attrs);\n    }\n    return element;\n}\n/**\n * Updates the CSS text of an element by merging new styles with existing styles.\n *\n * @param {HTMLElement} element - The element whose styles need to be updated.\n * @param {string} cssText - The new CSS styles to be added or updated.\n * @returns {void}\n */\nexport function updateCSSText(element, cssText) {\n    var existingStyles = element.style.cssText.split(';').reduce(function (styles, style) {\n        var _a = style.split(':'), key = _a[0], value = _a[1];\n        if (key && value) {\n            styles[key.trim()] = value.trim();\n        }\n        return styles;\n    }, {});\n    var newStyles = cssText.split(';').reduce(function (styles, style) {\n        var _a = style.split(':'), key = _a[0], value = _a[1];\n        if (key && value) {\n            styles[key.trim()] = value.trim();\n        }\n        return styles;\n    }, {});\n    var styleElement = document.createElement('div');\n    // Use safe iteration over keys using Object.keys\n    Object.keys(__assign({}, existingStyles, newStyles)).forEach(function (key) {\n        styleElement.style.setProperty(key, newStyles[key] || existingStyles[key]);\n    });\n    element.style.cssText = styleElement.style.cssText;\n}\n/**\n * The function used to add the classes to array of elements\n *\n * @param  {Element[]|NodeList} elements - An array of elements that need to add a list of classes\n * @param  {string|string[]} classes - String or array of string that need to add an individual element as a class\n * @returns {any} .\n * @private\n */\nexport function addClass(elements, classes) {\n    var classList = getClassList(classes);\n    var regExp = RegExp;\n    for (var _i = 0, _a = elements; _i < _a.length; _i++) {\n        var ele = _a[_i];\n        for (var _b = 0, classList_1 = classList; _b < classList_1.length; _b++) {\n            var className = classList_1[_b];\n            if (isObject(ele)) {\n                var curClass = getValue('attributes.className', ele);\n                if (isNullOrUndefined(curClass)) {\n                    setValue('attributes.className', className, ele);\n                }\n                else if (!new regExp('\\\\b' + className + '\\\\b', 'i').test(curClass)) {\n                    setValue('attributes.className', curClass + ' ' + className, ele);\n                }\n            }\n            else {\n                if (!ele.classList.contains(className)) {\n                    ele.classList.add(className);\n                }\n            }\n        }\n    }\n    return elements;\n}\n/**\n * The function used to add the classes to array of elements\n *\n * @param  {Element[]|NodeList} elements - An array of elements that need to remove a list of classes\n * @param  {string|string[]} classes - String or array of string that need to add an individual element as a class\n * @returns {any} .\n * @private\n */\nexport function removeClass(elements, classes) {\n    var classList = getClassList(classes);\n    for (var _i = 0, _a = elements; _i < _a.length; _i++) {\n        var ele = _a[_i];\n        var flag = isObject(ele);\n        var canRemove = flag ? getValue('attributes.className', ele) : ele.className !== '';\n        if (canRemove) {\n            for (var _b = 0, classList_2 = classList; _b < classList_2.length; _b++) {\n                var className = classList_2[_b];\n                if (flag) {\n                    var classes_1 = getValue('attributes.className', ele);\n                    var classArr = classes_1.split(' ');\n                    var index = classArr.indexOf(className);\n                    if (index !== -1) {\n                        classArr.splice(index, 1);\n                    }\n                    setValue('attributes.className', classArr.join(' '), ele);\n                }\n                else {\n                    ele.classList.remove(className);\n                }\n            }\n        }\n    }\n    return elements;\n}\n/**\n * The function used to get classlist.\n *\n * @param  {string | string[]} classes - An element the need to check visibility\n * @returns {string[]} ?\n * @private\n */\nfunction getClassList(classes) {\n    var classList = [];\n    if (typeof classes === 'string') {\n        classList.push(classes);\n    }\n    else {\n        classList = classes;\n    }\n    return classList;\n}\n/**\n * The function used to check element is visible or not.\n *\n * @param  {Element|Node} element - An element the need to check visibility\n * @returns {boolean} ?\n * @private\n */\nexport function isVisible(element) {\n    var ele = element;\n    return (ele.style.visibility === '' && ele.offsetWidth > 0);\n}\n/**\n * The function used to insert an array of elements into a first of the element.\n *\n * @param  {Element[]|NodeList} fromElements - An array of elements that need to prepend.\n * @param  {Element} toElement - An element that is going to prepend.\n * @param {boolean} isEval - ?\n * @returns {Element[] | NodeList} ?\n * @private\n */\nexport function prepend(fromElements, toElement, isEval) {\n    var docFrag = document.createDocumentFragment();\n    for (var _i = 0, _a = fromElements; _i < _a.length; _i++) {\n        var ele = _a[_i];\n        docFrag.appendChild(ele);\n    }\n    toElement.insertBefore(docFrag, toElement.firstElementChild);\n    if (isEval) {\n        executeScript(toElement);\n    }\n    return fromElements;\n}\n/**\n * The function used to insert an array of elements into last of the element.\n *\n * @param  {Element[]|NodeList} fromElements - An array of elements that need to append.\n * @param  {Element} toElement - An element that is going to prepend.\n * @param {boolean} isEval - ?\n * @returns {Element[] | NodeList} ?\n * @private\n */\nexport function append(fromElements, toElement, isEval) {\n    var docFrag = document.createDocumentFragment();\n    if (fromElements instanceof NodeList) {\n        while (fromElements.length > 0) {\n            docFrag.appendChild(fromElements[0]);\n        }\n    }\n    else {\n        for (var _i = 0, _a = fromElements; _i < _a.length; _i++) {\n            var ele = _a[_i];\n            docFrag.appendChild(ele);\n        }\n    }\n    toElement.appendChild(docFrag);\n    if (isEval) {\n        executeScript(toElement);\n    }\n    return fromElements;\n}\n/**\n * The function is used to evaluate script from Ajax request\n *\n * @param {Element} ele - An element is going to evaluate the script\n * @returns {void} ?\n */\nfunction executeScript(ele) {\n    var eleArray = ele.querySelectorAll('script');\n    eleArray.forEach(function (element) {\n        var script = document.createElement('script');\n        script.text = element.innerHTML;\n        document.head.appendChild(script);\n        detach(script);\n    });\n}\n/**\n * The function used to remove the element from parentnode\n *\n * @param  {Element|Node|HTMLElement} element - An element that is going to detach from the Dom\n * @returns {any} ?\n * @private\n */\nexport function detach(element) {\n    var parentNode = element.parentNode;\n    if (parentNode) {\n        return parentNode.removeChild(element);\n    }\n}\n/**\n * The function used to remove the element from Dom also clear the bounded events\n *\n * @param  {Element|Node|HTMLElement} element - An element remove from the Dom\n * @returns {void} ?\n * @private\n */\nexport function remove(element) {\n    var parentNode = element.parentNode;\n    EventHandler.clearEvents(element);\n    parentNode.removeChild(element);\n}\n/**\n * The function helps to set multiple attributes to an element\n *\n * @param  {Element|Node} element - An element that need to set attributes.\n * @param  {string} attributes - JSON Object that is going to as attributes.\n * @returns {Element} ?\n * @private\n */\nexport function attributes(element, attributes) {\n    var keys = Object.keys(attributes);\n    var ele = element;\n    for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n        var key = keys_1[_i];\n        if (isObject(ele)) {\n            var iKey = key;\n            if (key === 'tabindex') {\n                iKey = 'tabIndex';\n            }\n            ele.attributes[\"\" + iKey] = attributes[\"\" + key];\n        }\n        else {\n            ele.setAttribute(key, attributes[\"\" + key]);\n        }\n    }\n    return ele;\n}\n/**\n * The function selects the element from giving context.\n *\n * @param  {string} selector - Selector string need fetch element\n * @param  {Document|Element} context - It is an optional type, That specifies a Dom context.\n * @param {boolean} needsVDOM ?\n * @returns {any} ?\n * @private\n */\nexport function select(selector, context, needsVDOM) {\n    if (context === void 0) { context = document; }\n    selector = querySelectId(selector);\n    return context.querySelector(selector);\n}\n/**\n * The function selects an array of element from the given context.\n *\n * @param  {string} selector - Selector string need fetch element\n * @param  {Document|Element} context - It is an optional type, That specifies a Dom context.\n * @param {boolean} needsVDOM ?\n * @returns {HTMLElement[]} ?\n * @private\n */\nexport function selectAll(selector, context, needsVDOM) {\n    if (context === void 0) { context = document; }\n    selector = querySelectId(selector);\n    var nodeList = context.querySelectorAll(selector);\n    return nodeList;\n}\n/**\n * The function selects an id of element from the given context.\n *\n * @param  {string} selector - Selector string need fetch element\n * @returns {string} ?\n * @private\n */\nfunction querySelectId(selector) {\n    var charRegex = /(!|\"|\\$|%|&|'|\\(|\\)|\\*|\\/|:|;|<|=|\\?|@|\\]|\\^|`|{|}|\\||\\+|~)/g;\n    if (selector.match(/#[0-9]/g) || selector.match(charRegex)) {\n        var idList = selector.split(',');\n        for (var i = 0; i < idList.length; i++) {\n            var list = idList[parseInt(i.toString(), 10)].split(' ');\n            for (var j = 0; j < list.length; j++) {\n                if (list[parseInt(j.toString(), 10)].indexOf('#') > -1) {\n                    if (!list[parseInt(j.toString(), 10)].match(/\\[.*\\]/)) {\n                        var splitId = list[parseInt(j.toString(), 10)].split('#');\n                        if (splitId[1].match(/^\\d/) || splitId[1].match(charRegex)) {\n                            var setId = list[parseInt(j.toString(), 10)].split('.');\n                            setId[0] = setId[0].replace(/#/, '[id=\\'') + '\\']';\n                            list[parseInt(j.toString(), 10)] = setId.join('.');\n                        }\n                    }\n                }\n            }\n            idList[parseInt(i.toString(), 10)] = list.join(' ');\n        }\n        return idList.join(',');\n    }\n    return selector;\n}\n/**\n * Returns single closest parent element based on class selector.\n *\n * @param  {Element} element - An element that need to find the closest element.\n * @param  {string} selector - A classSelector of closest element.\n * @returns {Element} ?\n * @private\n */\nexport function closest(element, selector) {\n    var el = element;\n    if (typeof el.closest === 'function') {\n        return el.closest(selector);\n    }\n    while (el && el.nodeType === 1) {\n        if (matches(el, selector)) {\n            return el;\n        }\n        el = el.parentNode;\n    }\n    return null;\n}\n/**\n * Returns all sibling elements of the given element.\n *\n * @param  {Element|Node} element - An element that need to get siblings.\n * @returns {Element[]} ?\n * @private\n */\nexport function siblings(element) {\n    var siblings = [];\n    var childNodes = Array.prototype.slice.call(element.parentNode.childNodes);\n    for (var _i = 0, childNodes_1 = childNodes; _i < childNodes_1.length; _i++) {\n        var curNode = childNodes_1[_i];\n        if (curNode.nodeType === Node.ELEMENT_NODE && element !== curNode) {\n            siblings.push(curNode);\n        }\n    }\n    return siblings;\n}\n/**\n * set the value if not exist. Otherwise set the existing value\n *\n * @param  {HTMLElement} element - An element to which we need to set value.\n * @param  {string} property - Property need to get or set.\n * @param  {string} value - value need to set.\n * @returns {string} ?\n * @private\n */\nexport function getAttributeOrDefault(element, property, value) {\n    var attrVal;\n    var isObj = isObject(element);\n    if (isObj) {\n        attrVal = getValue('attributes.' + property, element);\n    }\n    else {\n        attrVal = element.getAttribute(property);\n    }\n    if (isNullOrUndefined(attrVal) && value) {\n        if (!isObj) {\n            element.setAttribute(property, value.toString());\n        }\n        else {\n            element.attributes[\"\" + property] = value;\n        }\n        attrVal = value;\n    }\n    return attrVal;\n}\n/**\n * Set the style attributes to Html element.\n *\n * @param {HTMLElement} element - Element which we want to set attributes\n * @param {any} attrs - Set the given attributes to element\n * @returns {void} ?\n * @private\n */\nexport function setStyleAttribute(element, attrs) {\n    if (attrs !== undefined) {\n        Object.keys(attrs).forEach(function (key) {\n            element.style[\"\" + key] = attrs[\"\" + key];\n        });\n    }\n}\n/**\n * Method for add and remove classes to a dom element.\n *\n * @param {Element} element - Element for add and remove classes\n * @param {string[]} addClasses - List of classes need to be add to the element\n * @param {string[]} removeClasses - List of classes need to be remove from the element\n * @returns {void} ?\n * @private\n */\nexport function classList(element, addClasses, removeClasses) {\n    addClass([element], addClasses);\n    removeClass([element], removeClasses);\n}\n/**\n * Method to check whether the element matches the given selector.\n *\n * @param {Element} element - Element to compare with the selector.\n * @param {string} selector - String selector which element will satisfy.\n * @returns {void} ?\n * @private\n */\nexport function matches(element, selector) {\n    var matches = element.matches || element.msMatchesSelector || element.webkitMatchesSelector;\n    if (matches) {\n        return matches.call(element, selector);\n    }\n    else {\n        return [].indexOf.call(document.querySelectorAll(selector), element) !== -1;\n    }\n}\n/**\n * Method to get the html text from DOM.\n *\n * @param {HTMLElement} ele - Element to compare with the selector.\n * @param {string} innerHTML - String selector which element will satisfy.\n * @returns {void} ?\n * @private\n */\nexport function includeInnerHTML(ele, innerHTML) {\n    ele.innerHTML = innerHTML;\n}\n/**\n * Method to get the containsclass.\n *\n * @param {HTMLElement} ele - Element to compare with the selector.\n * @param {string} className - String selector which element will satisfy.\n * @returns {any} ?\n * @private\n */\nexport function containsClass(ele, className) {\n    if (isObject(ele)) {\n        var regExp = RegExp;\n        return new regExp('\\\\b' + className + '\\\\b', 'i').test(ele.attributes.className);\n    }\n    else {\n        return ele.classList.contains(className);\n    }\n}\n/**\n * Method to check whether the element matches the given selector.\n *\n * @param {Object} element - Element to compare with the selector.\n * @param {boolean} deep ?\n * @returns {any} ?\n * @private\n */\nexport function cloneNode(element, deep) {\n    if (isObject(element)) {\n        if (deep) {\n            return extend({}, {}, element, true);\n        }\n    }\n    else {\n        return element.cloneNode(deep);\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}