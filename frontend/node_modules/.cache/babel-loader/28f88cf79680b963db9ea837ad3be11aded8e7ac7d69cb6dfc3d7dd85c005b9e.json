{"ast":null,"code":"import { isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { Internationalization } from '@syncfusion/ej2-base';\n// import { IValueFormatter } from '../base/interface';\n/**\n * ValueFormatter class to globalize the value.\n * @private\n */\n/* eslint-disable */\nvar ValueFormatter = /** @class */function () {\n  function ValueFormatter(cultureName) {\n    this.intl = new Internationalization();\n    // if (!isNullOrUndefined(cultureName)) {\n    //     this.intl.culture = cultureName;\n    // }\n  }\n  ValueFormatter.prototype.getFormatFunction = function (format, isServerRendered) {\n    if (format.type) {\n      if (isServerRendered) {\n        format.isServerRendered = true;\n      }\n      return this.intl.getDateFormat(format);\n    } else {\n      return this.intl.getNumberFormat(format);\n    }\n  };\n  // public getParserFunction(format: NumberFormatOptions | DateFormatOptions): Function {\n  //     if ((<DateFormatOptions>format).type) {\n  //         return this.intl.getDateParser(<DateFormatOptions>format);\n  //     } else {\n  //         return this.intl.getNumberParser(<DateFormatOptions>format);\n  //     }\n  // }\n  // public fromView(value: string, format: Function, type?: string): string | number | Date {\n  //     if (type === 'date' || type === 'datetime' || type === 'number') {\n  //         return format(value);\n  //     } else {\n  //         return value;\n  //     }\n  // }\n  ValueFormatter.prototype.toView = function (value, format) {\n    var result = value;\n    if (!isNullOrUndefined(format) && !isNullOrUndefined(value)) {\n      result = format(value);\n    }\n    return result;\n  };\n  // public setCulture(cultureName: string): void {\n  //     if (!isNullOrUndefined(cultureName)) {\n  //         setCulture(cultureName);\n  //     }\n  // }\n  /* tslint:disable:no-any */\n  ValueFormatter.prototype.displayText = function (value, format, isServerRendered) {\n    return this.toView(value, this.getFormatFunction(format, isServerRendered));\n  };\n  return ValueFormatter;\n}();\nexport { ValueFormatter };","map":{"version":3,"names":["isNullOrUndefined","Internationalization","ValueFormatter","cultureName","intl","prototype","getFormatFunction","format","isServerRendered","type","getDateFormat","getNumberFormat","toView","value","result","displayText"],"sources":["D:/weektable/frontend/node_modules/@syncfusion/ej2-excel-export/src/value-formatter.js"],"sourcesContent":["import { isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { Internationalization } from '@syncfusion/ej2-base';\n// import { IValueFormatter } from '../base/interface';\n/**\n * ValueFormatter class to globalize the value.\n * @private\n */\n/* eslint-disable */\nvar ValueFormatter = /** @class */ (function () {\n    function ValueFormatter(cultureName) {\n        this.intl = new Internationalization();\n        // if (!isNullOrUndefined(cultureName)) {\n        //     this.intl.culture = cultureName;\n        // }\n    }\n    ValueFormatter.prototype.getFormatFunction = function (format, isServerRendered) {\n        if (format.type) {\n            if (isServerRendered) {\n                format.isServerRendered = true;\n            }\n            return this.intl.getDateFormat(format);\n        }\n        else {\n            return this.intl.getNumberFormat(format);\n        }\n    };\n    // public getParserFunction(format: NumberFormatOptions | DateFormatOptions): Function {\n    //     if ((<DateFormatOptions>format).type) {\n    //         return this.intl.getDateParser(<DateFormatOptions>format);\n    //     } else {\n    //         return this.intl.getNumberParser(<DateFormatOptions>format);\n    //     }\n    // }\n    // public fromView(value: string, format: Function, type?: string): string | number | Date {\n    //     if (type === 'date' || type === 'datetime' || type === 'number') {\n    //         return format(value);\n    //     } else {\n    //         return value;\n    //     }\n    // }\n    ValueFormatter.prototype.toView = function (value, format) {\n        var result = value;\n        if (!isNullOrUndefined(format) && !isNullOrUndefined(value)) {\n            result = format(value);\n        }\n        return result;\n    };\n    // public setCulture(cultureName: string): void {\n    //     if (!isNullOrUndefined(cultureName)) {\n    //         setCulture(cultureName);\n    //     }\n    // }\n    /* tslint:disable:no-any */\n    ValueFormatter.prototype.displayText = function (value, format, isServerRendered) {\n        return this.toView(value, this.getFormatFunction(format, isServerRendered));\n    };\n    return ValueFormatter;\n}());\nexport { ValueFormatter };\n"],"mappings":"AAAA,SAASA,iBAAiB,QAAQ,sBAAsB;AACxD,SAASC,oBAAoB,QAAQ,sBAAsB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,cAAc,GAAG,aAAe,YAAY;EAC5C,SAASA,cAAcA,CAACC,WAAW,EAAE;IACjC,IAAI,CAACC,IAAI,GAAG,IAAIH,oBAAoB,CAAC,CAAC;IACtC;IACA;IACA;EACJ;EACAC,cAAc,CAACG,SAAS,CAACC,iBAAiB,GAAG,UAAUC,MAAM,EAAEC,gBAAgB,EAAE;IAC7E,IAAID,MAAM,CAACE,IAAI,EAAE;MACb,IAAID,gBAAgB,EAAE;QAClBD,MAAM,CAACC,gBAAgB,GAAG,IAAI;MAClC;MACA,OAAO,IAAI,CAACJ,IAAI,CAACM,aAAa,CAACH,MAAM,CAAC;IAC1C,CAAC,MACI;MACD,OAAO,IAAI,CAACH,IAAI,CAACO,eAAe,CAACJ,MAAM,CAAC;IAC5C;EACJ,CAAC;EACD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACAL,cAAc,CAACG,SAAS,CAACO,MAAM,GAAG,UAAUC,KAAK,EAAEN,MAAM,EAAE;IACvD,IAAIO,MAAM,GAAGD,KAAK;IAClB,IAAI,CAACb,iBAAiB,CAACO,MAAM,CAAC,IAAI,CAACP,iBAAiB,CAACa,KAAK,CAAC,EAAE;MACzDC,MAAM,GAAGP,MAAM,CAACM,KAAK,CAAC;IAC1B;IACA,OAAOC,MAAM;EACjB,CAAC;EACD;EACA;EACA;EACA;EACA;EACA;EACAZ,cAAc,CAACG,SAAS,CAACU,WAAW,GAAG,UAAUF,KAAK,EAAEN,MAAM,EAAEC,gBAAgB,EAAE;IAC9E,OAAO,IAAI,CAACI,MAAM,CAACC,KAAK,EAAE,IAAI,CAACP,iBAAiB,CAACC,MAAM,EAAEC,gBAAgB,CAAC,CAAC;EAC/E,CAAC;EACD,OAAON,cAAc;AACzB,CAAC,CAAC,CAAE;AACJ,SAASA,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}