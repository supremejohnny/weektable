{"ast":null,"code":"/* eslint-disable */\n/// <summary>\n/// Checksum calculator, based on Adler32 algorithm.\n/// </summary>\nvar ChecksumCalculator = /** @class */function () {\n  function ChecksumCalculator() {}\n  /// <summary>\n  /// Updates checksum by calculating checksum of the\n  /// given buffer and adding it to current value.\n  /// </summary>\n  /// <param name=\"checksum\">Current checksum.</param>\n  /// <param name=\"buffer\">Data byte array.</param>\n  /// <param name=\"offset\">Offset in the buffer.</param>\n  /// <param name=\"length\">Length of data to be used from the stream.</param>\n  ChecksumCalculator.ChecksumUpdate = function (checksum, buffer, offset, length) {\n    var checkSumUInt = checksum;\n    var s1 = checkSumUInt & 65535;\n    var s2 = checkSumUInt >> this.DEF_CHECKSUM_BIT_OFFSET;\n    while (length > 0) {\n      var steps = Math.min(length, this.DEF_CHECKSUM_ITERATIONSCOUNT);\n      length -= steps;\n      while (--steps >= 0) {\n        s1 = s1 + (buffer[offset++] & 255);\n        s2 = s2 + s1;\n      }\n      s1 %= this.DEF_CHECKSUM_BASE;\n      s2 %= this.DEF_CHECKSUM_BASE;\n    }\n    checkSumUInt = s2 << this.DEF_CHECKSUM_BIT_OFFSET | s1;\n    checksum = checkSumUInt;\n  };\n  /// <summary>\n  /// Generates checksum by calculating checksum of the\n  /// given buffer.\n  /// </summary>\n  /// <param name=\"buffer\">Data byte array.</param>\n  /// <param name=\"offset\">Offset in the buffer.</param>\n  /// <param name=\"length\">Length of data to be used from the stream.</param>\n  ChecksumCalculator.ChecksumGenerate = function (buffer, offset, length) {\n    var result = 1;\n    ChecksumCalculator.ChecksumUpdate(result, buffer, offset, length);\n    return result;\n  };\n  /// <summary>\n  /// Bits offset, used in adler checksum calculation.\n  /// </summary>\n  ChecksumCalculator.DEF_CHECKSUM_BIT_OFFSET = 16;\n  /// <summary>\n  /// Lagrest prime, less than 65535\n  /// </summary>\n  ChecksumCalculator.DEF_CHECKSUM_BASE = 65521;\n  /// <summary>\n  /// Count of iteration used in calculated of the adler checksumm.\n  /// </summary>\n  ChecksumCalculator.DEF_CHECKSUM_ITERATIONSCOUNT = 3800;\n  return ChecksumCalculator;\n}();\nexport { ChecksumCalculator };\n/* eslint-enable */","map":{"version":3,"names":["ChecksumCalculator","ChecksumUpdate","checksum","buffer","offset","length","checkSumUInt","s1","s2","DEF_CHECKSUM_BIT_OFFSET","steps","Math","min","DEF_CHECKSUM_ITERATIONSCOUNT","DEF_CHECKSUM_BASE","ChecksumGenerate","result"],"sources":["D:/weektable/frontend/node_modules/@syncfusion/ej2-compression/src/checksum-calculator.js"],"sourcesContent":["/* eslint-disable */\n/// <summary>\n/// Checksum calculator, based on Adler32 algorithm.\n/// </summary>\nvar ChecksumCalculator = /** @class */ (function () {\n    function ChecksumCalculator() {\n    }\n    /// <summary>\n    /// Updates checksum by calculating checksum of the\n    /// given buffer and adding it to current value.\n    /// </summary>\n    /// <param name=\"checksum\">Current checksum.</param>\n    /// <param name=\"buffer\">Data byte array.</param>\n    /// <param name=\"offset\">Offset in the buffer.</param>\n    /// <param name=\"length\">Length of data to be used from the stream.</param>\n    ChecksumCalculator.ChecksumUpdate = function (checksum, buffer, offset, length) {\n        var checkSumUInt = checksum;\n        var s1 = checkSumUInt & 65535;\n        var s2 = checkSumUInt >> this.DEF_CHECKSUM_BIT_OFFSET;\n        while (length > 0) {\n            var steps = Math.min(length, this.DEF_CHECKSUM_ITERATIONSCOUNT);\n            length -= steps;\n            while (--steps >= 0) {\n                s1 = s1 + (buffer[offset++] & 255);\n                s2 = s2 + s1;\n            }\n            s1 %= this.DEF_CHECKSUM_BASE;\n            s2 %= this.DEF_CHECKSUM_BASE;\n        }\n        checkSumUInt = (s2 << this.DEF_CHECKSUM_BIT_OFFSET) | s1;\n        checksum = checkSumUInt;\n    };\n    /// <summary>\n    /// Generates checksum by calculating checksum of the\n    /// given buffer.\n    /// </summary>\n    /// <param name=\"buffer\">Data byte array.</param>\n    /// <param name=\"offset\">Offset in the buffer.</param>\n    /// <param name=\"length\">Length of data to be used from the stream.</param>\n    ChecksumCalculator.ChecksumGenerate = function (buffer, offset, length) {\n        var result = 1;\n        ChecksumCalculator.ChecksumUpdate(result, buffer, offset, length);\n        return result;\n    };\n    /// <summary>\n    /// Bits offset, used in adler checksum calculation.\n    /// </summary>\n    ChecksumCalculator.DEF_CHECKSUM_BIT_OFFSET = 16;\n    /// <summary>\n    /// Lagrest prime, less than 65535\n    /// </summary>\n    ChecksumCalculator.DEF_CHECKSUM_BASE = 65521;\n    /// <summary>\n    /// Count of iteration used in calculated of the adler checksumm.\n    /// </summary>\n    ChecksumCalculator.DEF_CHECKSUM_ITERATIONSCOUNT = 3800;\n    return ChecksumCalculator;\n}());\nexport { ChecksumCalculator };\n/* eslint-enable */ \n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,IAAIA,kBAAkB,GAAG,aAAe,YAAY;EAChD,SAASA,kBAAkBA,CAAA,EAAG,CAC9B;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACAA,kBAAkB,CAACC,cAAc,GAAG,UAAUC,QAAQ,EAAEC,MAAM,EAAEC,MAAM,EAAEC,MAAM,EAAE;IAC5E,IAAIC,YAAY,GAAGJ,QAAQ;IAC3B,IAAIK,EAAE,GAAGD,YAAY,GAAG,KAAK;IAC7B,IAAIE,EAAE,GAAGF,YAAY,IAAI,IAAI,CAACG,uBAAuB;IACrD,OAAOJ,MAAM,GAAG,CAAC,EAAE;MACf,IAAIK,KAAK,GAAGC,IAAI,CAACC,GAAG,CAACP,MAAM,EAAE,IAAI,CAACQ,4BAA4B,CAAC;MAC/DR,MAAM,IAAIK,KAAK;MACf,OAAO,EAAEA,KAAK,IAAI,CAAC,EAAE;QACjBH,EAAE,GAAGA,EAAE,IAAIJ,MAAM,CAACC,MAAM,EAAE,CAAC,GAAG,GAAG,CAAC;QAClCI,EAAE,GAAGA,EAAE,GAAGD,EAAE;MAChB;MACAA,EAAE,IAAI,IAAI,CAACO,iBAAiB;MAC5BN,EAAE,IAAI,IAAI,CAACM,iBAAiB;IAChC;IACAR,YAAY,GAAIE,EAAE,IAAI,IAAI,CAACC,uBAAuB,GAAIF,EAAE;IACxDL,QAAQ,GAAGI,YAAY;EAC3B,CAAC;EACD;EACA;EACA;EACA;EACA;EACA;EACA;EACAN,kBAAkB,CAACe,gBAAgB,GAAG,UAAUZ,MAAM,EAAEC,MAAM,EAAEC,MAAM,EAAE;IACpE,IAAIW,MAAM,GAAG,CAAC;IACdhB,kBAAkB,CAACC,cAAc,CAACe,MAAM,EAAEb,MAAM,EAAEC,MAAM,EAAEC,MAAM,CAAC;IACjE,OAAOW,MAAM;EACjB,CAAC;EACD;EACA;EACA;EACAhB,kBAAkB,CAACS,uBAAuB,GAAG,EAAE;EAC/C;EACA;EACA;EACAT,kBAAkB,CAACc,iBAAiB,GAAG,KAAK;EAC5C;EACA;EACA;EACAd,kBAAkB,CAACa,4BAA4B,GAAG,IAAI;EACtD,OAAOb,kBAAkB;AAC7B,CAAC,CAAC,CAAE;AACJ,SAASA,kBAAkB;AAC3B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}