{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Component, NotifyPropertyChanges, Property, append, isNullOrUndefined, remove } from '@syncfusion/ej2-base';\nimport { removeClass, rippleEffect, closest } from '@syncfusion/ej2-base';\nimport { Draggable } from '@syncfusion/ej2-base';\nimport { EventHandler, detach, Event, addClass, compile } from '@syncfusion/ej2-base';\nexport var classNames = {\n  chipSet: 'e-chip-set',\n  chip: 'e-chip',\n  avatar: 'e-chip-avatar',\n  text: 'e-chip-text',\n  icon: 'e-chip-icon',\n  delete: 'e-chip-delete',\n  deleteIcon: 'e-dlt-btn',\n  multiSelection: 'e-multi-selection',\n  singleSelection: 'e-selection',\n  active: 'e-active',\n  chipWrapper: 'e-chip-avatar-wrap',\n  iconWrapper: 'e-chip-icon-wrap',\n  focused: 'e-focused',\n  disabled: 'e-disabled',\n  rtl: 'e-rtl',\n  template: 'e-chip-template',\n  chipList: 'e-chip-list',\n  customIcon: 'e-icons',\n  chipDrag: 'e-chip-drag',\n  dragAndDrop: 'e-drag-and-drop',\n  dropRestricted: 'e-error-treeview',\n  cloneChip: 'e-clone-chip',\n  dragIndicator: 'e-drag-indicator'\n};\n/**\n * A chip component is a small block of essential information, mostly used on contacts or filter tags.\n * ```html\n * <div id=\"chip\"></div>\n * ```\n * ```typescript\n * <script>\n * var chipObj = new ChipList();\n * chipObj.appendTo(\"#chip\");\n * </script>\n * ```\n */\nvar ChipList = /** @class */function (_super) {\n  __extends(ChipList, _super);\n  function ChipList(options, element) {\n    var _this = _super.call(this, options, element) || this;\n    _this.multiSelectedChip = [];\n    return _this;\n  }\n  ChipList_1 = ChipList;\n  /**\n   * Initialize the event handler\n   *\n   * @private\n   */\n  ChipList.prototype.preRender = function () {\n    //prerender\n  };\n  /**\n   * To find the chips length.\n   *\n   * @returns boolean\n   * @private\n   */\n  ChipList.prototype.chipType = function () {\n    return this.chips && this.chips.length && this.chips.length > 0;\n  };\n  /**\n   * To Initialize the control rendering.\n   *\n   * @returns void\n   * @private\n   */\n  ChipList.prototype.render = function () {\n    this.type = !isNullOrUndefined(this.chips) && this.chips.length ? 'chipset' : this.text || this.element.innerText ? 'chip' : 'chipset';\n    this.setAttributes();\n    this.createChip();\n    this.setRtl();\n    this.select(this.selectedChips);\n    this.wireEvent(false);\n    this.rippleFunction = rippleEffect(this.element, {\n      selector: '.' + classNames.chip\n    });\n    this.renderComplete();\n    this.dragCollection = [];\n    if (this.allowDragAndDrop) {\n      this.enableDraggingChips();\n    }\n  };\n  ChipList.prototype.enableDraggingChips = function () {\n    var _this = this;\n    var clonedChipElement;\n    var chipElements = this.element.querySelectorAll('.' + classNames.chip);\n    chipElements.forEach(function (chip, index) {\n      _this.dragObj = new Draggable(chip, {\n        preventDefault: false,\n        clone: true,\n        dragArea: _this.dragArea,\n        helper: function () {\n          clonedChipElement = chip.cloneNode(true);\n          clonedChipElement.classList.add(classNames.cloneChip);\n          _this.element.appendChild(clonedChipElement);\n          return clonedChipElement;\n        },\n        dragStart: function (args) {\n          _this.dragIndicator = _this.createElement('div', {\n            className: classNames.dragIndicator\n          });\n          document.body.appendChild(_this.dragIndicator);\n          var chipData = _this.find(args.element);\n          var dragStartArgs = {\n            cancel: false,\n            event: args.event,\n            draggedItem: args.element,\n            draggedItemData: chipData,\n            dropTarget: null\n          };\n          _this.trigger('dragStart', dragStartArgs, function () {\n            if (isNullOrUndefined(dragStartArgs.cancel)) {\n              dragStartArgs.cancel = false;\n            }\n          });\n          if (!dragStartArgs.cancel) {\n            clonedChipElement.setAttribute('drag-indicator-index', index.toString());\n          } else {\n            _this.dragObj.intDestroy(args.event);\n          }\n        },\n        drag: function (args) {\n          var chipData = _this.find(args.element);\n          var draggingArgs = {\n            event: args.event,\n            draggedItem: args.element,\n            draggedItemData: chipData,\n            dropTarget: null\n          };\n          _this.trigger('dragging', draggingArgs);\n          var draggingIconEle = clonedChipElement.querySelector('.' + classNames.chipDrag);\n          if (isNullOrUndefined(draggingIconEle)) {\n            draggingIconEle = _this.createElement('span', {\n              className: classNames.customIcon + \" \" + classNames.dragAndDrop + \" \" + classNames.chipDrag\n            });\n            clonedChipElement.prepend(draggingIconEle);\n          }\n          _this.allowExternalDragging(args, clonedChipElement, draggingIconEle);\n        },\n        dragStop: function (args) {\n          var chipData = _this.find(args.element);\n          var dragStopArgs = {\n            cancel: false,\n            event: args.event,\n            draggedItem: args.element,\n            draggedItemData: chipData,\n            dropTarget: args.target\n          };\n          _this.trigger('dragStop', dragStopArgs, function () {\n            if (isNullOrUndefined(dragStopArgs.cancel)) {\n              dragStopArgs.cancel = false;\n            }\n          });\n          if (!dragStopArgs.cancel) {\n            _this.allowExternalDrop(args, clonedChipElement);\n          }\n          if (!isNullOrUndefined(_this.dragIndicator)) {\n            remove(_this.dragIndicator);\n          }\n          if (!isNullOrUndefined(clonedChipElement)) {\n            clonedChipElement.remove();\n          }\n        }\n      });\n      if (_this.dragCollection.indexOf(_this.dragObj) === -1) {\n        _this.dragCollection.push(_this.dragObj);\n      }\n    });\n  };\n  ChipList.prototype.checkInstance = function (args, context) {\n    var isInstanceMatched = !isNullOrUndefined(args.target.closest('.' + classNames.chipList)) && args.target.closest('.' + classNames.chipList).id !== context.element.id;\n    if (isInstanceMatched) {\n      this.updatedInstance = args.target.closest('.' + classNames.chipList);\n    }\n    return isInstanceMatched;\n  };\n  ChipList.prototype.setIcons = function (currentInstance, draggingIconEle, target, indicatorEle, outOfDragArea) {\n    var isTargetInside = currentInstance.element.contains(target);\n    var isDroppable = target.closest('.e-droppable');\n    if ((isTargetInside || isDroppable) && !outOfDragArea) {\n      draggingIconEle.classList.add(classNames.dragAndDrop);\n      draggingIconEle.classList.remove(classNames.dropRestricted);\n      if (isDroppable) {\n        indicatorEle.style.display = 'none';\n      }\n    } else {\n      draggingIconEle.classList.remove(classNames.dragAndDrop);\n      draggingIconEle.classList.add(classNames.dropRestricted);\n      indicatorEle.style.display = 'none';\n    }\n  };\n  ChipList.prototype.allowExternalDragging = function (args, clonedChipElement, draggingIconEle) {\n    var currentInstance;\n    var closestChip = null;\n    var closestDistance = Infinity;\n    var newIndex = -1;\n    var outOfDragArea = false;\n    if (this.checkInstance(args, this)) {\n      this.dragIndicator.style.display = 'none';\n      currentInstance = this.getCurrentInstance(args);\n      currentInstance.dragIndicator = this.dragIndicator;\n      if (!currentInstance.allowDragAndDrop) {\n        return;\n      }\n    } else {\n      currentInstance = this;\n    }\n    var indicatorEle = currentInstance.dragIndicator;\n    indicatorEle.style.display = 'inline';\n    outOfDragArea = this.dragAreaCheck(this.dragArea, args.target, outOfDragArea, draggingIconEle, indicatorEle);\n    this.setIcons(currentInstance, draggingIconEle, args.target, indicatorEle, outOfDragArea);\n    currentInstance.element.appendChild(clonedChipElement);\n    var droppedRect = clonedChipElement.getBoundingClientRect();\n    var allChips = Array.from(currentInstance.element.querySelectorAll('.' + classNames.chip));\n    allChips.forEach(function (chip, i) {\n      if (chip !== clonedChipElement) {\n        var rect_1 = chip.getBoundingClientRect();\n        var distance = Math.sqrt(Math.pow(droppedRect.left - rect_1.left, 2) + Math.pow(droppedRect.top - rect_1.top, 2));\n        if (distance < closestDistance) {\n          closestDistance = distance;\n          closestChip = chip;\n          newIndex = i;\n        }\n      }\n    });\n    if (newIndex === -1) {\n      newIndex = allChips.length;\n    }\n    var chipsDistance = this.getChipsDistance(currentInstance);\n    var cloneRect = clonedChipElement.getBoundingClientRect();\n    var rect;\n    if (closestChip || allChips.length > 0) {\n      var targetChip = closestChip || allChips[allChips.length - 1];\n      rect = targetChip.getBoundingClientRect();\n      indicatorEle.style.top = rect.top + window.scrollY + 'px';\n      indicatorEle.style.left = currentInstance.enableRtl ? rect.right + chipsDistance + 'px' : rect.left - chipsDistance + window.scrollX + 'px';\n    }\n    if (currentInstance.enableRtl) {\n      if (cloneRect.left < rect.left - rect.width / 2 && cloneRect.top > rect.top) {\n        indicatorEle.style.left = rect.left - chipsDistance + window.scrollX + 'px';\n      }\n    } else if (cloneRect.left > rect.left + rect.width / 2 && cloneRect.top > rect.top) {\n      indicatorEle.style.left = rect.left + rect.width + chipsDistance + window.scrollX + 'px';\n    }\n  };\n  ChipList.prototype.dragAreaCheck = function (dragArea, target, outOfDragArea, draggingIconEle, indicatorEle) {\n    if (isNullOrUndefined(dragArea)) {\n      return false;\n    }\n    var isString = typeof dragArea === 'string';\n    var isHtmlElement = dragArea instanceof HTMLElement;\n    var dragAreaElement = isString ? document.querySelector(dragArea) : dragArea;\n    if (!isNullOrUndefined(dragAreaElement)) {\n      if ((isString || isHtmlElement) && !dragAreaElement.contains(target)) {\n        outOfDragArea = true;\n        indicatorEle.style.display = 'none';\n        draggingIconEle.classList.add(classNames.dropRestricted);\n        draggingIconEle.classList.remove(classNames.dragAndDrop);\n      }\n    }\n    return outOfDragArea;\n  };\n  ChipList.prototype.getChipsDistance = function (currentInstance) {\n    var constValue = 4;\n    if (currentInstance.chips.length <= 1) {\n      return constValue;\n    }\n    var constantDistance;\n    var firstChipClientRect = currentInstance.find(0).element.getBoundingClientRect();\n    var secondChipClientRect = currentInstance.find(1).element.getBoundingClientRect();\n    var firstChipLeft = firstChipClientRect.left;\n    if (currentInstance.enableRtl) {\n      var secondChipRight = secondChipClientRect.right;\n      constantDistance = firstChipLeft < secondChipRight ? constValue : (firstChipLeft - secondChipRight) / 2;\n      return constantDistance;\n    } else {\n      var firstChipWidth = firstChipClientRect.width;\n      var secondChipLeft = secondChipClientRect.left;\n      constantDistance = secondChipLeft < firstChipLeft + firstChipWidth ? constValue : (secondChipLeft - (firstChipLeft + firstChipWidth)) / 2;\n      return constantDistance;\n    }\n  };\n  ChipList.prototype.getCurrentInstance = function (args) {\n    var chipContainer = args.target.closest('.' + classNames.chipList);\n    if (!isNullOrUndefined(chipContainer) && !isNullOrUndefined(chipContainer.ej2_instances)) {\n      for (var i = 0; i < chipContainer.ej2_instances.length; i++) {\n        if (chipContainer.ej2_instances[parseInt(i.toString(), 10)] instanceof ChipList_1) {\n          return chipContainer.ej2_instances[i];\n        }\n      }\n    }\n    return null;\n  };\n  ChipList.prototype.allowExternalDrop = function (args, clonedChipElement) {\n    var originalIndex = parseInt(clonedChipElement.getAttribute('drag-indicator-index'), 10);\n    var currentInstance;\n    var outOfDragArea = false;\n    var isInstanceChanged = false;\n    if (this.checkInstance(args, this)) {\n      isInstanceChanged = true;\n      currentInstance = this.getCurrentInstance(args);\n      if (!currentInstance.allowDragAndDrop) {\n        return;\n      }\n    } else {\n      currentInstance = this;\n    }\n    var indicatorEle = currentInstance.dragIndicator;\n    indicatorEle.style.display = 'inline';\n    if (!currentInstance.element.contains(args.target)) {\n      return;\n    }\n    outOfDragArea = this.dragAreaCheck(this.dragArea, args.target, outOfDragArea, clonedChipElement.querySelector('.' + classNames.chipDrag), indicatorEle);\n    if (outOfDragArea) {\n      return;\n    }\n    var indicatorRect = indicatorEle.getBoundingClientRect();\n    var allChips = Array.from(currentInstance.element.querySelectorAll('.' + classNames.chip));\n    var newIndex = -1;\n    var topOffset = false;\n    var leftOffset = false;\n    var rightOffset = false;\n    for (var i = 0; i < allChips.length; i++) {\n      if (allChips[i] !== clonedChipElement) {\n        var chipRect = allChips[i].getBoundingClientRect();\n        topOffset = indicatorRect.top < chipRect.top + chipRect.height / 2;\n        leftOffset = indicatorRect.left < chipRect.left + chipRect.width / 2;\n        rightOffset = indicatorRect.left > chipRect.left + chipRect.width / 2;\n        if (!currentInstance.enableRtl && topOffset && leftOffset || currentInstance.enableRtl && topOffset && rightOffset) {\n          newIndex = i;\n          if (i > originalIndex && !isInstanceChanged) {\n            newIndex = i - 1;\n          }\n          break;\n        }\n      }\n    }\n    if (newIndex === -1) {\n      var nextChipIndex = void 0;\n      for (var i = 0; i < allChips.length; i++) {\n        var chipRect = allChips[i].getBoundingClientRect();\n        if (chipRect.top > indicatorRect.top || chipRect.top === indicatorRect.top && chipRect.left > indicatorRect.left) {\n          nextChipIndex = i;\n          break;\n        }\n      }\n      if (nextChipIndex !== allChips.length) {\n        newIndex = nextChipIndex;\n      } else {\n        newIndex = allChips.length;\n      }\n    }\n    var currentChipList = Array.from(this.chips);\n    if (isInstanceChanged) {\n      this.dropChip(currentChipList, originalIndex, currentInstance, newIndex, true);\n    } else if (newIndex !== originalIndex) {\n      this.dropChip(currentChipList, originalIndex, currentInstance, newIndex, false);\n    }\n  };\n  ChipList.prototype.dropChip = function (currentChipList, originalIndex, currentInstance, newIndex, instanceChanged) {\n    var draggedChip = currentChipList.splice(originalIndex, 1)[0];\n    if (!instanceChanged) {\n      currentChipList.splice(newIndex, 0, draggedChip);\n      currentInstance.chips = currentChipList;\n    } else {\n      var newChips = Array.from(currentInstance.chips);\n      newChips.splice(newIndex, 0, draggedChip);\n      currentInstance.chips = newChips;\n    }\n    this.chips = currentChipList;\n    currentInstance.dataBind();\n    this.dataBind();\n    currentInstance.enableDraggingChips();\n  };\n  ChipList.prototype.createChip = function () {\n    this.innerText = this.element.innerText && this.element.innerText.length !== 0 ? this.element.innerText.trim() : this.element.innerText;\n    this.element.innerHTML = '';\n    this.chipCreation(this.type === 'chip' ? [this.innerText ? this.innerText : this.text] : this.chips);\n  };\n  ChipList.prototype.setAttributes = function () {\n    if (this.type === 'chip') {\n      if (this.enabled) {\n        this.element.tabIndex = 0;\n      }\n      this.element.setAttribute('role', 'button');\n    } else {\n      this.element.classList.add(classNames.chipSet);\n      this.element.setAttribute('role', 'listbox');\n      if (this.selection === 'Multiple') {\n        this.element.classList.add(classNames.multiSelection);\n        this.element.setAttribute('aria-multiselectable', 'true');\n      } else if (this.selection === 'Single') {\n        this.element.classList.add(classNames.singleSelection);\n        this.element.setAttribute('aria-multiselectable', 'false');\n      } else {\n        this.element.setAttribute('aria-multiselectable', 'false');\n      }\n    }\n  };\n  ChipList.prototype.setRtl = function () {\n    this.element.classList[this.enableRtl ? 'add' : 'remove'](classNames.rtl);\n  };\n  ChipList.prototype.renderTemplates = function () {\n    if (this.isReact) {\n      this.renderReactTemplates();\n    }\n  };\n  ChipList.prototype.templateParser = function (template) {\n    if (template) {\n      try {\n        if (typeof template !== 'function' && document.querySelectorAll(template).length) {\n          return compile(document.querySelector(template).innerHTML.trim());\n        } else {\n          return compile(template);\n        }\n      } catch (error) {\n        return compile(template);\n      }\n    }\n    return undefined;\n  };\n  ChipList.prototype.chipCreation = function (data) {\n    if (isNullOrUndefined(data)) {\n      return;\n    }\n    var chipListArray = [];\n    var attributeArray = [];\n    for (var i = 0; i < data.length; i++) {\n      var fieldsData = this.getFieldValues(data[i]);\n      var attributesValue = fieldsData.htmlAttributes;\n      attributeArray.push(attributesValue);\n      var chipArray = this.elementCreation(fieldsData);\n      var className = (classNames.chip + ' ' + (fieldsData.enabled ? ' ' : classNames.disabled) + ' ' + (fieldsData.avatarIconCss || fieldsData.avatarText ? classNames.chipWrapper : fieldsData.leadingIconCss ? classNames.iconWrapper : ' ') + ' ' + fieldsData.cssClass).split(' ').filter(function (css) {\n        return css;\n      });\n      if (!this.chipType() || this.type === 'chip') {\n        chipListArray = chipArray;\n        addClass([this.element], className);\n        this.element.setAttribute('aria-label', fieldsData.text);\n        if (fieldsData.value) {\n          this.element.setAttribute('data-value', fieldsData.value.toString());\n        }\n      } else {\n        var wrapper = this.createElement('DIV', {\n          className: className.join(' '),\n          attrs: {\n            tabIndex: '0',\n            role: 'option',\n            'aria-label': fieldsData.text,\n            'aria-selected': 'false'\n          }\n        });\n        if (this.enableDelete) {\n          wrapper.setAttribute('aria-keyshortcuts', 'Press delete or backspace key to delete');\n        }\n        if (fieldsData.value) {\n          wrapper.setAttribute('data-value', fieldsData.value.toString());\n        }\n        if (fieldsData.enabled) {\n          wrapper.setAttribute('aria-disabled', 'false');\n        } else {\n          wrapper.removeAttribute('tabindex');\n          wrapper.setAttribute('aria-disabled', 'true');\n        }\n        if (!isNullOrUndefined(attributeArray[i])) {\n          if (attributeArray.length > i && Object.keys(attributeArray[i]).length) {\n            var htmlAttr = [];\n            htmlAttr = Object.keys(attributeArray[i]);\n            for (var j = 0; j < htmlAttr.length; j++) {\n              wrapper.setAttribute(htmlAttr[j], attributeArray[i][htmlAttr[j]]);\n            }\n          }\n        }\n        append(chipArray, wrapper);\n        chipListArray.push(wrapper);\n      }\n    }\n    append(chipListArray, this.element);\n  };\n  ChipList.prototype.getFieldValues = function (data) {\n    var chipEnabled = !(this.enabled.toString() === 'false');\n    var fields = {\n      text: typeof data === 'object' ? data.text ? data.text.toString() : this.text.toString() : !this.chipType() ? this.innerText ? this.innerText : this.text.toString() : data.toString(),\n      cssClass: typeof data === 'object' ? data.cssClass ? data.cssClass.toString() : this.cssClass.toString() : this.cssClass.toString(),\n      leadingIconCss: typeof data === 'object' ? data.leadingIconCss ? data.leadingIconCss.toString() : this.leadingIconCss.toString() : this.leadingIconCss.toString(),\n      avatarIconCss: typeof data === 'object' ? data.avatarIconCss ? data.avatarIconCss.toString() : this.avatarIconCss.toString() : this.avatarIconCss.toString(),\n      avatarText: typeof data === 'object' ? data.avatarText ? data.avatarText.toString() : this.avatarText.toString() : this.avatarText.toString(),\n      trailingIconCss: typeof data === 'object' ? data.trailingIconCss ? data.trailingIconCss.toString() : this.trailingIconCss.toString() : this.trailingIconCss.toString(),\n      enabled: typeof data === 'object' ? data.enabled !== undefined ? data.enabled.toString() === 'false' ? false : true : chipEnabled : chipEnabled,\n      value: typeof data === 'object' ? data.value ? data.value.toString() : null : null,\n      leadingIconUrl: typeof data === 'object' ? data.leadingIconUrl ? data.leadingIconUrl.toString() : this.leadingIconUrl : this.leadingIconUrl,\n      trailingIconUrl: typeof data === 'object' ? data.trailingIconUrl ? data.trailingIconUrl.toString() : this.trailingIconUrl : this.trailingIconUrl,\n      htmlAttributes: typeof data === 'object' ? data.htmlAttributes ? data.htmlAttributes : this.htmlAttributes : this.htmlAttributes,\n      template: typeof data === 'object' ? data.template ? data.template : null : null\n    };\n    return fields;\n  };\n  ChipList.prototype.elementCreation = function (fields) {\n    var chipArray = [];\n    if (fields.avatarText || fields.avatarIconCss) {\n      var className = (classNames.avatar + ' ' + fields.avatarIconCss).trim();\n      var chipAvatarElement = this.createElement('span', {\n        className: className\n      });\n      chipAvatarElement.innerText = fields.avatarText;\n      chipArray.push(chipAvatarElement);\n    } else if (fields.leadingIconCss) {\n      var className = (classNames.icon + ' ' + fields.leadingIconCss).trim();\n      var chipIconElement = this.createElement('span', {\n        className: className\n      });\n      chipArray.push(chipIconElement);\n    } else if (fields.leadingIconUrl) {\n      var className = (classNames.avatar + ' ' + 'image-url').trim();\n      var chipIconElement = this.createElement('span', {\n        className: className\n      });\n      chipIconElement.style.backgroundImage = 'url(' + fields.leadingIconUrl + ')';\n      chipArray.push(chipIconElement);\n    }\n    var chipTextElement = this.createElement('span', {\n      className: classNames.text\n    });\n    chipTextElement.innerText = fields.text;\n    chipArray.push(chipTextElement);\n    if (fields.template) {\n      var templateWrapper = this.createElement('div', {\n        className: classNames.template\n      });\n      var templateContent = this.templateParser(fields.template)(fields, this, 'template', this.element.id + '_template', false);\n      append(templateContent, templateWrapper);\n      chipArray.push(templateWrapper);\n      this.renderTemplates();\n    }\n    if (fields.trailingIconCss || this.chipType() && this.enableDelete) {\n      var className = (classNames.delete + ' ' + (fields.trailingIconCss ? fields.trailingIconCss : classNames.deleteIcon)).trim();\n      var chipdeleteElement = this.createElement('span', {\n        className: className\n      });\n      chipArray.push(chipdeleteElement);\n    } else if (fields.trailingIconUrl) {\n      var className = 'trailing-icon-url'.trim();\n      var chipIconsElement = this.createElement('span', {\n        className: className\n      });\n      chipIconsElement.style.backgroundImage = 'url(' + fields.trailingIconUrl + ')';\n      chipArray.push(chipIconsElement);\n    }\n    return chipArray;\n  };\n  /**\n   * A function that finds chip based on given input.\n   *\n   * {% codeBlock src='chips/find/index.md' %}{% endcodeBlock %}\n   *\n   * @param  {number | HTMLElement } fields - We can pass index number or element of chip.\n   * @returns {void}\n   */\n  ChipList.prototype.find = function (fields) {\n    var chipData = {\n      text: '',\n      index: -1,\n      element: this.element,\n      data: ''\n    };\n    var chipElement = fields instanceof HTMLElement ? fields : this.element.querySelectorAll('.' + classNames.chip)[fields];\n    if (chipElement && this.chipType()) {\n      chipData.index = Array.prototype.slice.call(this.element.querySelectorAll('.' + classNames.chip)).indexOf(chipElement);\n      var chip = this.chips[chipData.index];\n      if (typeof chip === 'object' && chip !== null) {\n        var chipModel = chip;\n        if (chipModel.text !== undefined) {\n          chipData.text = chipModel.text.toString();\n        }\n      } else if (chip !== undefined) {\n        chipData.text = chip.toString();\n      }\n      chipData.data = chip;\n      chipData.element = chipElement;\n    }\n    return chipData;\n  };\n  /**\n   * Allows adding the chip item(s) by passing a single or array of string, number, or ChipModel values.\n   *\n   * {% codeBlock src='chips/add/index.md' %}{% endcodeBlock %}\n   *\n   * @param  {string[] | number[] | ChipModel[] | string | number | ChipModel} chipsData - We can pass array of string or\n   * array of number or array of chip model or string data or number data or chip model.\n   * @returns {void}\n    */\n  ChipList.prototype.add = function (chipsData) {\n    var _a;\n    if (this.type !== 'chip') {\n      var fieldData = chipsData instanceof Array ? chipsData : [chipsData];\n      this.chips = (_a = [].slice.call(this.chips)).concat.apply(_a, fieldData);\n      this.chipCreation(fieldData);\n    }\n  };\n  /**\n   * Allows selecting the chip item(s) by passing a single or array of string, number, or ChipModel values.\n   *\n   * {% codeBlock src='chips/select/index.md' %}{% endcodeBlock %}\n   *\n   * @param  {number | number[] | HTMLElement | HTMLElement[]} fields - We can pass number or array of number\n   *  or chip element or array of chip element.\n   *  @returns {void}\n   */\n  ChipList.prototype.select = function (fields, selectionType) {\n    this.onSelect(fields, false, selectionType);\n  };\n  ChipList.prototype.multiSelection = function (newProp) {\n    var items = this.element.querySelectorAll('.' + classNames.chip);\n    for (var j = 0; j < newProp.length; j++) {\n      if (typeof newProp[j] === 'string') {\n        for (var k = 0; k < items.length; k++) {\n          if (newProp[j] !== k) {\n            if (newProp[j] === items[k].attributes[5].value) {\n              this.multiSelectedChip.push(k);\n              break;\n            }\n          }\n        }\n      } else {\n        this.multiSelectedChip.push(newProp[j]);\n      }\n    }\n  };\n  ChipList.prototype.onSelect = function (fields, callFromProperty, selectionType) {\n    var index;\n    var chipNodes;\n    var chipValue = null;\n    if (this.chipType() && this.selection !== 'None') {\n      if (callFromProperty) {\n        var chipElements = this.element.querySelectorAll('.' + classNames.chip);\n        for (var i = 0; i < chipElements.length; i++) {\n          chipElements[i].setAttribute('aria-selected', 'false');\n          chipElements[i].classList.remove(classNames.active);\n        }\n      }\n      var fieldData = fields instanceof Array ? fields : [fields];\n      for (var i = 0; i < fieldData.length; i++) {\n        var chipElement = fieldData[i] instanceof HTMLElement ? fieldData[i] : this.element.querySelectorAll('.' + classNames.chip)[fieldData[i]];\n        if (selectionType !== 'index') {\n          for (var j = 0; j < this.chips.length; j++) {\n            chipNodes = this.element.querySelectorAll('.' + classNames.chip)[j];\n            var fieldsData = this.getFieldValues(this.chips[j]);\n            if (selectionType === 'value') {\n              if (fieldsData.value !== null) {\n                chipValue = chipNodes.dataset.value;\n              }\n            } else if (selectionType === 'text') {\n              chipValue = chipNodes.innerText;\n            }\n            if (chipValue === fieldData[i].toString()) {\n              index = j;\n              chipElement = this.element.querySelectorAll('.' + classNames.chip)[index];\n            }\n          }\n        }\n        if (chipElement instanceof HTMLElement) {\n          this.selectionHandler(chipElement);\n        }\n      }\n    }\n  };\n  /**\n   * Allows removing the chip item(s) by passing a single or array of string, number, or ChipModel values.\n   *\n   * {% codeBlock src='chips/remove/index.md' %}{% endcodeBlock %}\n   *\n   * @param  {number | number[] | HTMLElement | HTMLElement[]} fields - We can pass number or array of number\n   *  or chip element or array of chip element.\n   *  @returns {void}\n   */\n  ChipList.prototype.remove = function (fields) {\n    var _this = this;\n    if (this.chipType()) {\n      var fieldData = fields instanceof Array ? fields : [fields];\n      var chipElements_1 = [];\n      var chipCollection_1 = this.element.querySelectorAll('.' + classNames.chip);\n      fieldData.forEach(function (data) {\n        var chipElement = data instanceof HTMLElement ? data : chipCollection_1[data];\n        if (chipElement instanceof HTMLElement) {\n          chipElements_1.push(chipElement);\n        }\n      });\n      chipElements_1.forEach(function (element) {\n        var chips = _this.element.querySelectorAll('.' + classNames.chip);\n        var index = Array.prototype.slice.call(chips).indexOf(element);\n        _this.deleteHandler(element, index);\n      });\n    }\n  };\n  /**\n   * Returns the selected chip(s) data.\n   *\n   * {% codeBlock src='chips/getSelectedChips/index.md' %}{% endcodeBlock %}\n   *\n   *  @returns {void}\n   */\n  ChipList.prototype.getSelectedChips = function () {\n    var selectedChips;\n    if (this.chipType() && this.selection !== 'None') {\n      var selectedItems = {\n        texts: [],\n        Indexes: [],\n        data: [],\n        elements: []\n      };\n      var items = this.element.querySelectorAll('.' + classNames.active);\n      for (var i = 0; i < items.length; i++) {\n        var chip = items[i];\n        selectedItems.elements.push(chip);\n        var index = Array.prototype.slice.call(this.element.querySelectorAll('.' + classNames.chip)).indexOf(chip);\n        selectedItems.Indexes.push(index);\n        selectedItems.data.push(this.chips[index]);\n        var text = typeof this.chips[index] === 'object' ? this.chips[index].text ? this.chips[index].text : null : this.chips[index].toString();\n        selectedItems.texts.push(text);\n      }\n      var selectedItem = {\n        text: selectedItems.texts[0],\n        index: selectedItems.Indexes[0],\n        data: selectedItems.data[0],\n        element: selectedItems.elements[0]\n      };\n      selectedChips = !isNullOrUndefined(selectedItem.index) ? this.selection === 'Multiple' ? selectedItems : selectedItem : undefined;\n    }\n    return selectedChips;\n  };\n  ChipList.prototype.wireEvent = function (unWireEvent) {\n    if (!unWireEvent) {\n      EventHandler.add(this.element, 'click', this.clickHandler, this);\n      EventHandler.add(this.element, 'focusout', this.focusOutHandler, this);\n      EventHandler.add(this.element, 'keydown', this.keyHandler, this);\n      EventHandler.add(this.element, 'keyup', this.keyHandler, this);\n    } else {\n      EventHandler.remove(this.element, 'click', this.clickHandler);\n      EventHandler.remove(this.element, 'focusout', this.focusOutHandler);\n      EventHandler.remove(this.element, 'keydown', this.keyHandler);\n      EventHandler.remove(this.element, 'keyup', this.keyHandler);\n    }\n  };\n  ChipList.prototype.keyHandler = function (e) {\n    if (e.target.classList.contains(classNames.chip)) {\n      if (e.type === 'keydown') {\n        if (e.keyCode === 13 || e.keyCode === 32) {\n          this.clickHandler(e);\n        } else if ((e.keyCode === 46 || e.keyCode === 8) && this.enableDelete) {\n          this.clickHandler(e, true);\n        }\n      } else if (e.keyCode === 9) {\n        this.focusInHandler(e.target);\n      }\n    }\n  };\n  ChipList.prototype.focusInHandler = function (chipWrapper) {\n    if (!chipWrapper.classList.contains(classNames.focused)) {\n      chipWrapper.classList.add(classNames.focused);\n    }\n  };\n  ChipList.prototype.focusOutHandler = function (e) {\n    var chipWrapper = closest(e.target, '.' + classNames.chip);\n    var focusedElement = !this.chipType() ? this.element.classList.contains(classNames.focused) ? this.element : null : this.element.querySelector('.' + classNames.focused);\n    if (chipWrapper && focusedElement) {\n      focusedElement.classList.remove(classNames.focused);\n    }\n  };\n  ChipList.prototype.clickHandler = function (e, del) {\n    var _this = this;\n    if (del === void 0) {\n      del = false;\n    }\n    var chipWrapper = closest(e.target, '.' + classNames.chip);\n    if (chipWrapper) {\n      var chipDataArgs = void 0;\n      if (this.chipType()) {\n        chipDataArgs = this.find(chipWrapper);\n      } else {\n        var index = Array.prototype.slice.call(this.element.querySelectorAll('.' + classNames.chip)).indexOf(chipWrapper);\n        chipDataArgs = {\n          text: this.innerText ? this.innerText : this.text,\n          element: chipWrapper,\n          data: this.text,\n          index: index\n        };\n      }\n      chipDataArgs.event = e;\n      chipDataArgs.cancel = false;\n      this.trigger('beforeClick', chipDataArgs, function (observedArgs) {\n        if (!observedArgs.cancel) {\n          _this.clickEventHandler(observedArgs.element, e, del);\n        }\n      });\n    }\n  };\n  ChipList.prototype.clickEventHandler = function (chipWrapper, e, del) {\n    var _this = this;\n    if (this.chipType()) {\n      var chipData_1 = this.find(chipWrapper);\n      chipData_1.event = e;\n      var deleteElement = e.target.classList.contains(classNames.deleteIcon) ? e.target : del ? chipWrapper.querySelector('.' + classNames.deleteIcon) : undefined;\n      if (deleteElement && this.enableDelete) {\n        chipData_1.cancel = false;\n        var deletedItemArgs = chipData_1;\n        this.trigger('delete', deletedItemArgs, function (observedArgs) {\n          if (!observedArgs.cancel) {\n            _this.deleteHandler(observedArgs.element, observedArgs.index);\n            _this.selectionHandler(chipWrapper);\n            chipData_1.selected = observedArgs.element.classList.contains(classNames.active);\n            var selectedItemArgs = chipData_1;\n            _this.trigger('click', selectedItemArgs);\n            var chipElement = _this.element.querySelectorAll('.' + classNames.chip)[observedArgs.index];\n            if (chipElement) {\n              chipElement.focus();\n              _this.focusInHandler(chipElement);\n            }\n          }\n        });\n      } else if (this.selection !== 'None') {\n        this.selectionHandler(chipWrapper);\n        chipData_1.selected = chipWrapper.classList.contains(classNames.active);\n        var selectedItemArgs = chipData_1;\n        this.trigger('click', selectedItemArgs);\n      } else {\n        this.focusInHandler(chipWrapper);\n        var clickedItemArgs = chipData_1;\n        this.trigger('click', clickedItemArgs);\n      }\n    } else {\n      this.focusInHandler(chipWrapper);\n      var clickedItemArgs = {\n        text: this.innerText ? this.innerText : this.text,\n        element: chipWrapper,\n        data: this.text,\n        event: e\n      };\n      this.trigger('click', clickedItemArgs);\n    }\n  };\n  ChipList.prototype.selectionHandler = function (chipWrapper) {\n    if (this.selection === 'Single') {\n      var activeElement = this.element.querySelector('.' + classNames.active);\n      if (activeElement && activeElement !== chipWrapper) {\n        activeElement.classList.remove(classNames.active);\n        activeElement.setAttribute('aria-selected', 'false');\n      }\n      this.setProperties({\n        selectedChips: null\n      }, true);\n    } else {\n      this.setProperties({\n        selectedChips: []\n      }, true);\n    }\n    if (chipWrapper.classList.contains(classNames.active)) {\n      chipWrapper.classList.remove(classNames.active);\n      chipWrapper.setAttribute('aria-selected', 'false');\n    } else {\n      chipWrapper.classList.add(classNames.active);\n      chipWrapper.setAttribute('aria-selected', 'true');\n    }\n    this.updateSelectedChips();\n  };\n  ChipList.prototype.updateSelectedChips = function () {\n    var chipListEle = this.element.querySelectorAll('.' + classNames.chip);\n    var chipCollIndex = [];\n    var chipCollValue = [];\n    var chip = null;\n    var value = null;\n    for (var i = 0; i < chipListEle.length; i++) {\n      var selectedEle = this.element.querySelectorAll('.' + classNames.chip)[i];\n      if (selectedEle.getAttribute('aria-selected') === 'true') {\n        value = selectedEle.getAttribute('data-value');\n        if (this.selection === 'Single' && selectedEle.classList.contains('e-active')) {\n          chip = value ? value : i;\n          break;\n        } else {\n          chip = value ? chipCollValue.push(value) : chipCollIndex.push(i);\n        }\n      }\n    }\n    this.setProperties({\n      selectedChips: this.selection === 'Single' ? chip : value ? chipCollValue : chipCollIndex\n    }, true);\n  };\n  ChipList.prototype.deleteHandler = function (chipWrapper, index) {\n    // Used to store the deleted chip item details.\n    var deletedChipData = this.find(chipWrapper);\n    this.chips.splice(index, 1);\n    this.setProperties({\n      chips: this.chips\n    }, true);\n    detach(chipWrapper);\n    this.trigger('deleted', deletedChipData);\n  };\n  /**\n   * Removes the component from the DOM and detaches all its related event handlers. Also, it removes the attributes and classes.\n   *\n   * {% codeBlock src='chips/destroy/index.md' %}{% endcodeBlock %}\n   *\n   *  @returns {void}\n   */\n  ChipList.prototype.destroy = function () {\n    for (var i = 0; i < this.dragCollection.length; i++) {\n      this.dragCollection[i].destroy();\n    }\n    this.dragCollection = [];\n    this.clearTemplate();\n    removeClass([this.element], [classNames.chipSet, classNames.chip, classNames.rtl, classNames.multiSelection, classNames.singleSelection, classNames.disabled, classNames.chipWrapper, classNames.iconWrapper, classNames.active, classNames.focused].concat(this.cssClass ? this.cssClass.toString().split(' ').filter(function (css) {\n      return css;\n    }) : []));\n    this.removeMultipleAttributes(['tabindex', 'role', 'aria-label', 'aria-multiselectable'], this.element);\n    this.wireEvent(true);\n    this.rippleFunction();\n    _super.prototype.destroy.call(this);\n    this.element.innerHTML = '';\n    this.element.innerText = this.innerText;\n  };\n  ChipList.prototype.removeMultipleAttributes = function (attributes, element) {\n    attributes.forEach(function (attr) {\n      element.removeAttribute(attr);\n    });\n  };\n  ChipList.prototype.getPersistData = function () {\n    return this.addOnPersist([]);\n  };\n  ChipList.prototype.getModuleName = function () {\n    return 'chip-list';\n  };\n  /**\n   * Called internally if any of the property value changed.\n   *\n   * @returns void\n   * @private\n   */\n  ChipList.prototype.onPropertyChanged = function (newProp, oldProp) {\n    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n      var prop = _a[_i];\n      switch (prop) {\n        case 'chips':\n        case 'text':\n        case 'avatarText':\n        case 'avatarIconCss':\n        case 'leadingIconCss':\n        case 'trailingIconCss':\n        case 'selection':\n        case 'enableDelete':\n        case 'enabled':\n          this.refresh();\n          break;\n        case 'cssClass':\n          if (!this.chipType()) {\n            removeClass([this.element], oldProp.cssClass.toString().split(' ').filter(function (css) {\n              return css;\n            }));\n            addClass([this.element], newProp.cssClass.toString().split(' ').filter(function (css) {\n              return css;\n            }));\n          } else {\n            this.refresh();\n          }\n          break;\n        case 'selectedChips':\n          removeClass(this.element.querySelectorAll('.e-active'), 'e-active');\n          if (this.selection === 'Multiple') {\n            this.multiSelectedChip = [];\n            this.multiSelection(newProp.selectedChips);\n            this.onSelect(this.multiSelectedChip, true);\n            this.updateSelectedChips();\n          } else {\n            this.onSelect(newProp.selectedChips, true);\n          }\n          break;\n        case 'enableRtl':\n          this.setRtl();\n          break;\n        case 'allowDragAndDrop':\n          for (var i = 0; i < this.dragCollection.length; i++) {\n            this.dragCollection[i].destroy();\n          }\n          this.dragCollection = [];\n          if (this.allowDragAndDrop) {\n            this.enableDraggingChips();\n          }\n          break;\n        case 'dragArea':\n          if (this.allowDragAndDrop) {\n            for (var i = 0; i < this.dragCollection.length; i++) {\n              this.dragCollection[i].dragArea = this.dragArea;\n            }\n          }\n          break;\n      }\n    }\n  };\n  var ChipList_1;\n  __decorate([Property([])], ChipList.prototype, \"chips\", void 0);\n  __decorate([Property('')], ChipList.prototype, \"text\", void 0);\n  __decorate([Property('')], ChipList.prototype, \"avatarText\", void 0);\n  __decorate([Property('')], ChipList.prototype, \"avatarIconCss\", void 0);\n  __decorate([Property('')], ChipList.prototype, \"htmlAttributes\", void 0);\n  __decorate([Property('')], ChipList.prototype, \"leadingIconCss\", void 0);\n  __decorate([Property('')], ChipList.prototype, \"trailingIconCss\", void 0);\n  __decorate([Property('')], ChipList.prototype, \"leadingIconUrl\", void 0);\n  __decorate([Property('')], ChipList.prototype, \"trailingIconUrl\", void 0);\n  __decorate([Property('')], ChipList.prototype, \"cssClass\", void 0);\n  __decorate([Property(true)], ChipList.prototype, \"enabled\", void 0);\n  __decorate([Property([])], ChipList.prototype, \"selectedChips\", void 0);\n  __decorate([Property('None')], ChipList.prototype, \"selection\", void 0);\n  __decorate([Property(false)], ChipList.prototype, \"enableDelete\", void 0);\n  __decorate([Property(false)], ChipList.prototype, \"allowDragAndDrop\", void 0);\n  __decorate([Property(null)], ChipList.prototype, \"dragArea\", void 0);\n  __decorate([Event()], ChipList.prototype, \"created\", void 0);\n  __decorate([Event()], ChipList.prototype, \"click\", void 0);\n  __decorate([Event()], ChipList.prototype, \"beforeClick\", void 0);\n  __decorate([Event()], ChipList.prototype, \"delete\", void 0);\n  __decorate([Event()], ChipList.prototype, \"deleted\", void 0);\n  __decorate([Event()], ChipList.prototype, \"dragStart\", void 0);\n  __decorate([Event()], ChipList.prototype, \"dragging\", void 0);\n  __decorate([Event()], ChipList.prototype, \"dragStop\", void 0);\n  ChipList = ChipList_1 = __decorate([NotifyPropertyChanges], ChipList);\n  return ChipList;\n}(Component);\nexport { ChipList };","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","Component","NotifyPropertyChanges","Property","append","isNullOrUndefined","remove","removeClass","rippleEffect","closest","Draggable","EventHandler","detach","Event","addClass","compile","classNames","chipSet","chip","avatar","text","icon","delete","deleteIcon","multiSelection","singleSelection","active","chipWrapper","iconWrapper","focused","disabled","rtl","template","chipList","customIcon","chipDrag","dragAndDrop","dropRestricted","cloneChip","dragIndicator","ChipList","_super","options","element","_this","call","multiSelectedChip","ChipList_1","preRender","chipType","chips","render","type","innerText","setAttributes","createChip","setRtl","select","selectedChips","wireEvent","rippleFunction","selector","renderComplete","dragCollection","allowDragAndDrop","enableDraggingChips","clonedChipElement","chipElements","querySelectorAll","forEach","index","dragObj","preventDefault","clone","dragArea","helper","cloneNode","classList","add","appendChild","dragStart","args","createElement","className","document","body","chipData","find","dragStartArgs","cancel","event","draggedItem","draggedItemData","dropTarget","trigger","setAttribute","toString","intDestroy","drag","draggingArgs","draggingIconEle","querySelector","prepend","allowExternalDragging","dragStop","dragStopArgs","allowExternalDrop","indexOf","push","checkInstance","context","isInstanceMatched","id","updatedInstance","setIcons","currentInstance","indicatorEle","outOfDragArea","isTargetInside","contains","isDroppable","style","display","closestChip","closestDistance","Infinity","newIndex","getCurrentInstance","dragAreaCheck","droppedRect","getBoundingClientRect","allChips","from","rect_1","distance","Math","sqrt","pow","left","top","chipsDistance","getChipsDistance","cloneRect","rect","targetChip","window","scrollY","enableRtl","right","scrollX","width","isString","isHtmlElement","HTMLElement","dragAreaElement","constValue","constantDistance","firstChipClientRect","secondChipClientRect","firstChipLeft","secondChipRight","firstChipWidth","secondChipLeft","chipContainer","ej2_instances","parseInt","originalIndex","getAttribute","isInstanceChanged","indicatorRect","topOffset","leftOffset","rightOffset","chipRect","height","nextChipIndex","currentChipList","dropChip","instanceChanged","draggedChip","splice","newChips","dataBind","trim","innerHTML","chipCreation","enabled","tabIndex","selection","renderTemplates","isReact","renderReactTemplates","templateParser","error","undefined","data","chipListArray","attributeArray","fieldsData","getFieldValues","attributesValue","htmlAttributes","chipArray","elementCreation","avatarIconCss","avatarText","leadingIconCss","cssClass","split","filter","css","value","wrapper","join","attrs","role","enableDelete","removeAttribute","keys","htmlAttr","j","chipEnabled","fields","trailingIconCss","leadingIconUrl","trailingIconUrl","chipAvatarElement","chipIconElement","backgroundImage","chipTextElement","templateWrapper","templateContent","chipdeleteElement","chipIconsElement","chipElement","slice","chipModel","chipsData","_a","fieldData","concat","apply","selectionType","onSelect","newProp","items","k","attributes","callFromProperty","chipNodes","chipValue","dataset","selectionHandler","chipElements_1","chipCollection_1","deleteHandler","getSelectedChips","selectedItems","texts","Indexes","elements","selectedItem","unWireEvent","clickHandler","focusOutHandler","keyHandler","e","keyCode","focusInHandler","focusedElement","del","chipDataArgs","observedArgs","clickEventHandler","chipData_1","deleteElement","deletedItemArgs","selected","selectedItemArgs","focus","clickedItemArgs","activeElement","setProperties","updateSelectedChips","chipListEle","chipCollIndex","chipCollValue","selectedEle","deletedChipData","destroy","clearTemplate","removeMultipleAttributes","attr","getPersistData","addOnPersist","getModuleName","onPropertyChanged","oldProp","_i","prop","refresh"],"sources":["D:/weektable/frontend/node_modules/@syncfusion/ej2-buttons/src/chips/chip-list.js"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Component, NotifyPropertyChanges, Property, append, isNullOrUndefined, remove } from '@syncfusion/ej2-base';\nimport { removeClass, rippleEffect, closest } from '@syncfusion/ej2-base';\nimport { Draggable } from '@syncfusion/ej2-base';\nimport { EventHandler, detach, Event, addClass, compile } from '@syncfusion/ej2-base';\nexport var classNames = {\n    chipSet: 'e-chip-set',\n    chip: 'e-chip',\n    avatar: 'e-chip-avatar',\n    text: 'e-chip-text',\n    icon: 'e-chip-icon',\n    delete: 'e-chip-delete',\n    deleteIcon: 'e-dlt-btn',\n    multiSelection: 'e-multi-selection',\n    singleSelection: 'e-selection',\n    active: 'e-active',\n    chipWrapper: 'e-chip-avatar-wrap',\n    iconWrapper: 'e-chip-icon-wrap',\n    focused: 'e-focused',\n    disabled: 'e-disabled',\n    rtl: 'e-rtl',\n    template: 'e-chip-template',\n    chipList: 'e-chip-list',\n    customIcon: 'e-icons',\n    chipDrag: 'e-chip-drag',\n    dragAndDrop: 'e-drag-and-drop',\n    dropRestricted: 'e-error-treeview',\n    cloneChip: 'e-clone-chip',\n    dragIndicator: 'e-drag-indicator'\n};\n/**\n * A chip component is a small block of essential information, mostly used on contacts or filter tags.\n * ```html\n * <div id=\"chip\"></div>\n * ```\n * ```typescript\n * <script>\n * var chipObj = new ChipList();\n * chipObj.appendTo(\"#chip\");\n * </script>\n * ```\n */\nvar ChipList = /** @class */ (function (_super) {\n    __extends(ChipList, _super);\n    function ChipList(options, element) {\n        var _this = _super.call(this, options, element) || this;\n        _this.multiSelectedChip = [];\n        return _this;\n    }\n    ChipList_1 = ChipList;\n    /**\n     * Initialize the event handler\n     *\n     * @private\n     */\n    ChipList.prototype.preRender = function () {\n        //prerender\n    };\n    /**\n     * To find the chips length.\n     *\n     * @returns boolean\n     * @private\n     */\n    ChipList.prototype.chipType = function () {\n        return (this.chips && this.chips.length && this.chips.length > 0);\n    };\n    /**\n     * To Initialize the control rendering.\n     *\n     * @returns void\n     * @private\n     */\n    ChipList.prototype.render = function () {\n        this.type = (!isNullOrUndefined(this.chips) && this.chips.length) ? 'chipset' : (this.text || this.element.innerText ? 'chip' : 'chipset');\n        this.setAttributes();\n        this.createChip();\n        this.setRtl();\n        this.select(this.selectedChips);\n        this.wireEvent(false);\n        this.rippleFunction = rippleEffect(this.element, {\n            selector: '.' + classNames.chip\n        });\n        this.renderComplete();\n        this.dragCollection = [];\n        if (this.allowDragAndDrop) {\n            this.enableDraggingChips();\n        }\n    };\n    ChipList.prototype.enableDraggingChips = function () {\n        var _this = this;\n        var clonedChipElement;\n        var chipElements = this.element.querySelectorAll('.' + classNames.chip);\n        chipElements.forEach(function (chip, index) {\n            _this.dragObj = new Draggable(chip, {\n                preventDefault: false,\n                clone: true,\n                dragArea: _this.dragArea,\n                helper: function () {\n                    clonedChipElement = chip.cloneNode(true);\n                    clonedChipElement.classList.add(classNames.cloneChip);\n                    _this.element.appendChild(clonedChipElement);\n                    return clonedChipElement;\n                },\n                dragStart: function (args) {\n                    _this.dragIndicator = _this.createElement('div', { className: classNames.dragIndicator });\n                    document.body.appendChild(_this.dragIndicator);\n                    var chipData = _this.find(args.element);\n                    var dragStartArgs = {\n                        cancel: false,\n                        event: args.event,\n                        draggedItem: args.element,\n                        draggedItemData: chipData,\n                        dropTarget: null\n                    };\n                    _this.trigger('dragStart', dragStartArgs, function () {\n                        if (isNullOrUndefined(dragStartArgs.cancel)) {\n                            dragStartArgs.cancel = false;\n                        }\n                    });\n                    if (!dragStartArgs.cancel) {\n                        clonedChipElement.setAttribute('drag-indicator-index', index.toString());\n                    }\n                    else {\n                        _this.dragObj.intDestroy(args.event);\n                    }\n                },\n                drag: function (args) {\n                    var chipData = _this.find(args.element);\n                    var draggingArgs = {\n                        event: args.event,\n                        draggedItem: args.element,\n                        draggedItemData: chipData,\n                        dropTarget: null\n                    };\n                    _this.trigger('dragging', draggingArgs);\n                    var draggingIconEle = clonedChipElement.querySelector('.' + classNames.chipDrag);\n                    if (isNullOrUndefined(draggingIconEle)) {\n                        draggingIconEle = _this.createElement('span', { className: classNames.customIcon + \" \" + classNames.dragAndDrop + \" \" + classNames.chipDrag });\n                        clonedChipElement.prepend(draggingIconEle);\n                    }\n                    _this.allowExternalDragging(args, clonedChipElement, draggingIconEle);\n                },\n                dragStop: function (args) {\n                    var chipData = _this.find(args.element);\n                    var dragStopArgs = {\n                        cancel: false,\n                        event: args.event,\n                        draggedItem: args.element,\n                        draggedItemData: chipData,\n                        dropTarget: args.target\n                    };\n                    _this.trigger('dragStop', dragStopArgs, function () {\n                        if (isNullOrUndefined(dragStopArgs.cancel)) {\n                            dragStopArgs.cancel = false;\n                        }\n                    });\n                    if (!dragStopArgs.cancel) {\n                        _this.allowExternalDrop(args, clonedChipElement);\n                    }\n                    if (!isNullOrUndefined(_this.dragIndicator)) {\n                        remove(_this.dragIndicator);\n                    }\n                    if (!isNullOrUndefined(clonedChipElement)) {\n                        clonedChipElement.remove();\n                    }\n                }\n            });\n            if (_this.dragCollection.indexOf(_this.dragObj) === -1) {\n                _this.dragCollection.push(_this.dragObj);\n            }\n        });\n    };\n    ChipList.prototype.checkInstance = function (args, context) {\n        var isInstanceMatched = !isNullOrUndefined(args.target.closest('.' + classNames.chipList)) &&\n            args.target.closest('.' + classNames.chipList).id !== context.element.id;\n        if (isInstanceMatched) {\n            this.updatedInstance = args.target.closest('.' + classNames.chipList);\n        }\n        return isInstanceMatched;\n    };\n    ChipList.prototype.setIcons = function (currentInstance, draggingIconEle, target, indicatorEle, outOfDragArea) {\n        var isTargetInside = currentInstance.element.contains(target);\n        var isDroppable = target.closest('.e-droppable');\n        if ((isTargetInside || isDroppable) && !outOfDragArea) {\n            draggingIconEle.classList.add(classNames.dragAndDrop);\n            draggingIconEle.classList.remove(classNames.dropRestricted);\n            if (isDroppable) {\n                indicatorEle.style.display = 'none';\n            }\n        }\n        else {\n            draggingIconEle.classList.remove(classNames.dragAndDrop);\n            draggingIconEle.classList.add(classNames.dropRestricted);\n            indicatorEle.style.display = 'none';\n        }\n    };\n    ChipList.prototype.allowExternalDragging = function (args, clonedChipElement, draggingIconEle) {\n        var currentInstance;\n        var closestChip = null;\n        var closestDistance = Infinity;\n        var newIndex = -1;\n        var outOfDragArea = false;\n        if (this.checkInstance(args, this)) {\n            this.dragIndicator.style.display = 'none';\n            currentInstance = this.getCurrentInstance(args);\n            currentInstance.dragIndicator = this.dragIndicator;\n            if (!currentInstance.allowDragAndDrop) {\n                return;\n            }\n        }\n        else {\n            currentInstance = this;\n        }\n        var indicatorEle = currentInstance.dragIndicator;\n        indicatorEle.style.display = 'inline';\n        outOfDragArea = this.dragAreaCheck(this.dragArea, args.target, outOfDragArea, draggingIconEle, indicatorEle);\n        this.setIcons(currentInstance, draggingIconEle, args.target, indicatorEle, outOfDragArea);\n        currentInstance.element.appendChild(clonedChipElement);\n        var droppedRect = clonedChipElement.getBoundingClientRect();\n        var allChips = Array.from(currentInstance.element.querySelectorAll('.' + classNames.chip));\n        allChips.forEach(function (chip, i) {\n            if (chip !== clonedChipElement) {\n                var rect_1 = chip.getBoundingClientRect();\n                var distance = Math.sqrt(Math.pow(droppedRect.left - rect_1.left, 2) + Math.pow(droppedRect.top - rect_1.top, 2));\n                if (distance < closestDistance) {\n                    closestDistance = distance;\n                    closestChip = chip;\n                    newIndex = i;\n                }\n            }\n        });\n        if (newIndex === -1) {\n            newIndex = allChips.length;\n        }\n        var chipsDistance = this.getChipsDistance(currentInstance);\n        var cloneRect = clonedChipElement.getBoundingClientRect();\n        var rect;\n        if (closestChip || allChips.length > 0) {\n            var targetChip = closestChip || allChips[allChips.length - 1];\n            rect = targetChip.getBoundingClientRect();\n            indicatorEle.style.top = rect.top + window.scrollY + 'px';\n            indicatorEle.style.left = currentInstance.enableRtl ? (rect.right + chipsDistance + 'px') :\n                (rect.left - chipsDistance + window.scrollX + 'px');\n        }\n        if (currentInstance.enableRtl) {\n            if (cloneRect.left < rect.left - rect.width / 2 && cloneRect.top > rect.top) {\n                indicatorEle.style.left = rect.left - chipsDistance + window.scrollX + 'px';\n            }\n        }\n        else if (cloneRect.left > rect.left + rect.width / 2 && cloneRect.top > rect.top) {\n            indicatorEle.style.left = rect.left + rect.width + chipsDistance + window.scrollX + 'px';\n        }\n    };\n    ChipList.prototype.dragAreaCheck = function (dragArea, target, outOfDragArea, draggingIconEle, indicatorEle) {\n        if (isNullOrUndefined(dragArea)) {\n            return false;\n        }\n        var isString = typeof dragArea === 'string';\n        var isHtmlElement = dragArea instanceof HTMLElement;\n        var dragAreaElement = isString ? document.querySelector(dragArea) : dragArea;\n        if (!isNullOrUndefined(dragAreaElement)) {\n            if ((isString || isHtmlElement) && !dragAreaElement.contains(target)) {\n                outOfDragArea = true;\n                indicatorEle.style.display = 'none';\n                draggingIconEle.classList.add(classNames.dropRestricted);\n                draggingIconEle.classList.remove(classNames.dragAndDrop);\n            }\n        }\n        return outOfDragArea;\n    };\n    ChipList.prototype.getChipsDistance = function (currentInstance) {\n        var constValue = 4;\n        if (currentInstance.chips.length <= 1) {\n            return constValue;\n        }\n        var constantDistance;\n        var firstChipClientRect = currentInstance.find(0).element.getBoundingClientRect();\n        var secondChipClientRect = currentInstance.find(1).element.getBoundingClientRect();\n        var firstChipLeft = firstChipClientRect.left;\n        if (currentInstance.enableRtl) {\n            var secondChipRight = secondChipClientRect.right;\n            constantDistance = firstChipLeft < secondChipRight ? constValue : ((firstChipLeft - secondChipRight) / 2);\n            return constantDistance;\n        }\n        else {\n            var firstChipWidth = firstChipClientRect.width;\n            var secondChipLeft = secondChipClientRect.left;\n            constantDistance = secondChipLeft < (firstChipLeft + firstChipWidth) ?\n                constValue : (secondChipLeft - (firstChipLeft + firstChipWidth)) / 2;\n            return constantDistance;\n        }\n    };\n    ChipList.prototype.getCurrentInstance = function (args) {\n        var chipContainer = args.target.closest('.' + classNames.chipList);\n        if (!isNullOrUndefined(chipContainer) && !isNullOrUndefined(chipContainer.ej2_instances)) {\n            for (var i = 0; i < chipContainer.ej2_instances.length; i++) {\n                if (chipContainer.ej2_instances[parseInt(i.toString(), 10)] instanceof ChipList_1) {\n                    return chipContainer.ej2_instances[i];\n                }\n            }\n        }\n        return null;\n    };\n    ChipList.prototype.allowExternalDrop = function (args, clonedChipElement) {\n        var originalIndex = parseInt(clonedChipElement.getAttribute('drag-indicator-index'), 10);\n        var currentInstance;\n        var outOfDragArea = false;\n        var isInstanceChanged = false;\n        if (this.checkInstance(args, this)) {\n            isInstanceChanged = true;\n            currentInstance = this.getCurrentInstance(args);\n            if (!currentInstance.allowDragAndDrop) {\n                return;\n            }\n        }\n        else {\n            currentInstance = this;\n        }\n        var indicatorEle = currentInstance.dragIndicator;\n        indicatorEle.style.display = 'inline';\n        if (!currentInstance.element.contains(args.target)) {\n            return;\n        }\n        outOfDragArea = this.dragAreaCheck(this.dragArea, args.target, outOfDragArea, clonedChipElement.querySelector('.' + classNames.chipDrag), indicatorEle);\n        if (outOfDragArea) {\n            return;\n        }\n        var indicatorRect = indicatorEle.getBoundingClientRect();\n        var allChips = Array.from(currentInstance.element.querySelectorAll('.' + classNames.chip));\n        var newIndex = -1;\n        var topOffset = false;\n        var leftOffset = false;\n        var rightOffset = false;\n        for (var i = 0; i < allChips.length; i++) {\n            if (allChips[i] !== clonedChipElement) {\n                var chipRect = allChips[i].getBoundingClientRect();\n                topOffset = indicatorRect.top < chipRect.top + chipRect.height / 2;\n                leftOffset = indicatorRect.left < chipRect.left + chipRect.width / 2;\n                rightOffset = indicatorRect.left > chipRect.left + chipRect.width / 2;\n                if ((!currentInstance.enableRtl && topOffset && leftOffset) || (currentInstance.enableRtl && topOffset && rightOffset)) {\n                    newIndex = i;\n                    if (i > originalIndex && !isInstanceChanged) {\n                        newIndex = i - 1;\n                    }\n                    break;\n                }\n            }\n        }\n        if (newIndex === -1) {\n            var nextChipIndex = void 0;\n            for (var i = 0; i < allChips.length; i++) {\n                var chipRect = allChips[i].getBoundingClientRect();\n                if ((chipRect.top > indicatorRect.top) || (chipRect.top === indicatorRect.top && chipRect.left > indicatorRect.left)) {\n                    nextChipIndex = i;\n                    break;\n                }\n            }\n            if (nextChipIndex !== allChips.length) {\n                newIndex = nextChipIndex;\n            }\n            else {\n                newIndex = allChips.length;\n            }\n        }\n        var currentChipList = Array.from(this.chips);\n        if (isInstanceChanged) {\n            this.dropChip(currentChipList, originalIndex, currentInstance, newIndex, true);\n        }\n        else if (newIndex !== originalIndex) {\n            this.dropChip(currentChipList, originalIndex, currentInstance, newIndex, false);\n        }\n    };\n    ChipList.prototype.dropChip = function (currentChipList, originalIndex, currentInstance, newIndex, instanceChanged) {\n        var draggedChip = currentChipList.splice(originalIndex, 1)[0];\n        if (!instanceChanged) {\n            currentChipList.splice(newIndex, 0, draggedChip);\n            currentInstance.chips = currentChipList;\n        }\n        else {\n            var newChips = Array.from(currentInstance.chips);\n            newChips.splice(newIndex, 0, draggedChip);\n            currentInstance.chips = newChips;\n        }\n        this.chips = currentChipList;\n        currentInstance.dataBind();\n        this.dataBind();\n        currentInstance.enableDraggingChips();\n    };\n    ChipList.prototype.createChip = function () {\n        this.innerText = (this.element.innerText && this.element.innerText.length !== 0)\n            ? this.element.innerText.trim() : this.element.innerText;\n        this.element.innerHTML = '';\n        this.chipCreation(this.type === 'chip' ? [this.innerText ? this.innerText : this.text] : this.chips);\n    };\n    ChipList.prototype.setAttributes = function () {\n        if (this.type === 'chip') {\n            if (this.enabled) {\n                this.element.tabIndex = 0;\n            }\n            this.element.setAttribute('role', 'button');\n        }\n        else {\n            this.element.classList.add(classNames.chipSet);\n            this.element.setAttribute('role', 'listbox');\n            if (this.selection === 'Multiple') {\n                this.element.classList.add(classNames.multiSelection);\n                this.element.setAttribute('aria-multiselectable', 'true');\n            }\n            else if (this.selection === 'Single') {\n                this.element.classList.add(classNames.singleSelection);\n                this.element.setAttribute('aria-multiselectable', 'false');\n            }\n            else {\n                this.element.setAttribute('aria-multiselectable', 'false');\n            }\n        }\n    };\n    ChipList.prototype.setRtl = function () {\n        this.element.classList[this.enableRtl ? 'add' : 'remove'](classNames.rtl);\n    };\n    ChipList.prototype.renderTemplates = function () {\n        if (this.isReact) {\n            this.renderReactTemplates();\n        }\n    };\n    ChipList.prototype.templateParser = function (template) {\n        if (template) {\n            try {\n                if (typeof template !== 'function' && document.querySelectorAll(template).length) {\n                    return compile(document.querySelector(template).innerHTML.trim());\n                }\n                else {\n                    return compile(template);\n                }\n            }\n            catch (error) {\n                return compile(template);\n            }\n        }\n        return undefined;\n    };\n    ChipList.prototype.chipCreation = function (data) {\n        if (isNullOrUndefined(data)) {\n            return;\n        }\n        var chipListArray = [];\n        var attributeArray = [];\n        for (var i = 0; i < data.length; i++) {\n            var fieldsData = this.getFieldValues(data[i]);\n            var attributesValue = fieldsData.htmlAttributes;\n            attributeArray.push(attributesValue);\n            var chipArray = this.elementCreation(fieldsData);\n            var className = (classNames.chip + ' ' + (fieldsData.enabled ? ' ' : classNames.disabled) + ' ' +\n                (fieldsData.avatarIconCss || fieldsData.avatarText ? classNames.chipWrapper : (fieldsData.leadingIconCss ?\n                    classNames.iconWrapper : ' ')) + ' ' + fieldsData.cssClass).split(' ').filter(function (css) { return css; });\n            if (!this.chipType() || this.type === 'chip') {\n                chipListArray = chipArray;\n                addClass([this.element], className);\n                this.element.setAttribute('aria-label', fieldsData.text);\n                if (fieldsData.value) {\n                    this.element.setAttribute('data-value', fieldsData.value.toString());\n                }\n            }\n            else {\n                var wrapper = this.createElement('DIV', {\n                    className: className.join(' '), attrs: {\n                        tabIndex: '0', role: 'option',\n                        'aria-label': fieldsData.text, 'aria-selected': 'false'\n                    }\n                });\n                if (this.enableDelete) {\n                    wrapper.setAttribute('aria-keyshortcuts', 'Press delete or backspace key to delete');\n                }\n                if (fieldsData.value) {\n                    wrapper.setAttribute('data-value', fieldsData.value.toString());\n                }\n                if (fieldsData.enabled) {\n                    wrapper.setAttribute('aria-disabled', 'false');\n                }\n                else {\n                    wrapper.removeAttribute('tabindex');\n                    wrapper.setAttribute('aria-disabled', 'true');\n                }\n                if (!isNullOrUndefined(attributeArray[i])) {\n                    if (attributeArray.length > i && Object.keys(attributeArray[i]).length) {\n                        var htmlAttr = [];\n                        htmlAttr = (Object.keys(attributeArray[i]));\n                        for (var j = 0; j < htmlAttr.length; j++) {\n                            wrapper.setAttribute(htmlAttr[j], attributeArray[i][htmlAttr[j]]);\n                        }\n                    }\n                }\n                append(chipArray, wrapper);\n                chipListArray.push(wrapper);\n            }\n        }\n        append(chipListArray, this.element);\n    };\n    ChipList.prototype.getFieldValues = function (data) {\n        var chipEnabled = !(this.enabled.toString() === 'false');\n        var fields = {\n            text: typeof data === 'object' ? (data.text ? data.text.toString() : this.text.toString()) :\n                (!this.chipType() ? (this.innerText ? this.innerText : this.text.toString()) : data.toString()),\n            cssClass: typeof data === 'object' ? (data.cssClass ? data.cssClass.toString() : this.cssClass.toString()) :\n                (this.cssClass.toString()),\n            leadingIconCss: typeof data === 'object' ? (data.leadingIconCss ? data.leadingIconCss.toString() :\n                this.leadingIconCss.toString()) : (this.leadingIconCss.toString()),\n            avatarIconCss: typeof data === 'object' ? (data.avatarIconCss ? data.avatarIconCss.toString() :\n                this.avatarIconCss.toString()) : (this.avatarIconCss.toString()),\n            avatarText: typeof data === 'object' ? (data.avatarText ? data.avatarText.toString() : this.avatarText.toString()) :\n                (this.avatarText.toString()),\n            trailingIconCss: typeof data === 'object' ? (data.trailingIconCss ? data.trailingIconCss.toString() :\n                this.trailingIconCss.toString()) : (this.trailingIconCss.toString()),\n            enabled: typeof data === 'object' ? (data.enabled !== undefined ? (data.enabled.toString() === 'false' ? false : true) :\n                chipEnabled) : (chipEnabled),\n            value: typeof data === 'object' ? ((data.value ? data.value.toString() : null)) : null,\n            leadingIconUrl: typeof data === 'object' ? (data.leadingIconUrl ? data.leadingIconUrl.toString() : this.leadingIconUrl) :\n                this.leadingIconUrl,\n            trailingIconUrl: typeof data === 'object' ? (data.trailingIconUrl ? data.trailingIconUrl.toString() : this.trailingIconUrl) :\n                this.trailingIconUrl,\n            htmlAttributes: typeof data === 'object' ? (data.htmlAttributes ? data.htmlAttributes : this.htmlAttributes) : this.htmlAttributes,\n            template: typeof data === 'object' ? (data.template ? data.template : null) : null\n        };\n        return fields;\n    };\n    ChipList.prototype.elementCreation = function (fields) {\n        var chipArray = [];\n        if (fields.avatarText || fields.avatarIconCss) {\n            var className = (classNames.avatar + ' ' + fields.avatarIconCss).trim();\n            var chipAvatarElement = this.createElement('span', { className: className });\n            chipAvatarElement.innerText = fields.avatarText;\n            chipArray.push(chipAvatarElement);\n        }\n        else if (fields.leadingIconCss) {\n            var className = (classNames.icon + ' ' + fields.leadingIconCss).trim();\n            var chipIconElement = this.createElement('span', { className: className });\n            chipArray.push(chipIconElement);\n        }\n        else if (fields.leadingIconUrl) {\n            var className = (classNames.avatar + ' ' + 'image-url').trim();\n            var chipIconElement = this.createElement('span', { className: className });\n            chipIconElement.style.backgroundImage = 'url(' + fields.leadingIconUrl + ')';\n            chipArray.push(chipIconElement);\n        }\n        var chipTextElement = this.createElement('span', { className: classNames.text });\n        chipTextElement.innerText = fields.text;\n        chipArray.push(chipTextElement);\n        if (fields.template) {\n            var templateWrapper = this.createElement('div', { className: classNames.template });\n            var templateContent = this.templateParser(fields.template)(fields, this, 'template', this.element.id + '_template', false);\n            append(templateContent, templateWrapper);\n            chipArray.push(templateWrapper);\n            this.renderTemplates();\n        }\n        if (fields.trailingIconCss || (this.chipType() && this.enableDelete)) {\n            var className = (classNames.delete + ' ' +\n                (fields.trailingIconCss ? fields.trailingIconCss : classNames.deleteIcon)).trim();\n            var chipdeleteElement = this.createElement('span', { className: className });\n            chipArray.push(chipdeleteElement);\n        }\n        else if (fields.trailingIconUrl) {\n            var className = ('trailing-icon-url').trim();\n            var chipIconsElement = this.createElement('span', { className: className });\n            chipIconsElement.style.backgroundImage = 'url(' + fields.trailingIconUrl + ')';\n            chipArray.push(chipIconsElement);\n        }\n        return chipArray;\n    };\n    /**\n     * A function that finds chip based on given input.\n     *\n     * {% codeBlock src='chips/find/index.md' %}{% endcodeBlock %}\n     *\n     * @param  {number | HTMLElement } fields - We can pass index number or element of chip.\n     * @returns {void}\n     */\n    ChipList.prototype.find = function (fields) {\n        var chipData = { text: '', index: -1, element: this.element, data: '' };\n        var chipElement = fields instanceof HTMLElement ?\n            fields : this.element.querySelectorAll('.' + classNames.chip)[fields];\n        if (chipElement && this.chipType()) {\n            chipData.index = Array.prototype.slice.call(this.element.querySelectorAll('.' + classNames.chip)).indexOf(chipElement);\n            var chip = this.chips[chipData.index];\n            if (typeof chip === 'object' && chip !== null) {\n                var chipModel = chip;\n                if (chipModel.text !== undefined) {\n                    chipData.text = chipModel.text.toString();\n                }\n            }\n            else if (chip !== undefined) {\n                chipData.text = chip.toString();\n            }\n            chipData.data = chip;\n            chipData.element = chipElement;\n        }\n        return chipData;\n    };\n    /**\n     * Allows adding the chip item(s) by passing a single or array of string, number, or ChipModel values.\n     *\n     * {% codeBlock src='chips/add/index.md' %}{% endcodeBlock %}\n     *\n     * @param  {string[] | number[] | ChipModel[] | string | number | ChipModel} chipsData - We can pass array of string or\n     * array of number or array of chip model or string data or number data or chip model.\n     * @returns {void}\n\n     */\n    ChipList.prototype.add = function (chipsData) {\n        var _a;\n        if (this.type !== 'chip') {\n            var fieldData = chipsData instanceof Array ?\n                chipsData : [chipsData];\n            this.chips = (_a = [].slice.call(this.chips)).concat.apply(_a, fieldData);\n            this.chipCreation(fieldData);\n        }\n    };\n    /**\n     * Allows selecting the chip item(s) by passing a single or array of string, number, or ChipModel values.\n     *\n     * {% codeBlock src='chips/select/index.md' %}{% endcodeBlock %}\n     *\n     * @param  {number | number[] | HTMLElement | HTMLElement[]} fields - We can pass number or array of number\n     *  or chip element or array of chip element.\n     *  @returns {void}\n     */\n    ChipList.prototype.select = function (fields, selectionType) {\n        this.onSelect(fields, false, selectionType);\n    };\n    ChipList.prototype.multiSelection = function (newProp) {\n        var items = this.element.querySelectorAll('.' + classNames.chip);\n        for (var j = 0; j < newProp.length; j++) {\n            if (typeof newProp[j] === 'string') {\n                for (var k = 0; k < items.length; k++) {\n                    if (newProp[j] !== k) {\n                        if (newProp[j] === items[k].attributes[5].value) {\n                            this.multiSelectedChip.push(k);\n                            break;\n                        }\n                    }\n                }\n            }\n            else {\n                this.multiSelectedChip.push(newProp[j]);\n            }\n        }\n    };\n    ChipList.prototype.onSelect = function (fields, callFromProperty, selectionType) {\n        var index;\n        var chipNodes;\n        var chipValue = null;\n        if (this.chipType() && this.selection !== 'None') {\n            if (callFromProperty) {\n                var chipElements = this.element.querySelectorAll('.' + classNames.chip);\n                for (var i = 0; i < chipElements.length; i++) {\n                    chipElements[i].setAttribute('aria-selected', 'false');\n                    chipElements[i].classList.remove(classNames.active);\n                }\n            }\n            var fieldData = fields instanceof Array ? fields : [fields];\n            for (var i = 0; i < fieldData.length; i++) {\n                var chipElement = fieldData[i] instanceof HTMLElement ? fieldData[i]\n                    : this.element.querySelectorAll('.' + classNames.chip)[fieldData[i]];\n                if (selectionType !== 'index') {\n                    for (var j = 0; j < this.chips.length; j++) {\n                        chipNodes = this.element.querySelectorAll('.' + classNames.chip)[j];\n                        var fieldsData = this.getFieldValues(this.chips[j]);\n                        if (selectionType === 'value') {\n                            if (fieldsData.value !== null) {\n                                chipValue = chipNodes.dataset.value;\n                            }\n                        }\n                        else if (selectionType === 'text') {\n                            chipValue = chipNodes.innerText;\n                        }\n                        if (chipValue === fieldData[i].toString()) {\n                            index = j;\n                            chipElement = this.element.querySelectorAll('.' + classNames.chip)[index];\n                        }\n                    }\n                }\n                if (chipElement instanceof HTMLElement) {\n                    this.selectionHandler(chipElement);\n                }\n            }\n        }\n    };\n    /**\n     * Allows removing the chip item(s) by passing a single or array of string, number, or ChipModel values.\n     *\n     * {% codeBlock src='chips/remove/index.md' %}{% endcodeBlock %}\n     *\n     * @param  {number | number[] | HTMLElement | HTMLElement[]} fields - We can pass number or array of number\n     *  or chip element or array of chip element.\n     *  @returns {void}\n     */\n    ChipList.prototype.remove = function (fields) {\n        var _this = this;\n        if (this.chipType()) {\n            var fieldData = fields instanceof Array ? fields : [fields];\n            var chipElements_1 = [];\n            var chipCollection_1 = this.element.querySelectorAll('.' + classNames.chip);\n            fieldData.forEach(function (data) {\n                var chipElement = data instanceof HTMLElement ? data\n                    : chipCollection_1[data];\n                if (chipElement instanceof HTMLElement) {\n                    chipElements_1.push(chipElement);\n                }\n            });\n            chipElements_1.forEach(function (element) {\n                var chips = _this.element.querySelectorAll('.' + classNames.chip);\n                var index = Array.prototype.slice.call(chips).indexOf(element);\n                _this.deleteHandler(element, index);\n            });\n        }\n    };\n    /**\n     * Returns the selected chip(s) data.\n     *\n     * {% codeBlock src='chips/getSelectedChips/index.md' %}{% endcodeBlock %}\n     *\n     *  @returns {void}\n     */\n    ChipList.prototype.getSelectedChips = function () {\n        var selectedChips;\n        if (this.chipType() && this.selection !== 'None') {\n            var selectedItems = { texts: [], Indexes: [], data: [], elements: [] };\n            var items = this.element.querySelectorAll('.' + classNames.active);\n            for (var i = 0; i < items.length; i++) {\n                var chip = items[i];\n                selectedItems.elements.push(chip);\n                var index = Array.prototype.slice.call(this.element.querySelectorAll('.' + classNames.chip)).indexOf(chip);\n                selectedItems.Indexes.push(index);\n                selectedItems.data.push(this.chips[index]);\n                var text = typeof this.chips[index] === 'object' ?\n                    this.chips[index].text ? this.chips[index].text\n                        : null : this.chips[index].toString();\n                selectedItems.texts.push(text);\n            }\n            var selectedItem = {\n                text: selectedItems.texts[0], index: selectedItems.Indexes[0],\n                data: selectedItems.data[0], element: selectedItems.elements[0]\n            };\n            selectedChips = !isNullOrUndefined(selectedItem.index) ?\n                (this.selection === 'Multiple' ? selectedItems : selectedItem) : undefined;\n        }\n        return selectedChips;\n    };\n    ChipList.prototype.wireEvent = function (unWireEvent) {\n        if (!unWireEvent) {\n            EventHandler.add(this.element, 'click', this.clickHandler, this);\n            EventHandler.add(this.element, 'focusout', this.focusOutHandler, this);\n            EventHandler.add(this.element, 'keydown', this.keyHandler, this);\n            EventHandler.add(this.element, 'keyup', this.keyHandler, this);\n        }\n        else {\n            EventHandler.remove(this.element, 'click', this.clickHandler);\n            EventHandler.remove(this.element, 'focusout', this.focusOutHandler);\n            EventHandler.remove(this.element, 'keydown', this.keyHandler);\n            EventHandler.remove(this.element, 'keyup', this.keyHandler);\n        }\n    };\n    ChipList.prototype.keyHandler = function (e) {\n        if (e.target.classList.contains(classNames.chip)) {\n            if (e.type === 'keydown') {\n                if (e.keyCode === 13 || e.keyCode === 32) {\n                    this.clickHandler(e);\n                }\n                else if ((e.keyCode === 46 || e.keyCode === 8) && this.enableDelete) {\n                    this.clickHandler(e, true);\n                }\n            }\n            else if (e.keyCode === 9) {\n                this.focusInHandler(e.target);\n            }\n        }\n    };\n    ChipList.prototype.focusInHandler = function (chipWrapper) {\n        if (!chipWrapper.classList.contains(classNames.focused)) {\n            chipWrapper.classList.add(classNames.focused);\n        }\n    };\n    ChipList.prototype.focusOutHandler = function (e) {\n        var chipWrapper = closest(e.target, '.' + classNames.chip);\n        var focusedElement = !this.chipType() ? (this.element.classList.contains(classNames.focused) ?\n            this.element : null) : this.element.querySelector('.' + classNames.focused);\n        if (chipWrapper && focusedElement) {\n            focusedElement.classList.remove(classNames.focused);\n        }\n    };\n    ChipList.prototype.clickHandler = function (e, del) {\n        var _this = this;\n        if (del === void 0) { del = false; }\n        var chipWrapper = closest(e.target, '.' + classNames.chip);\n        if (chipWrapper) {\n            var chipDataArgs = void 0;\n            if (this.chipType()) {\n                chipDataArgs = this.find(chipWrapper);\n            }\n            else {\n                var index = Array.prototype.slice.call(this.element.querySelectorAll('.' + classNames.chip)).indexOf(chipWrapper);\n                chipDataArgs = {\n                    text: this.innerText ? this.innerText : this.text,\n                    element: chipWrapper, data: this.text, index: index\n                };\n            }\n            chipDataArgs.event = e;\n            chipDataArgs.cancel = false;\n            this.trigger('beforeClick', chipDataArgs, function (observedArgs) {\n                if (!observedArgs.cancel) {\n                    _this.clickEventHandler(observedArgs.element, e, del);\n                }\n            });\n        }\n    };\n    ChipList.prototype.clickEventHandler = function (chipWrapper, e, del) {\n        var _this = this;\n        if (this.chipType()) {\n            var chipData_1 = this.find(chipWrapper);\n            chipData_1.event = e;\n            var deleteElement = e.target.classList.contains(classNames.deleteIcon) ?\n                e.target : (del ? chipWrapper.querySelector('.' + classNames.deleteIcon) : undefined);\n            if (deleteElement && this.enableDelete) {\n                chipData_1.cancel = false;\n                var deletedItemArgs = chipData_1;\n                this.trigger('delete', deletedItemArgs, function (observedArgs) {\n                    if (!observedArgs.cancel) {\n                        _this.deleteHandler(observedArgs.element, observedArgs.index);\n                        _this.selectionHandler(chipWrapper);\n                        chipData_1.selected = observedArgs.element.classList.contains(classNames.active);\n                        var selectedItemArgs = chipData_1;\n                        _this.trigger('click', selectedItemArgs);\n                        var chipElement = _this.element.querySelectorAll('.' + classNames.chip)[observedArgs.index];\n                        if (chipElement) {\n                            chipElement.focus();\n                            _this.focusInHandler(chipElement);\n                        }\n                    }\n                });\n            }\n            else if (this.selection !== 'None') {\n                this.selectionHandler(chipWrapper);\n                chipData_1.selected = chipWrapper.classList.contains(classNames.active);\n                var selectedItemArgs = chipData_1;\n                this.trigger('click', selectedItemArgs);\n            }\n            else {\n                this.focusInHandler(chipWrapper);\n                var clickedItemArgs = chipData_1;\n                this.trigger('click', clickedItemArgs);\n            }\n        }\n        else {\n            this.focusInHandler(chipWrapper);\n            var clickedItemArgs = {\n                text: this.innerText ? this.innerText : this.text,\n                element: chipWrapper, data: this.text, event: e\n            };\n            this.trigger('click', clickedItemArgs);\n        }\n    };\n    ChipList.prototype.selectionHandler = function (chipWrapper) {\n        if (this.selection === 'Single') {\n            var activeElement = this.element.querySelector('.' + classNames.active);\n            if (activeElement && activeElement !== chipWrapper) {\n                activeElement.classList.remove(classNames.active);\n                activeElement.setAttribute('aria-selected', 'false');\n            }\n            this.setProperties({ selectedChips: null }, true);\n        }\n        else {\n            this.setProperties({ selectedChips: [] }, true);\n        }\n        if (chipWrapper.classList.contains(classNames.active)) {\n            chipWrapper.classList.remove(classNames.active);\n            chipWrapper.setAttribute('aria-selected', 'false');\n        }\n        else {\n            chipWrapper.classList.add(classNames.active);\n            chipWrapper.setAttribute('aria-selected', 'true');\n        }\n        this.updateSelectedChips();\n    };\n    ChipList.prototype.updateSelectedChips = function () {\n        var chipListEle = this.element.querySelectorAll('.' + classNames.chip);\n        var chipCollIndex = [];\n        var chipCollValue = [];\n        var chip = null;\n        var value = null;\n        for (var i = 0; i < chipListEle.length; i++) {\n            var selectedEle = this.element.querySelectorAll('.' + classNames.chip)[i];\n            if (selectedEle.getAttribute('aria-selected') === 'true') {\n                value = selectedEle.getAttribute('data-value');\n                if (this.selection === 'Single' && selectedEle.classList.contains('e-active')) {\n                    chip = value ? value : i;\n                    break;\n                }\n                else {\n                    chip = value ? chipCollValue.push(value) : chipCollIndex.push(i);\n                }\n            }\n        }\n        this.setProperties({ selectedChips: this.selection === 'Single' ? chip : value ? chipCollValue : chipCollIndex }, true);\n    };\n    ChipList.prototype.deleteHandler = function (chipWrapper, index) {\n        // Used to store the deleted chip item details.\n        var deletedChipData = this.find(chipWrapper);\n        this.chips.splice(index, 1);\n        this.setProperties({ chips: this.chips }, true);\n        detach(chipWrapper);\n        this.trigger('deleted', deletedChipData);\n    };\n    /**\n     * Removes the component from the DOM and detaches all its related event handlers. Also, it removes the attributes and classes.\n     *\n     * {% codeBlock src='chips/destroy/index.md' %}{% endcodeBlock %}\n     *\n     *  @returns {void}\n     */\n    ChipList.prototype.destroy = function () {\n        for (var i = 0; i < this.dragCollection.length; i++) {\n            this.dragCollection[i].destroy();\n        }\n        this.dragCollection = [];\n        this.clearTemplate();\n        removeClass([this.element], [classNames.chipSet, classNames.chip, classNames.rtl,\n            classNames.multiSelection, classNames.singleSelection, classNames.disabled, classNames.chipWrapper, classNames.iconWrapper,\n            classNames.active, classNames.focused].concat(this.cssClass ? this.cssClass.toString().split(' ').filter(function (css) { return css; }) : []));\n        this.removeMultipleAttributes(['tabindex', 'role', 'aria-label', 'aria-multiselectable'], this.element);\n        this.wireEvent(true);\n        this.rippleFunction();\n        _super.prototype.destroy.call(this);\n        this.element.innerHTML = '';\n        this.element.innerText = this.innerText;\n    };\n    ChipList.prototype.removeMultipleAttributes = function (attributes, element) {\n        attributes.forEach(function (attr) {\n            element.removeAttribute(attr);\n        });\n    };\n    ChipList.prototype.getPersistData = function () {\n        return this.addOnPersist([]);\n    };\n    ChipList.prototype.getModuleName = function () {\n        return 'chip-list';\n    };\n    /**\n     * Called internally if any of the property value changed.\n     *\n     * @returns void\n     * @private\n     */\n    ChipList.prototype.onPropertyChanged = function (newProp, oldProp) {\n        for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n            var prop = _a[_i];\n            switch (prop) {\n                case 'chips':\n                case 'text':\n                case 'avatarText':\n                case 'avatarIconCss':\n                case 'leadingIconCss':\n                case 'trailingIconCss':\n                case 'selection':\n                case 'enableDelete':\n                case 'enabled':\n                    this.refresh();\n                    break;\n                case 'cssClass':\n                    if (!this.chipType()) {\n                        removeClass([this.element], oldProp.cssClass.toString().split(' ').filter(function (css) { return css; }));\n                        addClass([this.element], newProp.cssClass.toString().split(' ').filter(function (css) { return css; }));\n                    }\n                    else {\n                        this.refresh();\n                    }\n                    break;\n                case 'selectedChips':\n                    removeClass(this.element.querySelectorAll('.e-active'), 'e-active');\n                    if (this.selection === 'Multiple') {\n                        this.multiSelectedChip = [];\n                        this.multiSelection(newProp.selectedChips);\n                        this.onSelect(this.multiSelectedChip, true);\n                        this.updateSelectedChips();\n                    }\n                    else {\n                        this.onSelect(newProp.selectedChips, true);\n                    }\n                    break;\n                case 'enableRtl':\n                    this.setRtl();\n                    break;\n                case 'allowDragAndDrop':\n                    for (var i = 0; i < this.dragCollection.length; i++) {\n                        this.dragCollection[i].destroy();\n                    }\n                    this.dragCollection = [];\n                    if (this.allowDragAndDrop) {\n                        this.enableDraggingChips();\n                    }\n                    break;\n                case 'dragArea':\n                    if (this.allowDragAndDrop) {\n                        for (var i = 0; i < this.dragCollection.length; i++) {\n                            this.dragCollection[i].dragArea = this.dragArea;\n                        }\n                    }\n                    break;\n            }\n        }\n    };\n    var ChipList_1;\n    __decorate([\n        Property([])\n    ], ChipList.prototype, \"chips\", void 0);\n    __decorate([\n        Property('')\n    ], ChipList.prototype, \"text\", void 0);\n    __decorate([\n        Property('')\n    ], ChipList.prototype, \"avatarText\", void 0);\n    __decorate([\n        Property('')\n    ], ChipList.prototype, \"avatarIconCss\", void 0);\n    __decorate([\n        Property('')\n    ], ChipList.prototype, \"htmlAttributes\", void 0);\n    __decorate([\n        Property('')\n    ], ChipList.prototype, \"leadingIconCss\", void 0);\n    __decorate([\n        Property('')\n    ], ChipList.prototype, \"trailingIconCss\", void 0);\n    __decorate([\n        Property('')\n    ], ChipList.prototype, \"leadingIconUrl\", void 0);\n    __decorate([\n        Property('')\n    ], ChipList.prototype, \"trailingIconUrl\", void 0);\n    __decorate([\n        Property('')\n    ], ChipList.prototype, \"cssClass\", void 0);\n    __decorate([\n        Property(true)\n    ], ChipList.prototype, \"enabled\", void 0);\n    __decorate([\n        Property([])\n    ], ChipList.prototype, \"selectedChips\", void 0);\n    __decorate([\n        Property('None')\n    ], ChipList.prototype, \"selection\", void 0);\n    __decorate([\n        Property(false)\n    ], ChipList.prototype, \"enableDelete\", void 0);\n    __decorate([\n        Property(false)\n    ], ChipList.prototype, \"allowDragAndDrop\", void 0);\n    __decorate([\n        Property(null)\n    ], ChipList.prototype, \"dragArea\", void 0);\n    __decorate([\n        Event()\n    ], ChipList.prototype, \"created\", void 0);\n    __decorate([\n        Event()\n    ], ChipList.prototype, \"click\", void 0);\n    __decorate([\n        Event()\n    ], ChipList.prototype, \"beforeClick\", void 0);\n    __decorate([\n        Event()\n    ], ChipList.prototype, \"delete\", void 0);\n    __decorate([\n        Event()\n    ], ChipList.prototype, \"deleted\", void 0);\n    __decorate([\n        Event()\n    ], ChipList.prototype, \"dragStart\", void 0);\n    __decorate([\n        Event()\n    ], ChipList.prototype, \"dragging\", void 0);\n    __decorate([\n        Event()\n    ], ChipList.prototype, \"dragStop\", void 0);\n    ChipList = ChipList_1 = __decorate([\n        NotifyPropertyChanges\n    ], ChipList);\n    return ChipList;\n}(Component));\nexport { ChipList };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}