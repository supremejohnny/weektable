{"ast":null,"code":"/* eslint-disable no-inner-declarations */\nimport { extend, merge, isNullOrUndefined, getValue, SanitizeHtmlHelper } from '@syncfusion/ej2-base';\nimport { attributes, prepend, isVisible, append, addClass } from '@syncfusion/ej2-base';\nimport { compile } from '@syncfusion/ej2-base';\nimport { DataManager, Query } from '@syncfusion/ej2-data';\nexport var cssClass = {\n  li: 'e-list-item',\n  ul: 'e-list-parent e-ul',\n  group: 'e-list-group-item',\n  icon: 'e-list-icon',\n  text: 'e-list-text',\n  check: 'e-list-check',\n  checked: 'e-checked',\n  selected: 'e-selected',\n  expanded: 'e-expanded',\n  textContent: 'e-text-content',\n  hasChild: 'e-has-child',\n  level: 'e-level',\n  url: 'e-list-url',\n  collapsible: 'e-icon-collapsible',\n  disabled: 'e-disabled',\n  image: 'e-list-img',\n  iconWrapper: 'e-icon-wrapper',\n  anchorWrap: 'e-anchor-wrap',\n  navigable: 'e-navigable'\n};\n/**\n * Base List Generator\n */\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport var ListBase;\n(function (ListBase) {\n  /**\n   *\n   * Default mapped fields.\n   */\n  ListBase.defaultMappedFields = {\n    id: 'id',\n    text: 'text',\n    url: 'url',\n    value: 'value',\n    isChecked: 'isChecked',\n    enabled: 'enabled',\n    expanded: 'expanded',\n    selected: 'selected',\n    iconCss: 'iconCss',\n    child: 'child',\n    isVisible: 'isVisible',\n    hasChildren: 'hasChildren',\n    tooltip: 'tooltip',\n    htmlAttributes: 'htmlAttributes',\n    urlAttributes: 'urlAttributes',\n    imageAttributes: 'imageAttributes',\n    imageUrl: 'imageUrl',\n    groupBy: null,\n    sortBy: null\n  };\n  var defaultAriaAttributes = {\n    level: 1,\n    listRole: 'presentation',\n    itemRole: 'presentation',\n    groupItemRole: 'group',\n    itemText: 'list-item',\n    wrapperRole: 'presentation'\n  };\n  var defaultListBaseOptions = {\n    showCheckBox: false,\n    showIcon: false,\n    enableHtmlSanitizer: false,\n    expandCollapse: false,\n    fields: ListBase.defaultMappedFields,\n    ariaAttributes: defaultAriaAttributes,\n    listClass: '',\n    itemClass: '',\n    processSubChild: false,\n    sortOrder: 'None',\n    template: null,\n    groupTemplate: null,\n    headerTemplate: null,\n    expandIconClass: 'e-icon-collapsible',\n    moduleName: 'list',\n    expandIconPosition: 'Right',\n    itemNavigable: false\n  };\n  /**\n   * Function helps to created and return the UL Li element based on your data.\n   *\n   * @param  {createElementParams} createElement - Specifies an array of JSON data.\n   *\n   * @param  {{Object}[]} dataSource - Specifies an array of JSON data.\n   *\n   * @param  {ListBaseOptions} [options] - Specifies the list options that need to provide.\n   *\n   * @param  {boolean} [isSingleLevel] - Specifies the list options that need to provide.\n   *\n   * @param  {any} [componentInstance] - Specifies the list options that need to provide.\n   *\n   * @returns  {createElement} createListFromJson - Specifies the list options that need to provide.\n   */\n  function createList(createElement, dataSource, options, isSingleLevel, componentInstance) {\n    var curOpt = extend({}, defaultListBaseOptions, options);\n    var ariaAttributes = extend({}, defaultAriaAttributes, curOpt.ariaAttributes);\n    var type = typeofData(dataSource).typeof;\n    if (type === 'string' || type === 'number') {\n      return createListFromArray(createElement, dataSource, isSingleLevel, options, componentInstance);\n    } else {\n      return createListFromJson(createElement, dataSource, options, ariaAttributes.level, isSingleLevel, componentInstance);\n    }\n  }\n  ListBase.createList = createList;\n  /**\n   * Function helps to created an element list based on string array input .\n   *\n   * @param  {createElementParams} createElement - Specifies an array of JSON data.\n   *\n   * @param  {{Object}[]} dataSource - Specifies an array of JSON data.\n   *\n   * @param  {boolean} [isSingleLevel] - Specifies the list options that need to provide.\n   *\n   * @param  {ListBaseOptions} [options] - Specifies the list options that need to provide.\n   *\n   * @param  {any} [componentInstance] - Specifies the list options that need to provide.\n   *\n   * @returns  {createElement} generateUL - returns the list options that need to provide.\n   */\n  function createListFromArray(createElement, dataSource, isSingleLevel, options, componentInstance) {\n    var subChild = createListItemFromArray(createElement, dataSource, isSingleLevel, options, componentInstance);\n    return generateUL(createElement, subChild, null, options);\n  }\n  ListBase.createListFromArray = createListFromArray;\n  /**\n   * Function helps to created an element list based on string array input .\n   *\n   * @param  {createElementParams} createElement - Specifies an array of JSON data.\n   *\n   * @param  {{Object}[]} dataSource - Specifies an array of JSON data.\n   *\n   * @param  {boolean} [isSingleLevel] - Specifies the list options that need to provide.\n   *\n   * @param  {ListBaseOptions} [options] - Specifies the list options that need to provide.\n   *\n   * @param  {any} [componentInstance] - Specifies the list options that need to provide.\n   *\n   * @returns  {HTMLElement[]} subChild - returns the list options that need to provide.\n   */\n  function createListItemFromArray(createElement, dataSource, isSingleLevel, options, componentInstance) {\n    var subChild = [];\n    var curOpt = extend({}, defaultListBaseOptions, options);\n    cssClass = getModuleClass(curOpt.moduleName);\n    var id = generateId(); // generate id for drop-down-list option.\n    for (var i = 0; i < dataSource.length; i++) {\n      if (isNullOrUndefined(dataSource[i])) {\n        continue;\n      }\n      var li = void 0;\n      if (curOpt.itemCreating && typeof curOpt.itemCreating === 'function') {\n        var curData = {\n          dataSource: dataSource,\n          curData: dataSource[i],\n          text: dataSource[i],\n          options: curOpt\n        };\n        curOpt.itemCreating(curData);\n      }\n      if (isSingleLevel) {\n        li = generateSingleLevelLI(createElement, dataSource[i], undefined, null, null, [], null, id, i, options);\n      } else {\n        li = generateLI(createElement, dataSource[i], undefined, null, null, options, componentInstance);\n      }\n      if (curOpt.itemCreated && typeof curOpt.itemCreated === 'function') {\n        var curData = {\n          dataSource: dataSource,\n          curData: dataSource[i],\n          text: dataSource[i],\n          item: li,\n          options: curOpt\n        };\n        curOpt.itemCreated(curData);\n      }\n      subChild.push(li);\n    }\n    return subChild;\n  }\n  ListBase.createListItemFromArray = createListItemFromArray;\n  /**\n   * Function helps to created an element list based on array of JSON input .\n   *\n   * @param  {createElementParams} createElement - Specifies an array of JSON data.\n   *\n   * @param  {{Object}[]} dataSource - Specifies an array of JSON data.\n   *\n   * @param  {ListBaseOptions} [options] - Specifies the list options that need to provide.\n   *\n   * @param  {number} [level] - Specifies the list options that need to provide.\n   *\n   * @param  {boolean} [isSingleLevel] - Specifies the list options that need to provide.\n   *\n   * @param  {any} [componentInstance] - Specifies the list options that need to provide.\n   *\n   * @returns  {HTMLElement[]} child - returns the list options that need to provide.\n   */\n  function createListItemFromJson(createElement, dataSource, options, level, isSingleLevel, componentInstance) {\n    var curOpt = extend({}, defaultListBaseOptions, options);\n    cssClass = getModuleClass(curOpt.moduleName);\n    var fields = componentInstance && (componentInstance.getModuleName() === 'listview' || componentInstance.getModuleName() === 'multiselect') ? curOpt.fields : extend({}, ListBase.defaultMappedFields, curOpt.fields);\n    var ariaAttributes = extend({}, defaultAriaAttributes, curOpt.ariaAttributes);\n    var id;\n    var checkboxElement = [];\n    if (level) {\n      ariaAttributes.level = level;\n    }\n    var child = [];\n    var li;\n    var anchorElement;\n    if (dataSource && dataSource.length && !isNullOrUndefined(typeofData(dataSource).item) && !Object.prototype.hasOwnProperty.call(typeofData(dataSource).item, fields.id)) {\n      id = generateId(); // generate id for drop-down-list option.\n    }\n    for (var i = 0; i < dataSource.length; i++) {\n      var fieldData = getFieldValues(dataSource[i], fields);\n      if (isNullOrUndefined(dataSource[i])) {\n        continue;\n      }\n      if (curOpt.itemCreating && typeof curOpt.itemCreating === 'function') {\n        var curData = {\n          dataSource: dataSource,\n          curData: dataSource[i],\n          text: fieldData[fields.text],\n          options: curOpt,\n          fields: fields\n        };\n        curOpt.itemCreating(curData);\n      }\n      var curItem = dataSource[i];\n      if (curOpt.itemCreating && typeof curOpt.itemCreating === 'function') {\n        fieldData = getFieldValues(dataSource[i], fields);\n      }\n      if (Object.prototype.hasOwnProperty.call(fieldData, fields.id) && !isNullOrUndefined(fieldData[fields.id])) {\n        id = fieldData[fields.id];\n      }\n      var innerEle = [];\n      if (curOpt.showCheckBox) {\n        if (curOpt.itemNavigable && (fieldData[fields.url] || fieldData[fields.urlAttributes])) {\n          checkboxElement.push(createElement('input', {\n            className: cssClass.check,\n            attrs: {\n              type: 'checkbox'\n            }\n          }));\n        } else {\n          innerEle.push(createElement('input', {\n            className: cssClass.check,\n            attrs: {\n              type: 'checkbox'\n            }\n          }));\n        }\n      }\n      if (isSingleLevel === true) {\n        if (curOpt.showIcon && Object.prototype.hasOwnProperty.call(fieldData, fields.iconCss) && !isNullOrUndefined(fieldData[fields.iconCss])) {\n          innerEle.push(createElement('span', {\n            className: cssClass.icon + ' ' + fieldData[fields.iconCss]\n          }));\n        }\n        li = generateSingleLevelLI(createElement, curItem, fieldData, fields, curOpt.itemClass, innerEle, Object.prototype.hasOwnProperty.call(curItem, 'isHeader') && curItem.isHeader ? true : false, id, i, options);\n        anchorElement = li.querySelector('.' + cssClass.anchorWrap);\n        if (Object.prototype.hasOwnProperty.call(fieldData, fields.tooltip)) {\n          var tooltipText = fieldData[fields.tooltip];\n          if (options && options.enableHtmlSanitizer) {\n            tooltipText = SanitizeHtmlHelper.sanitize(tooltipText);\n          } else {\n            var tooltipTextElement = createElement('span', {\n              innerHTML: tooltipText\n            });\n            tooltipText = tooltipTextElement.innerText;\n            tooltipTextElement = null;\n          }\n          li.setAttribute('title', tooltipText);\n        }\n        if (curOpt.itemNavigable && checkboxElement.length) {\n          prepend(checkboxElement, li.firstElementChild);\n        }\n      } else {\n        li = generateLI(createElement, curItem, fieldData, fields, curOpt.itemClass, options, componentInstance);\n        li.classList.add(cssClass.level + '-' + ariaAttributes.level);\n        li.setAttribute('aria-level', ariaAttributes.level.toString());\n        if (ariaAttributes.groupItemRole === 'presentation' || ariaAttributes.itemRole === 'presentation') {\n          li.removeAttribute('aria-level');\n        }\n        anchorElement = li.querySelector('.' + cssClass.anchorWrap);\n        if (Object.prototype.hasOwnProperty.call(fieldData, fields.tooltip)) {\n          var tooltipText = fieldData[fields.tooltip];\n          if (options && options.enableHtmlSanitizer) {\n            tooltipText = SanitizeHtmlHelper.sanitize(tooltipText);\n          } else {\n            var tooltipTextElement = createElement('span', {\n              innerHTML: tooltipText\n            });\n            tooltipText = tooltipTextElement.innerText;\n            tooltipTextElement = null;\n          }\n          li.setAttribute('title', tooltipText);\n        }\n        if (Object.prototype.hasOwnProperty.call(fieldData, fields.htmlAttributes) && fieldData[fields.htmlAttributes]) {\n          var htmlAttributes = fieldData[fields.htmlAttributes];\n          // Check if 'class' attribute is present and not an empty string\n          if ('class' in htmlAttributes && typeof htmlAttributes['class'] === 'string' && htmlAttributes['class'].trim() === '') {\n            delete htmlAttributes['class'];\n          }\n          setAttribute(li, htmlAttributes);\n        }\n        if (Object.prototype.hasOwnProperty.call(fieldData, fields.enabled) && fieldData[fields.enabled] === false) {\n          li.classList.add(cssClass.disabled);\n        }\n        if (Object.prototype.hasOwnProperty.call(fieldData, fields.isVisible) && fieldData[fields.isVisible] === false) {\n          li.style.display = 'none';\n        }\n        if (Object.prototype.hasOwnProperty.call(fieldData, fields.imageUrl) && !isNullOrUndefined(fieldData[fields.imageUrl]) && !curOpt.template) {\n          var attr = {\n            src: fieldData[fields.imageUrl],\n            alt: !isNullOrUndefined(fieldData.name) ? 'Displaying ' + fieldData.name + ' Image' : 'Displaying Image'\n          };\n          merge(attr, fieldData[fields.imageAttributes]);\n          var imageElemnt = createElement('img', {\n            className: cssClass.image,\n            attrs: attr\n          });\n          if (anchorElement) {\n            anchorElement.insertAdjacentElement('afterbegin', imageElemnt);\n          } else {\n            prepend([imageElemnt], li.firstElementChild);\n          }\n        }\n        if (curOpt.showIcon && Object.prototype.hasOwnProperty.call(fieldData, fields.iconCss) && !isNullOrUndefined(fieldData[fields.iconCss]) && !curOpt.template) {\n          var iconElement = createElement('div', {\n            className: cssClass.icon + ' ' + fieldData[fields.iconCss]\n          });\n          if (anchorElement) {\n            anchorElement.insertAdjacentElement('afterbegin', iconElement);\n          } else {\n            prepend([iconElement], li.firstElementChild);\n          }\n        }\n        if (innerEle.length) {\n          prepend(innerEle, li.firstElementChild);\n        }\n        if (curOpt.itemNavigable && checkboxElement.length) {\n          prepend(checkboxElement, li.firstElementChild);\n        }\n        processSubChild(createElement, fieldData, fields, dataSource, curOpt, li, ariaAttributes.level);\n      }\n      if (anchorElement) {\n        addClass([li], [cssClass.navigable]);\n      }\n      if (curOpt.itemCreated && typeof curOpt.itemCreated === 'function') {\n        var curData = {\n          dataSource: dataSource,\n          curData: dataSource[i],\n          text: fieldData[fields.text],\n          item: li,\n          options: curOpt,\n          fields: fields\n        };\n        curOpt.itemCreated(curData);\n      }\n      checkboxElement = [];\n      child.push(li);\n    }\n    return child;\n  }\n  ListBase.createListItemFromJson = createListItemFromJson;\n  /**\n   * Function helps to created an element list based on array of JSON input .\n   *\n   * @param  {createElementParams} createElement - Specifies an array of JSON data.\n   *\n   * @param  {{Object}[]} dataSource - Specifies an array of JSON data.\n   *\n   * @param  {ListBaseOptions} [options] - Specifies the list options that need to provide.\n   *\n   * @param  {number} [level] - Specifies the list options that need to provide.\n   *\n   * @param  {boolean} [isSingleLevel] - Specifies the list options that need to provide.\n   *\n   * @param  {any} [componentInstance] - Specifies the list options that need to provide.\n   *\n   * @returns  {createElement} generateUL - Specifies the list options that need to provide.\n   */\n  function createListFromJson(createElement, dataSource, options, level, isSingleLevel, componentInstance) {\n    var curOpt = extend({}, defaultListBaseOptions, options);\n    var li = createListItemFromJson(createElement, dataSource, options, level, isSingleLevel, componentInstance);\n    return generateUL(createElement, li, curOpt.listClass, options);\n  }\n  ListBase.createListFromJson = createListFromJson;\n  /**\n   * Return the next or previous visible element.\n   *\n   * @param  {Element[]|NodeList} elementArray - An element array to find next or previous element.\n   * @param  {Element} element - An element to find next or previous after this element.\n   * @param  {boolean} [isPrevious] - Specify when the need get previous element from array.\n   * @returns {Element|undefined} The next or previous visible element, or undefined if the element array is empty.\n   */\n  function getSiblingLI(elementArray, element, isPrevious) {\n    cssClass = getModuleClass(defaultListBaseOptions.moduleName);\n    if (!elementArray || !elementArray.length) {\n      return void 0;\n    }\n    var siblingLI;\n    var liIndex;\n    var liCollections = Array.prototype.slice.call(elementArray);\n    if (element) {\n      liIndex = indexOf(element, liCollections);\n    } else {\n      liIndex = isPrevious === true ? liCollections.length : -1;\n    }\n    siblingLI = liCollections[liIndex + (isPrevious === true ? -1 : 1)];\n    while (siblingLI && (!isVisible(siblingLI) || siblingLI.classList.contains(cssClass.disabled))) {\n      liIndex = liIndex + (isPrevious === true ? -1 : 1);\n      siblingLI = liCollections[liIndex];\n    }\n    return siblingLI;\n  }\n  ListBase.getSiblingLI = getSiblingLI;\n  /**\n   * Return the index of the li element\n   *\n   * @param  {Element} item - An element to find next or previous after this element.\n   * @param  {Element[]} elementArray - An element array to find index of given li.\n   * @returns {number} - The index of the item in the element array, or undefined if either parameter is false.\n   */\n  function indexOf(item, elementArray) {\n    if (!elementArray || !item) {\n      return void 0;\n    } else {\n      var liCollections = elementArray;\n      liCollections = Array.prototype.slice.call(elementArray);\n      return liCollections.indexOf(item);\n    }\n  }\n  ListBase.indexOf = indexOf;\n  /**\n   * Returns the grouped data from given dataSource.\n   *\n   * @param  {{Object}[]} dataSource - The JSON data which is necessary to process.\n   * @param  {FieldsMapping} fields - Fields that are mapped from the data source.\n   * @param  {SortOrder} [sortOrder='None'] - Specifies final result sort order. Defaults to 'None'.\n   * @returns {Object[]} - The grouped data.\n   */\n  function groupDataSource(dataSource, fields, sortOrder) {\n    if (sortOrder === void 0) {\n      sortOrder = 'None';\n    }\n    var curFields = extend({}, ListBase.defaultMappedFields, fields);\n    var cusQuery = new Query().group(curFields.groupBy);\n    // need to remove once sorting issues fixed in DataManager\n    cusQuery = addSorting(sortOrder, 'key', cusQuery);\n    var ds = getDataSource(dataSource, cusQuery);\n    dataSource = [];\n    for (var j = 0; j < ds.length; j++) {\n      var itemObj = ds[j].items;\n      var grpItem = {};\n      var hdr = 'isHeader';\n      grpItem[curFields.text] = ds[j].key;\n      grpItem[\"\" + hdr] = true;\n      var newtext = curFields.text;\n      if (newtext === 'id') {\n        newtext = 'text';\n        grpItem[\"\" + newtext] = ds[j].key;\n      }\n      grpItem._id = 'group-list-item-' + (ds[j].key ? ds[j].key.toString().trim() : 'undefined');\n      grpItem.items = itemObj;\n      dataSource.push(grpItem);\n      for (var k = 0; k < itemObj.length; k++) {\n        dataSource.push(itemObj[k]);\n      }\n    }\n    return dataSource;\n  }\n  ListBase.groupDataSource = groupDataSource;\n  /**\n   * Returns a sorted query object.\n   *\n   * @param  {SortOrder} sortOrder - Specifies that sort order.\n   * @param  {string} sortBy - Specifies sortBy fields.\n   * @param  {Query} query - Pass if any existing query.\n   * @returns {Query} - The updated query object with sorting applied.\n   */\n  function addSorting(sortOrder, sortBy, query) {\n    if (query === void 0) {\n      query = new Query();\n    }\n    if (sortOrder === 'Ascending') {\n      query.sortBy(sortBy, 'ascending', true);\n    } else if (sortOrder === 'Descending') {\n      query.sortBy(sortBy, 'descending', true);\n    } else {\n      for (var i = 0; i < query.queries.length; i++) {\n        if (query.queries[i].fn === 'onSortBy') {\n          query.queries.splice(i, 1);\n        }\n      }\n    }\n    return query;\n  }\n  ListBase.addSorting = addSorting;\n  /**\n   * Return an array of JSON Data that processed based on queries.\n   *\n   * @param  {{Object}[]} dataSource - Specifies local JSON data source.\n   *\n   * @param  {Query} query - Specifies query that need to process.\n   *\n   * @returns {Object[]} - An array of objects representing the retrieved data.\n   */\n  function getDataSource(dataSource, query) {\n    return new DataManager(dataSource).executeLocal(query);\n  }\n  ListBase.getDataSource = getDataSource;\n  /**\n   * Created JSON data based the UL and LI element\n   *\n   * @param  {HTMLElement|Element} element - UL element that need to convert as a JSON\n   * @param  {ListBaseOptions} [options] - Specifies ListBase option for fields.\n   * @returns {Object[]} - An array of objects representing the JSON data.\n   */\n  function createJsonFromElement(element, options) {\n    var curOpt = extend({}, defaultListBaseOptions, options);\n    var fields = extend({}, ListBase.defaultMappedFields, curOpt.fields);\n    var curEle = element.cloneNode(true);\n    var jsonAr = [];\n    curEle.classList.add('json-parent');\n    var childs = curEle.querySelectorAll('.json-parent>li');\n    curEle.classList.remove('json-parent');\n    for (var i = 0; i < childs.length; i++) {\n      var li = childs[i];\n      var anchor = li.querySelector('a');\n      var ul = li.querySelector('ul');\n      var json = {};\n      var childNodes = anchor ? anchor.childNodes : li.childNodes;\n      var keys = Object.keys(childNodes);\n      for (var i_1 = 0; i_1 < childNodes.length; i_1++) {\n        if (!childNodes[Number(keys[i_1])].hasChildNodes()) {\n          json[fields.text] = childNodes[Number(keys[i_1])].textContent;\n        }\n      }\n      var attributes_1 = getAllAttributes(li);\n      if (attributes_1.id) {\n        json[fields.id] = attributes_1.id;\n        delete attributes_1.id;\n      } else {\n        json[fields.id] = generateId();\n      }\n      if (Object.keys(attributes_1).length) {\n        json[fields.htmlAttributes] = attributes_1;\n      }\n      if (anchor) {\n        attributes_1 = getAllAttributes(anchor);\n        if (Object.keys(attributes_1).length) {\n          json[fields.urlAttributes] = attributes_1;\n        }\n      }\n      if (ul) {\n        json[fields.child] = createJsonFromElement(ul, options);\n      }\n      jsonAr.push(json);\n    }\n    return jsonAr;\n  }\n  ListBase.createJsonFromElement = createJsonFromElement;\n  /**\n   * Determines the type of data in an array of objects, strings, or numbers.\n   *\n   * @param {Object[] | string[] | number[]} data - The array containing objects, strings, or numbers.\n   * @returns {{typeof: (string | null), item: (Object | string | number)}} - An object containing the type of data and the corresponding item.\n   */\n  function typeofData(data) {\n    var match = {\n      typeof: null,\n      item: null\n    };\n    for (var i = 0; i < data.length; i++) {\n      if (!isNullOrUndefined(data[i])) {\n        return match = {\n          typeof: typeof data[i],\n          item: data[i]\n        };\n      }\n    }\n    return match;\n  }\n  /**\n   * Sets attributes on an HTML element.\n   *\n   * @param {HTMLElement} element - The HTML element to set attributes on.\n   * @param {Object.<string, string>} elementAttributes - An object containing attribute names and their corresponding values.\n   * @returns {void}\n   */\n  function setAttribute(element, elementAttributes) {\n    var attr = {};\n    merge(attr, elementAttributes);\n    if (attr.class) {\n      addClass([element], attr.class.split(' '));\n      delete attr.class;\n    }\n    attributes(element, attr);\n  }\n  /**\n   * Retrieves all attributes of an HTML element.\n   *\n   * @param {HTMLElement} element - The HTML element to retrieve attributes from.\n   * @returns {Object.<string, string>} - An object containing attribute names as keys and their corresponding values as values.\n   */\n  function getAllAttributes(element) {\n    var attributes = {};\n    var attr = element.attributes;\n    for (var index = 0; index < attr.length; index++) {\n      attributes[attr[index].nodeName] = attr[index].nodeValue;\n    }\n    return attributes;\n  }\n  /**\n   * Created UL element from content template.\n   *\n   * @param  {createElementParams} createElement - Specifies an array of JSON data.\n   * @param  {string} template - that need to convert and generate li element.\n   * @param  {{Object}[]} dataSource - Specifies local JSON data source.\n   * @param  {FieldsMapping} [fields] - Specifies fields for mapping the dataSource.\n   * @param  {ListBaseOptions} [options] - Specifies ListBase option for fields.\n   * @param  {any} [componentInstance] - Specifies component instance.\n   * @returns {HTMLElement} - The generated LI element.\n   */\n  function renderContentTemplate(createElement, template, dataSource, fields, options, componentInstance) {\n    cssClass = getModuleClass(defaultListBaseOptions.moduleName);\n    var ulElement = createElement('ul', {\n      className: cssClass.ul,\n      attrs: {\n        role: 'presentation'\n      }\n    });\n    var curOpt = extend({}, defaultListBaseOptions, options);\n    var curFields = extend({}, ListBase.defaultMappedFields, fields);\n    var compiledString = compileTemplate(template);\n    var liCollection = [];\n    var value;\n    var id = generateId(); // generate id for drop-down-list option.\n    for (var i = 0; i < dataSource.length; i++) {\n      var fieldData = getFieldValues(dataSource[i], curFields);\n      var curItem = dataSource[i];\n      var isHeader = curItem.isHeader;\n      if (typeof dataSource[i] === 'string' || typeof dataSource[i] === 'number') {\n        value = curItem;\n      } else {\n        value = fieldData[curFields.value];\n      }\n      if (curOpt.itemCreating && typeof curOpt.itemCreating === 'function') {\n        var curData = {\n          dataSource: dataSource,\n          curData: curItem,\n          text: value,\n          options: curOpt,\n          fields: curFields\n        };\n        curOpt.itemCreating(curData);\n      }\n      if (curOpt.itemCreating && typeof curOpt.itemCreating === 'function') {\n        fieldData = getFieldValues(dataSource[i], curFields);\n        if (typeof dataSource[i] === 'string' || typeof dataSource[i] === 'number') {\n          value = curItem;\n        } else {\n          value = fieldData[curFields.value];\n        }\n      }\n      var li = createElement('li', {\n        id: id + '-' + i,\n        className: isHeader ? cssClass.group : cssClass.li,\n        attrs: {\n          role: 'presentation'\n        }\n      });\n      if (isHeader) {\n        if (typeof dataSource[i] === 'string' || typeof dataSource[i] === 'number') {\n          li.innerText = curItem;\n        } else {\n          li.innerText = fieldData[curFields.text];\n        }\n      } else {\n        var currentID = isHeader ? curOpt.groupTemplateID : curOpt.templateID;\n        if (isHeader) {\n          if (componentInstance && componentInstance.getModuleName() !== 'listview') {\n            var compiledElement = compiledString(curItem, componentInstance, 'headerTemplate', currentID, !!curOpt.isStringTemplate, null, li);\n            if (compiledElement) {\n              append(compiledElement, li);\n            }\n          } else {\n            append(compiledString(curItem, componentInstance, 'headerTemplate', currentID, !!curOpt.isStringTemplate), li);\n          }\n        } else {\n          if (componentInstance && componentInstance.getModuleName() !== 'listview') {\n            var compiledElement = compiledString(curItem, componentInstance, 'template', currentID, !!curOpt.isStringTemplate, null, li);\n            if (compiledElement) {\n              append(compiledElement, li);\n            }\n          } else {\n            append(compiledString(curItem, componentInstance, 'template', currentID, !!curOpt.isStringTemplate), li);\n          }\n        }\n        li.setAttribute('data-value', isNullOrUndefined(value) ? 'null' : value);\n        li.setAttribute('role', 'option');\n      }\n      if (curOpt.itemCreated && typeof curOpt.itemCreated === 'function') {\n        var curData = {\n          dataSource: dataSource,\n          curData: curItem,\n          text: value,\n          item: li,\n          options: curOpt,\n          fields: curFields\n        };\n        curOpt.itemCreated(curData);\n      }\n      liCollection.push(li);\n    }\n    append(liCollection, ulElement);\n    return ulElement;\n  }\n  ListBase.renderContentTemplate = renderContentTemplate;\n  /**\n   * Created header items from group template.\n   *\n   * @param  {string | Function} groupTemplate - that need to convert and generate li element.\n   *\n   * @param {{Object}[]} groupDataSource - Specifies local JSON data source.\n   *\n   * @param  {FieldsMapping} fields - Specifies fields for mapping the dataSource.\n   *\n   * @param  {Element[]} headerItems - Specifies ListBase header items.\n   *\n   * @param {ListBaseOptions} [options] - Optional ListBase options.\n   *\n   * @param {*} [componentInstance] - Optional component instance.\n   *\n   * @returns {Element[]} - An array of header elements with the rendered group template content.\n   */\n  function renderGroupTemplate(groupTemplate,\n  // tslint:disable-next-line\n  groupDataSource, fields, headerItems, options, componentInstance) {\n    var compiledString = compileTemplate(groupTemplate);\n    var curFields = extend({}, ListBase.defaultMappedFields, fields);\n    var curOpt = extend({}, defaultListBaseOptions, options);\n    var category = curFields.groupBy;\n    for (var _i = 0, headerItems_1 = headerItems; _i < headerItems_1.length; _i++) {\n      var header = headerItems_1[_i];\n      var headerData = {};\n      headerData[\"\" + category] = header.textContent;\n      header.innerHTML = '';\n      if (componentInstance && componentInstance.getModuleName() !== 'listview') {\n        var compiledElement = compiledString(headerData, componentInstance, 'groupTemplate', curOpt.groupTemplateID, !!curOpt.isStringTemplate, null, header);\n        if (compiledElement) {\n          append(compiledElement, header);\n        }\n      } else {\n        append(compiledString(headerData, componentInstance, 'groupTemplate', curOpt.groupTemplateID, !!curOpt.isStringTemplate), header);\n      }\n    }\n    return headerItems;\n  }\n  ListBase.renderGroupTemplate = renderGroupTemplate;\n  /**\n   * Generates a random hexadecimal ID string.\n   *\n   * @returns {string} - The generated ID string.\n   */\n  function generateId() {\n    return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n  }\n  ListBase.generateId = generateId;\n  /**\n   * Processes the sub-child elements and creates corresponding elements based on the provided field data and options.\n   *\n   * @param {Function} createElement - Function for creating elements.\n   * @param {Object} fieldData - Field data containing sub-child information.\n   * @param {FieldsMapping} fields - Field mappings.\n   * @param {Object[]} ds - The data source array containing sub-child elements.\n   * @param {ListBaseOptions} options - ListBase options.\n   * @param {HTMLElement} element - The parent HTML element to append sub-child elements to.\n   * @param {number} level - The level of the sub-child elements.\n   * @returns {void}\n   */\n  function processSubChild(createElement, fieldData, fields, ds, options, element, level) {\n    // Get SubList\n    var subDS = fieldData[fields.child] || [];\n    var hasChildren = fieldData[fields.hasChildren];\n    //Create Sub child\n    if (subDS.length) {\n      hasChildren = true;\n      element.classList.add(cssClass.hasChild);\n      if (options.processSubChild) {\n        var subLi = createListFromJson(createElement, subDS, options, ++level);\n        element.appendChild(subLi);\n      }\n    }\n    // Create expand and collapse node\n    if (!!options.expandCollapse && hasChildren && !options.template) {\n      element.firstElementChild.classList.add(cssClass.iconWrapper);\n      var expandElement = options.expandIconPosition === 'Left' ? prepend : append;\n      expandElement([createElement('div', {\n        className: 'e-icons ' + options.expandIconClass\n      })], element.querySelector('.' + cssClass.textContent));\n    }\n  }\n  /**\n   * Generates a single-level LI (list item) element based on the provided item and field data.\n   *\n   * @param {Function} createElement - Function for creating elements.\n   * @param {string | Object | number} item - The item data.\n   * @param {Object} fieldData - Field data mapped from the item.\n   * @param {FieldsMapping} [fields] - Field mappings.\n   * @param {string} [className] - Optional class name to add to the created LI element.\n   * @param {HTMLElement[]} [innerElements] - Optional array of inner elements to append to the LI element.\n   * @param {boolean} [grpLI] - Indicates if the LI element is a group item.\n   * @param {string} [id] - The ID of the LI element.\n   * @param {number} [index] - The index of the LI element.\n   * @param {ListBaseOptions} [options] - Optional ListBase options.\n   * @returns {HTMLElement} - The generated LI element.\n   */\n  function generateSingleLevelLI(createElement, item, fieldData, fields, className, innerElements, grpLI, id, index, options) {\n    var curOpt = extend({}, defaultListBaseOptions, options);\n    var ariaAttributes = extend({}, defaultAriaAttributes, curOpt.ariaAttributes);\n    var text = item;\n    var value = item;\n    var dataSource;\n    if (typeof item !== 'string' && typeof item !== 'number' && typeof item !== 'boolean') {\n      dataSource = item;\n      text = typeof fieldData[fields.text] === 'boolean' || typeof fieldData[fields.text] === 'number' ? fieldData[fields.text] : fieldData[fields.text] || '';\n      value = fieldData[fields.value];\n    }\n    var elementID;\n    if (!isNullOrUndefined(dataSource) && !isNullOrUndefined(fieldData[fields.id]) && fieldData[fields.id] !== '') {\n      elementID = id;\n    } else {\n      elementID = id + '-' + index;\n    }\n    var li = createElement('li', {\n      className: (grpLI === true ? cssClass.group : cssClass.li) + ' ' + (isNullOrUndefined(className) ? '' : className),\n      id: elementID,\n      attrs: ariaAttributes.groupItemRole !== '' && ariaAttributes.itemRole !== '' ? {\n        role: grpLI === true ? ariaAttributes.groupItemRole : ariaAttributes.itemRole\n      } : {}\n    });\n    if (dataSource && Object.prototype.hasOwnProperty.call(fieldData, fields.enabled) && fieldData[fields.enabled].toString() === 'false') {\n      li.classList.add(cssClass.disabled);\n    }\n    if (options && options.enableHtmlSanitizer) {\n      text = SanitizeHtmlHelper.sanitize(text);\n    }\n    if (grpLI) {\n      li.innerText = text;\n    } else {\n      li.setAttribute('data-value', isNullOrUndefined(value) ? 'null' : value);\n      li.setAttribute('role', 'option');\n      if (dataSource && Object.prototype.hasOwnProperty.call(fieldData, fields.htmlAttributes) && fieldData[fields.htmlAttributes]) {\n        setAttribute(li, fieldData[fields.htmlAttributes]);\n      }\n      if (innerElements.length && !curOpt.itemNavigable) {\n        append(innerElements, li);\n      }\n      if (dataSource && (fieldData[fields.url] || fieldData[fields.urlAttributes] && fieldData[fields.urlAttributes].href)) {\n        li.appendChild(anchorTag(createElement, dataSource, fields, text, innerElements, curOpt.itemNavigable));\n      } else {\n        if (innerElements.length && curOpt.itemNavigable) {\n          append(innerElements, li);\n        }\n        li.appendChild(document.createTextNode(text));\n      }\n    }\n    return li;\n  }\n  /**\n   * Returns a set of CSS class names based on the provided module name.\n   *\n   * @param {string} moduleName - The name of the module.\n   * @returns {ClassList} - The CSS class names associated with the module.\n   */\n  function getModuleClass(moduleName) {\n    var moduleClass;\n    // eslint-disable-next-line\n    return moduleClass = {\n      li: \"e-\" + moduleName + \"-item\",\n      ul: \"e-\" + moduleName + \"-parent e-ul\",\n      group: \"e-\" + moduleName + \"-group-item\",\n      icon: \"e-\" + moduleName + \"-icon\",\n      text: \"e-\" + moduleName + \"-text\",\n      check: \"e-\" + moduleName + \"-check\",\n      checked: 'e-checked',\n      selected: 'e-selected',\n      expanded: 'e-expanded',\n      textContent: 'e-text-content',\n      hasChild: 'e-has-child',\n      level: 'e-level',\n      url: \"e-\" + moduleName + \"-url\",\n      collapsible: 'e-icon-collapsible',\n      disabled: 'e-disabled',\n      image: \"e-\" + moduleName + \"-img\",\n      iconWrapper: 'e-icon-wrapper',\n      anchorWrap: 'e-anchor-wrap',\n      navigable: 'e-navigable'\n    };\n  }\n  /**\n   * Creates an anchor tag (<a>) element based on the provided data source, fields, and text.\n   *\n   * @param {Function} createElement - Function for creating elements.\n   * @param {object} dataSource - The data source containing URL-related fields.\n   * @param {FieldsMapping} fields - Field mappings for the data source.\n   * @param {string} text - The text content of the anchor tag.\n   * @param {HTMLElement[]} innerElements - Optional array of inner elements to append to the anchor tag.\n   * @param {boolean} isFullNavigation - Indicates whether the anchor tag should be for full navigation.\n   * @returns {HTMLElement} The created anchor tag element.\n   */\n  function anchorTag(createElement, dataSource, fields, text, innerElements, isFullNavigation) {\n    var fieldData = getFieldValues(dataSource, fields);\n    var attr = {\n      href: fieldData[fields.url]\n    };\n    if (Object.prototype.hasOwnProperty.call(fieldData, fields.urlAttributes) && fieldData[fields.urlAttributes]) {\n      merge(attr, fieldData[fields.urlAttributes]);\n      attr.href = fieldData[fields.url] ? fieldData[fields.url] : fieldData[fields.urlAttributes].href;\n    }\n    var anchorTag;\n    if (!isFullNavigation) {\n      anchorTag = createElement('a', {\n        className: cssClass.text + ' ' + cssClass.url,\n        innerHTML: text\n      });\n    } else {\n      anchorTag = createElement('a', {\n        className: cssClass.text + ' ' + cssClass.url\n      });\n      var anchorWrapper = createElement('div', {\n        className: cssClass.anchorWrap\n      });\n      if (innerElements && innerElements.length) {\n        append(innerElements, anchorWrapper);\n      }\n      anchorWrapper.appendChild(document.createTextNode(text));\n      append([anchorWrapper], anchorTag);\n    }\n    setAttribute(anchorTag, attr);\n    return anchorTag;\n  }\n  /**\n   * Generates an LI element based on the provided item and field data.\n   *\n   * @param {Function} createElement - Function for creating elements.\n   * @param {string | Object | number} item - The item data.\n   * @param {Object} fieldData - Field data mapped from the item.\n   * @param {FieldsMapping} fields - Field mappings.\n   * @param {string} [className] - Optional class name to add to the created LI element.\n   * @param {ListBaseOptions} [options] - Optional ListBase options.\n   * @param {*} [componentInstance] - Optional component instance.\n   * @returns {HTMLElement} - The generated LI element.\n   */\n  function generateLI(createElement, item, fieldData, fields, className, options, componentInstance) {\n    var curOpt = extend({}, defaultListBaseOptions, options);\n    var ariaAttributes = extend({}, defaultAriaAttributes, curOpt.ariaAttributes);\n    var text = item;\n    var uID;\n    var grpLI;\n    var dataSource;\n    if (typeof item !== 'string' && typeof item !== 'number') {\n      dataSource = item;\n      text = fieldData[fields.text] || '';\n      uID = isNullOrUndefined(fieldData['_id']) ? fieldData[fields.id] : fieldData['_id'];\n      grpLI = Object.prototype.hasOwnProperty.call(item, 'isHeader') && item.isHeader ? true : false;\n    }\n    if (options && options.enableHtmlSanitizer) {\n      text = SanitizeHtmlHelper.sanitize(text);\n    }\n    var li = createElement('li', {\n      className: (grpLI === true ? cssClass.group : cssClass.li) + ' ' + (isNullOrUndefined(className) ? '' : className),\n      attrs: ariaAttributes.groupItemRole !== '' && ariaAttributes.itemRole !== '' ? {\n        role: grpLI === true ? ariaAttributes.groupItemRole : ariaAttributes.itemRole\n      } : {}\n    });\n    if (!isNullOrUndefined(uID) === true) {\n      li.setAttribute('data-uid', uID);\n    } else {\n      li.setAttribute('data-uid', generateId());\n    }\n    if (grpLI && options && options.groupTemplate) {\n      var compiledString = compileTemplate(options.groupTemplate);\n      if (componentInstance && componentInstance.getModuleName() !== 'listview') {\n        var compiledElement = compiledString(item, componentInstance, 'groupTemplate', curOpt.groupTemplateID, !!curOpt.isStringTemplate, null, li);\n        if (compiledElement) {\n          append(compiledElement, li);\n        }\n      } else {\n        append(compiledString(item, componentInstance, 'groupTemplate', curOpt.groupTemplateID, !!curOpt.isStringTemplate), li);\n      }\n    } else if (!grpLI && options && options.template) {\n      var compiledString = compileTemplate(options.template);\n      if (componentInstance && componentInstance.getModuleName() !== 'listview') {\n        var compiledElement = compiledString(item, componentInstance, 'template', curOpt.templateID, !!curOpt.isStringTemplate, null, li);\n        if (compiledElement) {\n          append(compiledElement, li);\n        }\n      } else {\n        append(compiledString(item, componentInstance, 'template', curOpt.templateID, !!curOpt.isStringTemplate), li);\n      }\n    } else {\n      var innerDiv = createElement('div', {\n        className: cssClass.textContent,\n        attrs: ariaAttributes.wrapperRole !== '' ? {\n          role: ariaAttributes.wrapperRole\n        } : {}\n      });\n      if (dataSource && (fieldData[fields.url] || fieldData[fields.urlAttributes] && fieldData[fields.urlAttributes].href)) {\n        innerDiv.appendChild(anchorTag(createElement, dataSource, fields, text, null, curOpt.itemNavigable));\n      } else {\n        var element = createElement('span', {\n          className: cssClass.text,\n          attrs: ariaAttributes.itemText !== '' ? {\n            role: ariaAttributes.itemText\n          } : {}\n        });\n        if (options && options.enableHtmlSanitizer) {\n          element.innerText = text;\n        } else {\n          element.innerHTML = text;\n        }\n        innerDiv.appendChild(element);\n      }\n      li.appendChild(innerDiv);\n    }\n    return li;\n  }\n  /**\n   * Returns UL element based on the given LI element.\n   *\n   * @param {Function} createElement - Function for creating elements.\n   *\n   * @param  {HTMLElement[]} liElement - Specifies array of LI element.\n   *\n   * @param  {string} [className] - Specifies class name that need to be added in UL element.\n   *\n   * @param  {ListBaseOptions} [options] - Specifies ListBase options.\n   *\n   * @returns {HTMLElement} - The created UL element.\n   */\n  function generateUL(createElement, liElement, className, options) {\n    var curOpt = extend({}, defaultListBaseOptions, options);\n    var ariaAttributes = extend({}, defaultAriaAttributes, curOpt.ariaAttributes);\n    cssClass = getModuleClass(curOpt.moduleName);\n    var ulElement = createElement('ul', {\n      className: cssClass.ul + ' ' + (isNullOrUndefined(className) ? '' : className),\n      attrs: ariaAttributes.listRole !== '' ? {\n        role: ariaAttributes.listRole\n      } : {}\n    });\n    append(liElement, ulElement);\n    return ulElement;\n  }\n  ListBase.generateUL = generateUL;\n  /**\n   * Returns LI element with additional DIV tag based on the given LI element.\n   *\n   * @param {Function} createElement - Function for creating elements.\n   *\n   * @param  {liElement} liElement - Specifies LI element.\n   *\n   * @param  {string} [className] - Specifies class name that need to be added in created DIV element.\n   *\n   * @param  {ListBaseOptions} [options] - Specifies ListBase options.\n   *\n   * @returns {HTMLElement} - The modified LI element.\n   */\n  function generateIcon(createElement, liElement, className, options) {\n    var curOpt = extend({}, defaultListBaseOptions, options);\n    cssClass = getModuleClass(curOpt.moduleName);\n    var expandElement = curOpt.expandIconPosition === 'Left' ? prepend : append;\n    expandElement([createElement('div', {\n      className: 'e-icons ' + curOpt.expandIconClass + ' ' + (isNullOrUndefined(className) ? '' : className)\n    })], liElement.querySelector('.' + cssClass.textContent));\n    return liElement;\n  }\n  ListBase.generateIcon = generateIcon;\n})(ListBase || (ListBase = {}));\n/**\n * Used to get dataSource item from complex data using fields.\n *\n * @param {Object} dataItem - Specifies an  JSON or String data.\n *\n * @param {FieldsMapping} fields - Fields that are mapped from the dataSource.\n * @returns {Object|string|number} - The retrieved field values.\n */\nexport function getFieldValues(dataItem, fields) {\n  var fieldData = {};\n  if (isNullOrUndefined(dataItem) || typeof dataItem === 'string' || typeof dataItem === 'number' || !isNullOrUndefined(dataItem.isHeader)) {\n    return dataItem;\n  } else {\n    for (var _i = 0, _a = Object.keys(fields); _i < _a.length; _i++) {\n      var field = _a[_i];\n      var dataField = fields[\"\" + field];\n      var value = !isNullOrUndefined(dataField) && typeof dataField === 'string' ? getValue(dataField, dataItem) : undefined;\n      if (!isNullOrUndefined(value)) {\n        fieldData[\"\" + dataField] = value;\n      }\n    }\n  }\n  return fieldData;\n}\n/**\n * Compiles a template string or function into a compiled function.\n *\n * @param {string | Function} template - The template string or function to compile.\n * @returns {Function | undefined} - The compiled function, or undefined if the input is false.\n */\nfunction compileTemplate(template) {\n  if (template) {\n    try {\n      if (typeof template !== 'function' && document.querySelector(template)) {\n        return compile(document.querySelector(template).innerHTML.trim());\n      } else {\n        return compile(template);\n      }\n    } catch (e) {\n      return compile(template);\n    }\n  }\n  return undefined;\n}","map":{"version":3,"names":["extend","merge","isNullOrUndefined","getValue","SanitizeHtmlHelper","attributes","prepend","isVisible","append","addClass","compile","DataManager","Query","cssClass","li","ul","group","icon","text","check","checked","selected","expanded","textContent","hasChild","level","url","collapsible","disabled","image","iconWrapper","anchorWrap","navigable","ListBase","defaultMappedFields","id","value","isChecked","enabled","iconCss","child","hasChildren","tooltip","htmlAttributes","urlAttributes","imageAttributes","imageUrl","groupBy","sortBy","defaultAriaAttributes","listRole","itemRole","groupItemRole","itemText","wrapperRole","defaultListBaseOptions","showCheckBox","showIcon","enableHtmlSanitizer","expandCollapse","fields","ariaAttributes","listClass","itemClass","processSubChild","sortOrder","template","groupTemplate","headerTemplate","expandIconClass","moduleName","expandIconPosition","itemNavigable","createList","createElement","dataSource","options","isSingleLevel","componentInstance","curOpt","type","typeofData","typeof","createListFromArray","createListFromJson","subChild","createListItemFromArray","generateUL","getModuleClass","generateId","i","length","itemCreating","curData","generateSingleLevelLI","undefined","generateLI","itemCreated","item","push","createListItemFromJson","getModuleName","checkboxElement","anchorElement","Object","prototype","hasOwnProperty","call","fieldData","getFieldValues","curItem","innerEle","className","attrs","isHeader","querySelector","tooltipText","sanitize","tooltipTextElement","innerHTML","innerText","setAttribute","firstElementChild","classList","add","toString","removeAttribute","trim","style","display","attr","src","alt","name","imageElemnt","insertAdjacentElement","iconElement","getSiblingLI","elementArray","element","isPrevious","siblingLI","liIndex","liCollections","Array","slice","indexOf","contains","groupDataSource","curFields","cusQuery","addSorting","ds","getDataSource","j","itemObj","items","grpItem","hdr","key","newtext","_id","k","query","queries","fn","splice","executeLocal","createJsonFromElement","curEle","cloneNode","jsonAr","childs","querySelectorAll","remove","anchor","json","childNodes","keys","i_1","Number","hasChildNodes","attributes_1","getAllAttributes","data","match","elementAttributes","class","split","index","nodeName","nodeValue","renderContentTemplate","ulElement","role","compiledString","compileTemplate","liCollection","currentID","groupTemplateID","templateID","compiledElement","isStringTemplate","renderGroupTemplate","headerItems","category","_i","headerItems_1","header","headerData","Math","floor","random","substring","subDS","subLi","appendChild","expandElement","innerElements","grpLI","elementID","href","anchorTag","document","createTextNode","moduleClass","isFullNavigation","anchorWrapper","uID","innerDiv","liElement","generateIcon","dataItem","_a","field","dataField","e"],"sources":["D:/weektable/frontend/node_modules/@syncfusion/ej2-lists/src/common/list-base.js"],"sourcesContent":["/* eslint-disable no-inner-declarations */\nimport { extend, merge, isNullOrUndefined, getValue, SanitizeHtmlHelper } from '@syncfusion/ej2-base';\nimport { attributes, prepend, isVisible, append, addClass } from '@syncfusion/ej2-base';\nimport { compile } from '@syncfusion/ej2-base';\nimport { DataManager, Query } from '@syncfusion/ej2-data';\nexport var cssClass = {\n    li: 'e-list-item',\n    ul: 'e-list-parent e-ul',\n    group: 'e-list-group-item',\n    icon: 'e-list-icon',\n    text: 'e-list-text',\n    check: 'e-list-check',\n    checked: 'e-checked',\n    selected: 'e-selected',\n    expanded: 'e-expanded',\n    textContent: 'e-text-content',\n    hasChild: 'e-has-child',\n    level: 'e-level',\n    url: 'e-list-url',\n    collapsible: 'e-icon-collapsible',\n    disabled: 'e-disabled',\n    image: 'e-list-img',\n    iconWrapper: 'e-icon-wrapper',\n    anchorWrap: 'e-anchor-wrap',\n    navigable: 'e-navigable'\n};\n/**\n * Base List Generator\n */\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport var ListBase;\n(function (ListBase) {\n    /**\n     *\n     * Default mapped fields.\n     */\n    ListBase.defaultMappedFields = {\n        id: 'id',\n        text: 'text',\n        url: 'url',\n        value: 'value',\n        isChecked: 'isChecked',\n        enabled: 'enabled',\n        expanded: 'expanded',\n        selected: 'selected',\n        iconCss: 'iconCss',\n        child: 'child',\n        isVisible: 'isVisible',\n        hasChildren: 'hasChildren',\n        tooltip: 'tooltip',\n        htmlAttributes: 'htmlAttributes',\n        urlAttributes: 'urlAttributes',\n        imageAttributes: 'imageAttributes',\n        imageUrl: 'imageUrl',\n        groupBy: null,\n        sortBy: null\n    };\n    var defaultAriaAttributes = {\n        level: 1,\n        listRole: 'presentation',\n        itemRole: 'presentation',\n        groupItemRole: 'group',\n        itemText: 'list-item',\n        wrapperRole: 'presentation'\n    };\n    var defaultListBaseOptions = {\n        showCheckBox: false,\n        showIcon: false,\n        enableHtmlSanitizer: false,\n        expandCollapse: false,\n        fields: ListBase.defaultMappedFields,\n        ariaAttributes: defaultAriaAttributes,\n        listClass: '',\n        itemClass: '',\n        processSubChild: false,\n        sortOrder: 'None',\n        template: null,\n        groupTemplate: null,\n        headerTemplate: null,\n        expandIconClass: 'e-icon-collapsible',\n        moduleName: 'list',\n        expandIconPosition: 'Right',\n        itemNavigable: false\n    };\n    /**\n     * Function helps to created and return the UL Li element based on your data.\n     *\n     * @param  {createElementParams} createElement - Specifies an array of JSON data.\n     *\n     * @param  {{Object}[]} dataSource - Specifies an array of JSON data.\n     *\n     * @param  {ListBaseOptions} [options] - Specifies the list options that need to provide.\n     *\n     * @param  {boolean} [isSingleLevel] - Specifies the list options that need to provide.\n     *\n     * @param  {any} [componentInstance] - Specifies the list options that need to provide.\n     *\n     * @returns  {createElement} createListFromJson - Specifies the list options that need to provide.\n     */\n    function createList(createElement, dataSource, options, isSingleLevel, componentInstance) {\n        var curOpt = extend({}, defaultListBaseOptions, options);\n        var ariaAttributes = extend({}, defaultAriaAttributes, curOpt.ariaAttributes);\n        var type = typeofData(dataSource).typeof;\n        if (type === 'string' || type === 'number') {\n            return createListFromArray(createElement, dataSource, isSingleLevel, options, componentInstance);\n        }\n        else {\n            return createListFromJson(createElement, dataSource, options, ariaAttributes.level, isSingleLevel, componentInstance);\n        }\n    }\n    ListBase.createList = createList;\n    /**\n     * Function helps to created an element list based on string array input .\n     *\n     * @param  {createElementParams} createElement - Specifies an array of JSON data.\n     *\n     * @param  {{Object}[]} dataSource - Specifies an array of JSON data.\n     *\n     * @param  {boolean} [isSingleLevel] - Specifies the list options that need to provide.\n     *\n     * @param  {ListBaseOptions} [options] - Specifies the list options that need to provide.\n     *\n     * @param  {any} [componentInstance] - Specifies the list options that need to provide.\n     *\n     * @returns  {createElement} generateUL - returns the list options that need to provide.\n     */\n    function createListFromArray(createElement, dataSource, isSingleLevel, options, componentInstance) {\n        var subChild = createListItemFromArray(createElement, dataSource, isSingleLevel, options, componentInstance);\n        return generateUL(createElement, subChild, null, options);\n    }\n    ListBase.createListFromArray = createListFromArray;\n    /**\n     * Function helps to created an element list based on string array input .\n     *\n     * @param  {createElementParams} createElement - Specifies an array of JSON data.\n     *\n     * @param  {{Object}[]} dataSource - Specifies an array of JSON data.\n     *\n     * @param  {boolean} [isSingleLevel] - Specifies the list options that need to provide.\n     *\n     * @param  {ListBaseOptions} [options] - Specifies the list options that need to provide.\n     *\n     * @param  {any} [componentInstance] - Specifies the list options that need to provide.\n     *\n     * @returns  {HTMLElement[]} subChild - returns the list options that need to provide.\n     */\n    function createListItemFromArray(createElement, dataSource, isSingleLevel, options, componentInstance) {\n        var subChild = [];\n        var curOpt = extend({}, defaultListBaseOptions, options);\n        cssClass = getModuleClass(curOpt.moduleName);\n        var id = generateId(); // generate id for drop-down-list option.\n        for (var i = 0; i < dataSource.length; i++) {\n            if (isNullOrUndefined(dataSource[i])) {\n                continue;\n            }\n            var li = void 0;\n            if (curOpt.itemCreating && typeof curOpt.itemCreating === 'function') {\n                var curData = {\n                    dataSource: dataSource,\n                    curData: dataSource[i],\n                    text: dataSource[i],\n                    options: curOpt\n                };\n                curOpt.itemCreating(curData);\n            }\n            if (isSingleLevel) {\n                li = generateSingleLevelLI(createElement, dataSource[i], undefined, null, null, [], null, id, i, options);\n            }\n            else {\n                li = generateLI(createElement, dataSource[i], undefined, null, null, options, componentInstance);\n            }\n            if (curOpt.itemCreated && typeof curOpt.itemCreated === 'function') {\n                var curData = {\n                    dataSource: dataSource,\n                    curData: dataSource[i],\n                    text: dataSource[i],\n                    item: li,\n                    options: curOpt\n                };\n                curOpt.itemCreated(curData);\n            }\n            subChild.push(li);\n        }\n        return subChild;\n    }\n    ListBase.createListItemFromArray = createListItemFromArray;\n    /**\n     * Function helps to created an element list based on array of JSON input .\n     *\n     * @param  {createElementParams} createElement - Specifies an array of JSON data.\n     *\n     * @param  {{Object}[]} dataSource - Specifies an array of JSON data.\n     *\n     * @param  {ListBaseOptions} [options] - Specifies the list options that need to provide.\n     *\n     * @param  {number} [level] - Specifies the list options that need to provide.\n     *\n     * @param  {boolean} [isSingleLevel] - Specifies the list options that need to provide.\n     *\n     * @param  {any} [componentInstance] - Specifies the list options that need to provide.\n     *\n     * @returns  {HTMLElement[]} child - returns the list options that need to provide.\n     */\n    function createListItemFromJson(createElement, dataSource, options, level, isSingleLevel, componentInstance) {\n        var curOpt = extend({}, defaultListBaseOptions, options);\n        cssClass = getModuleClass(curOpt.moduleName);\n        var fields = (componentInstance &&\n            (componentInstance.getModuleName() === 'listview' || componentInstance.getModuleName() === 'multiselect'))\n            ? curOpt.fields : extend({}, ListBase.defaultMappedFields, curOpt.fields);\n        var ariaAttributes = extend({}, defaultAriaAttributes, curOpt.ariaAttributes);\n        var id;\n        var checkboxElement = [];\n        if (level) {\n            ariaAttributes.level = level;\n        }\n        var child = [];\n        var li;\n        var anchorElement;\n        if (dataSource && dataSource.length && !isNullOrUndefined(typeofData(dataSource).item) &&\n            !Object.prototype.hasOwnProperty.call(typeofData(dataSource).item, fields.id)) {\n            id = generateId(); // generate id for drop-down-list option.\n        }\n        for (var i = 0; i < dataSource.length; i++) {\n            var fieldData = getFieldValues(dataSource[i], fields);\n            if (isNullOrUndefined(dataSource[i])) {\n                continue;\n            }\n            if (curOpt.itemCreating && typeof curOpt.itemCreating === 'function') {\n                var curData = {\n                    dataSource: dataSource,\n                    curData: dataSource[i],\n                    text: fieldData[fields.text],\n                    options: curOpt,\n                    fields: fields\n                };\n                curOpt.itemCreating(curData);\n            }\n            var curItem = dataSource[i];\n            if (curOpt.itemCreating && typeof curOpt.itemCreating === 'function') {\n                fieldData = getFieldValues(dataSource[i], fields);\n            }\n            if (Object.prototype.hasOwnProperty.call(fieldData, fields.id) && !isNullOrUndefined(fieldData[fields.id])) {\n                id = fieldData[fields.id];\n            }\n            var innerEle = [];\n            if (curOpt.showCheckBox) {\n                if (curOpt.itemNavigable && (fieldData[fields.url] || fieldData[fields.urlAttributes])) {\n                    checkboxElement.push(createElement('input', { className: cssClass.check, attrs: { type: 'checkbox' } }));\n                }\n                else {\n                    innerEle.push(createElement('input', { className: cssClass.check, attrs: { type: 'checkbox' } }));\n                }\n            }\n            if (isSingleLevel === true) {\n                if (curOpt.showIcon && Object.prototype.hasOwnProperty.call(fieldData, fields.iconCss)\n                    && !isNullOrUndefined(fieldData[fields.iconCss])) {\n                    innerEle.push(createElement('span', { className: cssClass.icon + ' ' + fieldData[fields.iconCss] }));\n                }\n                li = generateSingleLevelLI(createElement, curItem, fieldData, fields, curOpt.itemClass, innerEle, (Object.prototype.hasOwnProperty.call(curItem, 'isHeader') &&\n                    curItem.isHeader) ? true : false, id, i, options);\n                anchorElement = li.querySelector('.' + cssClass.anchorWrap);\n                if (Object.prototype.hasOwnProperty.call(fieldData, fields.tooltip)) {\n                    var tooltipText = fieldData[fields.tooltip];\n                    if (options && options.enableHtmlSanitizer) {\n                        tooltipText = SanitizeHtmlHelper.sanitize(tooltipText);\n                    }\n                    else {\n                        var tooltipTextElement = createElement('span', { innerHTML: tooltipText });\n                        tooltipText = tooltipTextElement.innerText;\n                        tooltipTextElement = null;\n                    }\n                    li.setAttribute('title', tooltipText);\n                }\n                if (curOpt.itemNavigable && checkboxElement.length) {\n                    prepend(checkboxElement, li.firstElementChild);\n                }\n            }\n            else {\n                li = generateLI(createElement, curItem, fieldData, fields, curOpt.itemClass, options, componentInstance);\n                li.classList.add(cssClass.level + '-' + ariaAttributes.level);\n                li.setAttribute('aria-level', ariaAttributes.level.toString());\n                if (ariaAttributes.groupItemRole === 'presentation' || ariaAttributes.itemRole === 'presentation') {\n                    li.removeAttribute('aria-level');\n                }\n                anchorElement = li.querySelector('.' + cssClass.anchorWrap);\n                if (Object.prototype.hasOwnProperty.call(fieldData, fields.tooltip)) {\n                    var tooltipText = fieldData[fields.tooltip];\n                    if (options && options.enableHtmlSanitizer) {\n                        tooltipText = SanitizeHtmlHelper.sanitize(tooltipText);\n                    }\n                    else {\n                        var tooltipTextElement = createElement('span', { innerHTML: tooltipText });\n                        tooltipText = tooltipTextElement.innerText;\n                        tooltipTextElement = null;\n                    }\n                    li.setAttribute('title', tooltipText);\n                }\n                if (Object.prototype.hasOwnProperty.call(fieldData, fields.htmlAttributes) && fieldData[fields.htmlAttributes]) {\n                    var htmlAttributes = fieldData[fields.htmlAttributes];\n                    // Check if 'class' attribute is present and not an empty string\n                    if ('class' in htmlAttributes && typeof htmlAttributes['class'] === 'string' && htmlAttributes['class'].trim() === '') {\n                        delete htmlAttributes['class'];\n                    }\n                    setAttribute(li, htmlAttributes);\n                }\n                if (Object.prototype.hasOwnProperty.call(fieldData, fields.enabled) && fieldData[fields.enabled] === false) {\n                    li.classList.add(cssClass.disabled);\n                }\n                if (Object.prototype.hasOwnProperty.call(fieldData, fields.isVisible) && fieldData[fields.isVisible] === false) {\n                    li.style.display = 'none';\n                }\n                if (Object.prototype.hasOwnProperty.call(fieldData, fields.imageUrl) && !isNullOrUndefined(fieldData[fields.imageUrl])\n                    && !curOpt.template) {\n                    var attr = { src: fieldData[fields.imageUrl], alt: !isNullOrUndefined(fieldData.name) ? ('Displaying ' + fieldData.name + ' Image') : 'Displaying Image' };\n                    merge(attr, fieldData[fields.imageAttributes]);\n                    var imageElemnt = createElement('img', { className: cssClass.image, attrs: attr });\n                    if (anchorElement) {\n                        anchorElement.insertAdjacentElement('afterbegin', imageElemnt);\n                    }\n                    else {\n                        prepend([imageElemnt], li.firstElementChild);\n                    }\n                }\n                if (curOpt.showIcon && Object.prototype.hasOwnProperty.call(fieldData, fields.iconCss) &&\n                    !isNullOrUndefined(fieldData[fields.iconCss]) && !curOpt.template) {\n                    var iconElement = createElement('div', { className: cssClass.icon + ' ' + fieldData[fields.iconCss] });\n                    if (anchorElement) {\n                        anchorElement.insertAdjacentElement('afterbegin', iconElement);\n                    }\n                    else {\n                        prepend([iconElement], li.firstElementChild);\n                    }\n                }\n                if (innerEle.length) {\n                    prepend(innerEle, li.firstElementChild);\n                }\n                if (curOpt.itemNavigable && checkboxElement.length) {\n                    prepend(checkboxElement, li.firstElementChild);\n                }\n                processSubChild(createElement, fieldData, fields, dataSource, curOpt, li, ariaAttributes.level);\n            }\n            if (anchorElement) {\n                addClass([li], [cssClass.navigable]);\n            }\n            if (curOpt.itemCreated && typeof curOpt.itemCreated === 'function') {\n                var curData = {\n                    dataSource: dataSource,\n                    curData: dataSource[i],\n                    text: fieldData[fields.text],\n                    item: li,\n                    options: curOpt,\n                    fields: fields\n                };\n                curOpt.itemCreated(curData);\n            }\n            checkboxElement = [];\n            child.push(li);\n        }\n        return child;\n    }\n    ListBase.createListItemFromJson = createListItemFromJson;\n    /**\n     * Function helps to created an element list based on array of JSON input .\n     *\n     * @param  {createElementParams} createElement - Specifies an array of JSON data.\n     *\n     * @param  {{Object}[]} dataSource - Specifies an array of JSON data.\n     *\n     * @param  {ListBaseOptions} [options] - Specifies the list options that need to provide.\n     *\n     * @param  {number} [level] - Specifies the list options that need to provide.\n     *\n     * @param  {boolean} [isSingleLevel] - Specifies the list options that need to provide.\n     *\n     * @param  {any} [componentInstance] - Specifies the list options that need to provide.\n     *\n     * @returns  {createElement} generateUL - Specifies the list options that need to provide.\n     */\n    function createListFromJson(createElement, dataSource, options, level, isSingleLevel, componentInstance) {\n        var curOpt = extend({}, defaultListBaseOptions, options);\n        var li = createListItemFromJson(createElement, dataSource, options, level, isSingleLevel, componentInstance);\n        return generateUL(createElement, li, curOpt.listClass, options);\n    }\n    ListBase.createListFromJson = createListFromJson;\n    /**\n     * Return the next or previous visible element.\n     *\n     * @param  {Element[]|NodeList} elementArray - An element array to find next or previous element.\n     * @param  {Element} element - An element to find next or previous after this element.\n     * @param  {boolean} [isPrevious] - Specify when the need get previous element from array.\n     * @returns {Element|undefined} The next or previous visible element, or undefined if the element array is empty.\n     */\n    function getSiblingLI(elementArray, element, isPrevious) {\n        cssClass = getModuleClass(defaultListBaseOptions.moduleName);\n        if (!elementArray || !elementArray.length) {\n            return void 0;\n        }\n        var siblingLI;\n        var liIndex;\n        var liCollections = Array.prototype.slice.call(elementArray);\n        if (element) {\n            liIndex = indexOf(element, liCollections);\n        }\n        else {\n            liIndex = (isPrevious === true ? liCollections.length : -1);\n        }\n        siblingLI = liCollections[liIndex + (isPrevious === true ? -1 : 1)];\n        while (siblingLI && (!isVisible(siblingLI) || siblingLI.classList.contains(cssClass.disabled))) {\n            liIndex = liIndex + (isPrevious === true ? -1 : 1);\n            siblingLI = liCollections[liIndex];\n        }\n        return siblingLI;\n    }\n    ListBase.getSiblingLI = getSiblingLI;\n    /**\n     * Return the index of the li element\n     *\n     * @param  {Element} item - An element to find next or previous after this element.\n     * @param  {Element[]} elementArray - An element array to find index of given li.\n     * @returns {number} - The index of the item in the element array, or undefined if either parameter is false.\n     */\n    function indexOf(item, elementArray) {\n        if (!elementArray || !item) {\n            return void 0;\n        }\n        else {\n            var liCollections = elementArray;\n            liCollections = Array.prototype.slice.call(elementArray);\n            return liCollections.indexOf(item);\n        }\n    }\n    ListBase.indexOf = indexOf;\n    /**\n     * Returns the grouped data from given dataSource.\n     *\n     * @param  {{Object}[]} dataSource - The JSON data which is necessary to process.\n     * @param  {FieldsMapping} fields - Fields that are mapped from the data source.\n     * @param  {SortOrder} [sortOrder='None'] - Specifies final result sort order. Defaults to 'None'.\n     * @returns {Object[]} - The grouped data.\n     */\n    function groupDataSource(dataSource, fields, sortOrder) {\n        if (sortOrder === void 0) { sortOrder = 'None'; }\n        var curFields = extend({}, ListBase.defaultMappedFields, fields);\n        var cusQuery = new Query().group(curFields.groupBy);\n        // need to remove once sorting issues fixed in DataManager\n        cusQuery = addSorting(sortOrder, 'key', cusQuery);\n        var ds = getDataSource(dataSource, cusQuery);\n        dataSource = [];\n        for (var j = 0; j < ds.length; j++) {\n            var itemObj = ds[j].items;\n            var grpItem = {};\n            var hdr = 'isHeader';\n            grpItem[curFields.text] = ds[j].key;\n            grpItem[\"\" + hdr] = true;\n            var newtext = curFields.text;\n            if (newtext === 'id') {\n                newtext = 'text';\n                grpItem[\"\" + newtext] = ds[j].key;\n            }\n            grpItem._id = 'group-list-item-' + (ds[j].key ?\n                ds[j].key.toString().trim() : 'undefined');\n            grpItem.items = itemObj;\n            dataSource.push(grpItem);\n            for (var k = 0; k < itemObj.length; k++) {\n                dataSource.push(itemObj[k]);\n            }\n        }\n        return dataSource;\n    }\n    ListBase.groupDataSource = groupDataSource;\n    /**\n     * Returns a sorted query object.\n     *\n     * @param  {SortOrder} sortOrder - Specifies that sort order.\n     * @param  {string} sortBy - Specifies sortBy fields.\n     * @param  {Query} query - Pass if any existing query.\n     * @returns {Query} - The updated query object with sorting applied.\n     */\n    function addSorting(sortOrder, sortBy, query) {\n        if (query === void 0) { query = new Query(); }\n        if (sortOrder === 'Ascending') {\n            query.sortBy(sortBy, 'ascending', true);\n        }\n        else if (sortOrder === 'Descending') {\n            query.sortBy(sortBy, 'descending', true);\n        }\n        else {\n            for (var i = 0; i < query.queries.length; i++) {\n                if (query.queries[i].fn === 'onSortBy') {\n                    query.queries.splice(i, 1);\n                }\n            }\n        }\n        return query;\n    }\n    ListBase.addSorting = addSorting;\n    /**\n     * Return an array of JSON Data that processed based on queries.\n     *\n     * @param  {{Object}[]} dataSource - Specifies local JSON data source.\n     *\n     * @param  {Query} query - Specifies query that need to process.\n     *\n     * @returns {Object[]} - An array of objects representing the retrieved data.\n     */\n    function getDataSource(dataSource, query) {\n        return new DataManager(dataSource)\n            .executeLocal(query);\n    }\n    ListBase.getDataSource = getDataSource;\n    /**\n     * Created JSON data based the UL and LI element\n     *\n     * @param  {HTMLElement|Element} element - UL element that need to convert as a JSON\n     * @param  {ListBaseOptions} [options] - Specifies ListBase option for fields.\n     * @returns {Object[]} - An array of objects representing the JSON data.\n     */\n    function createJsonFromElement(element, options) {\n        var curOpt = extend({}, defaultListBaseOptions, options);\n        var fields = extend({}, ListBase.defaultMappedFields, curOpt.fields);\n        var curEle = element.cloneNode(true);\n        var jsonAr = [];\n        curEle.classList.add('json-parent');\n        var childs = curEle.querySelectorAll('.json-parent>li');\n        curEle.classList.remove('json-parent');\n        for (var i = 0; i < childs.length; i++) {\n            var li = childs[i];\n            var anchor = li.querySelector('a');\n            var ul = li.querySelector('ul');\n            var json = {};\n            var childNodes = anchor ? anchor.childNodes : li.childNodes;\n            var keys = Object.keys(childNodes);\n            for (var i_1 = 0; i_1 < childNodes.length; i_1++) {\n                if (!(childNodes[Number(keys[i_1])]).hasChildNodes()) {\n                    json[fields.text] = childNodes[Number(keys[i_1])].textContent;\n                }\n            }\n            var attributes_1 = getAllAttributes(li);\n            if (attributes_1.id) {\n                json[fields.id] = attributes_1.id;\n                delete attributes_1.id;\n            }\n            else {\n                json[fields.id] = generateId();\n            }\n            if (Object.keys(attributes_1).length) {\n                json[fields.htmlAttributes] = attributes_1;\n            }\n            if (anchor) {\n                attributes_1 = getAllAttributes(anchor);\n                if (Object.keys(attributes_1).length) {\n                    json[fields.urlAttributes] = attributes_1;\n                }\n            }\n            if (ul) {\n                json[fields.child] = createJsonFromElement(ul, options);\n            }\n            jsonAr.push(json);\n        }\n        return jsonAr;\n    }\n    ListBase.createJsonFromElement = createJsonFromElement;\n    /**\n     * Determines the type of data in an array of objects, strings, or numbers.\n     *\n     * @param {Object[] | string[] | number[]} data - The array containing objects, strings, or numbers.\n     * @returns {{typeof: (string | null), item: (Object | string | number)}} - An object containing the type of data and the corresponding item.\n     */\n    function typeofData(data) {\n        var match = { typeof: null, item: null };\n        for (var i = 0; i < data.length; i++) {\n            if (!isNullOrUndefined(data[i])) {\n                return match = { typeof: typeof data[i], item: data[i] };\n            }\n        }\n        return match;\n    }\n    /**\n     * Sets attributes on an HTML element.\n     *\n     * @param {HTMLElement} element - The HTML element to set attributes on.\n     * @param {Object.<string, string>} elementAttributes - An object containing attribute names and their corresponding values.\n     * @returns {void}\n     */\n    function setAttribute(element, elementAttributes) {\n        var attr = {};\n        merge(attr, elementAttributes);\n        if (attr.class) {\n            addClass([element], attr.class.split(' '));\n            delete attr.class;\n        }\n        attributes(element, attr);\n    }\n    /**\n     * Retrieves all attributes of an HTML element.\n     *\n     * @param {HTMLElement} element - The HTML element to retrieve attributes from.\n     * @returns {Object.<string, string>} - An object containing attribute names as keys and their corresponding values as values.\n     */\n    function getAllAttributes(element) {\n        var attributes = {};\n        var attr = element.attributes;\n        for (var index = 0; index < attr.length; index++) {\n            attributes[attr[index].nodeName] = attr[index].nodeValue;\n        }\n        return attributes;\n    }\n    /**\n     * Created UL element from content template.\n     *\n     * @param  {createElementParams} createElement - Specifies an array of JSON data.\n     * @param  {string} template - that need to convert and generate li element.\n     * @param  {{Object}[]} dataSource - Specifies local JSON data source.\n     * @param  {FieldsMapping} [fields] - Specifies fields for mapping the dataSource.\n     * @param  {ListBaseOptions} [options] - Specifies ListBase option for fields.\n     * @param  {any} [componentInstance] - Specifies component instance.\n     * @returns {HTMLElement} - The generated LI element.\n     */\n    function renderContentTemplate(createElement, template, dataSource, fields, options, componentInstance) {\n        cssClass = getModuleClass(defaultListBaseOptions.moduleName);\n        var ulElement = createElement('ul', { className: cssClass.ul, attrs: { role: 'presentation' } });\n        var curOpt = extend({}, defaultListBaseOptions, options);\n        var curFields = extend({}, ListBase.defaultMappedFields, fields);\n        var compiledString = compileTemplate(template);\n        var liCollection = [];\n        var value;\n        var id = generateId(); // generate id for drop-down-list option.\n        for (var i = 0; i < dataSource.length; i++) {\n            var fieldData = getFieldValues(dataSource[i], curFields);\n            var curItem = dataSource[i];\n            var isHeader = curItem.isHeader;\n            if (typeof dataSource[i] === 'string' || typeof dataSource[i] === 'number') {\n                value = curItem;\n            }\n            else {\n                value = fieldData[curFields.value];\n            }\n            if (curOpt.itemCreating && typeof curOpt.itemCreating === 'function') {\n                var curData = {\n                    dataSource: dataSource,\n                    curData: curItem,\n                    text: value,\n                    options: curOpt,\n                    fields: curFields\n                };\n                curOpt.itemCreating(curData);\n            }\n            if (curOpt.itemCreating && typeof curOpt.itemCreating === 'function') {\n                fieldData = getFieldValues(dataSource[i], curFields);\n                if (typeof dataSource[i] === 'string' || typeof dataSource[i] === 'number') {\n                    value = curItem;\n                }\n                else {\n                    value = fieldData[curFields.value];\n                }\n            }\n            var li = createElement('li', {\n                id: id + '-' + i,\n                className: isHeader ? cssClass.group : cssClass.li, attrs: { role: 'presentation' }\n            });\n            if (isHeader) {\n                if (typeof dataSource[i] === 'string' || typeof dataSource[i] === 'number') {\n                    li.innerText = curItem;\n                }\n                else {\n                    li.innerText = fieldData[curFields.text];\n                }\n            }\n            else {\n                var currentID = isHeader ? curOpt.groupTemplateID : curOpt.templateID;\n                if (isHeader) {\n                    if (componentInstance && componentInstance.getModuleName() !== 'listview') {\n                        var compiledElement = compiledString(curItem, componentInstance, 'headerTemplate', currentID, !!curOpt.isStringTemplate, null, li);\n                        if (compiledElement) {\n                            append(compiledElement, li);\n                        }\n                    }\n                    else {\n                        append(compiledString(curItem, componentInstance, 'headerTemplate', currentID, !!curOpt.isStringTemplate), li);\n                    }\n                }\n                else {\n                    if (componentInstance && componentInstance.getModuleName() !== 'listview') {\n                        var compiledElement = compiledString(curItem, componentInstance, 'template', currentID, !!curOpt.isStringTemplate, null, li);\n                        if (compiledElement) {\n                            append(compiledElement, li);\n                        }\n                    }\n                    else {\n                        append(compiledString(curItem, componentInstance, 'template', currentID, !!curOpt.isStringTemplate), li);\n                    }\n                }\n                li.setAttribute('data-value', isNullOrUndefined(value) ? 'null' : value);\n                li.setAttribute('role', 'option');\n            }\n            if (curOpt.itemCreated && typeof curOpt.itemCreated === 'function') {\n                var curData = {\n                    dataSource: dataSource,\n                    curData: curItem,\n                    text: value,\n                    item: li,\n                    options: curOpt,\n                    fields: curFields\n                };\n                curOpt.itemCreated(curData);\n            }\n            liCollection.push(li);\n        }\n        append(liCollection, ulElement);\n        return ulElement;\n    }\n    ListBase.renderContentTemplate = renderContentTemplate;\n    /**\n     * Created header items from group template.\n     *\n     * @param  {string | Function} groupTemplate - that need to convert and generate li element.\n     *\n     * @param {{Object}[]} groupDataSource - Specifies local JSON data source.\n     *\n     * @param  {FieldsMapping} fields - Specifies fields for mapping the dataSource.\n     *\n     * @param  {Element[]} headerItems - Specifies ListBase header items.\n     *\n     * @param {ListBaseOptions} [options] - Optional ListBase options.\n     *\n     * @param {*} [componentInstance] - Optional component instance.\n     *\n     * @returns {Element[]} - An array of header elements with the rendered group template content.\n     */\n    function renderGroupTemplate(groupTemplate, \n    // tslint:disable-next-line\n    groupDataSource, fields, headerItems, options, componentInstance) {\n        var compiledString = compileTemplate(groupTemplate);\n        var curFields = extend({}, ListBase.defaultMappedFields, fields);\n        var curOpt = extend({}, defaultListBaseOptions, options);\n        var category = curFields.groupBy;\n        for (var _i = 0, headerItems_1 = headerItems; _i < headerItems_1.length; _i++) {\n            var header = headerItems_1[_i];\n            var headerData = {};\n            headerData[\"\" + category] = header.textContent;\n            header.innerHTML = '';\n            if (componentInstance && componentInstance.getModuleName() !== 'listview') {\n                var compiledElement = compiledString(headerData, componentInstance, 'groupTemplate', curOpt.groupTemplateID, !!curOpt.isStringTemplate, null, header);\n                if (compiledElement) {\n                    append(compiledElement, header);\n                }\n            }\n            else {\n                append(compiledString(headerData, componentInstance, 'groupTemplate', curOpt.groupTemplateID, !!curOpt.isStringTemplate), header);\n            }\n        }\n        return headerItems;\n    }\n    ListBase.renderGroupTemplate = renderGroupTemplate;\n    /**\n     * Generates a random hexadecimal ID string.\n     *\n     * @returns {string} - The generated ID string.\n     */\n    function generateId() {\n        return Math.floor((1 + Math.random()) * 0x10000)\n            .toString(16)\n            .substring(1);\n    }\n    ListBase.generateId = generateId;\n    /**\n     * Processes the sub-child elements and creates corresponding elements based on the provided field data and options.\n     *\n     * @param {Function} createElement - Function for creating elements.\n     * @param {Object} fieldData - Field data containing sub-child information.\n     * @param {FieldsMapping} fields - Field mappings.\n     * @param {Object[]} ds - The data source array containing sub-child elements.\n     * @param {ListBaseOptions} options - ListBase options.\n     * @param {HTMLElement} element - The parent HTML element to append sub-child elements to.\n     * @param {number} level - The level of the sub-child elements.\n     * @returns {void}\n     */\n    function processSubChild(createElement, fieldData, fields, ds, options, element, level) {\n        // Get SubList\n        var subDS = fieldData[fields.child] || [];\n        var hasChildren = fieldData[fields.hasChildren];\n        //Create Sub child\n        if (subDS.length) {\n            hasChildren = true;\n            element.classList.add(cssClass.hasChild);\n            if (options.processSubChild) {\n                var subLi = createListFromJson(createElement, subDS, options, ++level);\n                element.appendChild(subLi);\n            }\n        }\n        // Create expand and collapse node\n        if (!!options.expandCollapse && hasChildren && !options.template) {\n            element.firstElementChild.classList.add(cssClass.iconWrapper);\n            var expandElement = options.expandIconPosition === 'Left' ? prepend : append;\n            expandElement([createElement('div', { className: 'e-icons ' + options.expandIconClass })], element.querySelector('.' + cssClass.textContent));\n        }\n    }\n    /**\n     * Generates a single-level LI (list item) element based on the provided item and field data.\n     *\n     * @param {Function} createElement - Function for creating elements.\n     * @param {string | Object | number} item - The item data.\n     * @param {Object} fieldData - Field data mapped from the item.\n     * @param {FieldsMapping} [fields] - Field mappings.\n     * @param {string} [className] - Optional class name to add to the created LI element.\n     * @param {HTMLElement[]} [innerElements] - Optional array of inner elements to append to the LI element.\n     * @param {boolean} [grpLI] - Indicates if the LI element is a group item.\n     * @param {string} [id] - The ID of the LI element.\n     * @param {number} [index] - The index of the LI element.\n     * @param {ListBaseOptions} [options] - Optional ListBase options.\n     * @returns {HTMLElement} - The generated LI element.\n     */\n    function generateSingleLevelLI(createElement, item, fieldData, fields, className, innerElements, grpLI, id, index, options) {\n        var curOpt = extend({}, defaultListBaseOptions, options);\n        var ariaAttributes = extend({}, defaultAriaAttributes, curOpt.ariaAttributes);\n        var text = item;\n        var value = item;\n        var dataSource;\n        if (typeof item !== 'string' && typeof item !== 'number' && typeof item !== 'boolean') {\n            dataSource = item;\n            text = (typeof fieldData[fields.text] === 'boolean' || typeof fieldData[fields.text] === 'number') ?\n                fieldData[fields.text] : (fieldData[fields.text] || '');\n            value = fieldData[fields.value];\n        }\n        var elementID;\n        if (!isNullOrUndefined(dataSource) && !isNullOrUndefined(fieldData[fields.id])\n            && fieldData[fields.id] !== '') {\n            elementID = id;\n        }\n        else {\n            elementID = id + '-' + index;\n        }\n        var li = createElement('li', {\n            className: (grpLI === true ? cssClass.group : cssClass.li) + ' ' + (isNullOrUndefined(className) ? '' : className),\n            id: elementID, attrs: (ariaAttributes.groupItemRole !== '' && ariaAttributes.itemRole !== '' ?\n                { role: (grpLI === true ? ariaAttributes.groupItemRole : ariaAttributes.itemRole) } : {})\n        });\n        if (dataSource && Object.prototype.hasOwnProperty.call(fieldData, fields.enabled) && fieldData[fields.enabled].toString() === 'false') {\n            li.classList.add(cssClass.disabled);\n        }\n        if (options && options.enableHtmlSanitizer) {\n            text = SanitizeHtmlHelper.sanitize(text);\n        }\n        if (grpLI) {\n            li.innerText = text;\n        }\n        else {\n            li.setAttribute('data-value', isNullOrUndefined(value) ? 'null' : value);\n            li.setAttribute('role', 'option');\n            if (dataSource && Object.prototype.hasOwnProperty.call(fieldData, fields.htmlAttributes) && fieldData[fields.htmlAttributes]) {\n                setAttribute(li, fieldData[fields.htmlAttributes]);\n            }\n            if (innerElements.length && !curOpt.itemNavigable) {\n                append(innerElements, li);\n            }\n            if (dataSource && (fieldData[fields.url] || (fieldData[fields.urlAttributes] &&\n                fieldData[fields.urlAttributes].href))) {\n                li.appendChild(anchorTag(createElement, dataSource, fields, text, innerElements, curOpt.itemNavigable));\n            }\n            else {\n                if (innerElements.length && curOpt.itemNavigable) {\n                    append(innerElements, li);\n                }\n                li.appendChild(document.createTextNode(text));\n            }\n        }\n        return li;\n    }\n    /**\n     * Returns a set of CSS class names based on the provided module name.\n     *\n     * @param {string} moduleName - The name of the module.\n     * @returns {ClassList} - The CSS class names associated with the module.\n     */\n    function getModuleClass(moduleName) {\n        var moduleClass;\n        // eslint-disable-next-line\n        return moduleClass = {\n            li: \"e-\" + moduleName + \"-item\",\n            ul: \"e-\" + moduleName + \"-parent e-ul\",\n            group: \"e-\" + moduleName + \"-group-item\",\n            icon: \"e-\" + moduleName + \"-icon\",\n            text: \"e-\" + moduleName + \"-text\",\n            check: \"e-\" + moduleName + \"-check\",\n            checked: 'e-checked',\n            selected: 'e-selected',\n            expanded: 'e-expanded',\n            textContent: 'e-text-content',\n            hasChild: 'e-has-child',\n            level: 'e-level',\n            url: \"e-\" + moduleName + \"-url\",\n            collapsible: 'e-icon-collapsible',\n            disabled: 'e-disabled',\n            image: \"e-\" + moduleName + \"-img\",\n            iconWrapper: 'e-icon-wrapper',\n            anchorWrap: 'e-anchor-wrap',\n            navigable: 'e-navigable'\n        };\n    }\n    /**\n     * Creates an anchor tag (<a>) element based on the provided data source, fields, and text.\n     *\n     * @param {Function} createElement - Function for creating elements.\n     * @param {object} dataSource - The data source containing URL-related fields.\n     * @param {FieldsMapping} fields - Field mappings for the data source.\n     * @param {string} text - The text content of the anchor tag.\n     * @param {HTMLElement[]} innerElements - Optional array of inner elements to append to the anchor tag.\n     * @param {boolean} isFullNavigation - Indicates whether the anchor tag should be for full navigation.\n     * @returns {HTMLElement} The created anchor tag element.\n     */\n    function anchorTag(createElement, dataSource, fields, text, innerElements, isFullNavigation) {\n        var fieldData = getFieldValues(dataSource, fields);\n        var attr = { href: fieldData[fields.url] };\n        if (Object.prototype.hasOwnProperty.call(fieldData, fields.urlAttributes) && fieldData[fields.urlAttributes]) {\n            merge(attr, fieldData[fields.urlAttributes]);\n            attr.href = fieldData[fields.url] ? fieldData[fields.url] :\n                fieldData[fields.urlAttributes].href;\n        }\n        var anchorTag;\n        if (!isFullNavigation) {\n            anchorTag = createElement('a', { className: cssClass.text + ' ' + cssClass.url, innerHTML: text });\n        }\n        else {\n            anchorTag = createElement('a', { className: cssClass.text + ' ' + cssClass.url });\n            var anchorWrapper = createElement('div', { className: cssClass.anchorWrap });\n            if (innerElements && innerElements.length) {\n                append(innerElements, anchorWrapper);\n            }\n            anchorWrapper.appendChild(document.createTextNode(text));\n            append([anchorWrapper], anchorTag);\n        }\n        setAttribute(anchorTag, attr);\n        return anchorTag;\n    }\n    /**\n     * Generates an LI element based on the provided item and field data.\n     *\n     * @param {Function} createElement - Function for creating elements.\n     * @param {string | Object | number} item - The item data.\n     * @param {Object} fieldData - Field data mapped from the item.\n     * @param {FieldsMapping} fields - Field mappings.\n     * @param {string} [className] - Optional class name to add to the created LI element.\n     * @param {ListBaseOptions} [options] - Optional ListBase options.\n     * @param {*} [componentInstance] - Optional component instance.\n     * @returns {HTMLElement} - The generated LI element.\n     */\n    function generateLI(createElement, item, fieldData, fields, className, options, componentInstance) {\n        var curOpt = extend({}, defaultListBaseOptions, options);\n        var ariaAttributes = extend({}, defaultAriaAttributes, curOpt.ariaAttributes);\n        var text = item;\n        var uID;\n        var grpLI;\n        var dataSource;\n        if (typeof item !== 'string' && typeof item !== 'number') {\n            dataSource = item;\n            text = fieldData[fields.text] || '';\n            uID = (isNullOrUndefined(fieldData['_id'])) ? fieldData[fields.id] : fieldData['_id'];\n            grpLI = (Object.prototype.hasOwnProperty.call(item, 'isHeader') && item.isHeader)\n                ? true : false;\n        }\n        if (options && options.enableHtmlSanitizer) {\n            text = SanitizeHtmlHelper.sanitize(text);\n        }\n        var li = createElement('li', {\n            className: (grpLI === true ? cssClass.group : cssClass.li) + ' ' + (isNullOrUndefined(className) ? '' : className),\n            attrs: (ariaAttributes.groupItemRole !== '' && ariaAttributes.itemRole !== '' ?\n                { role: (grpLI === true ? ariaAttributes.groupItemRole : ariaAttributes.itemRole) } : {})\n        });\n        if (!isNullOrUndefined(uID) === true) {\n            li.setAttribute('data-uid', uID);\n        }\n        else {\n            li.setAttribute('data-uid', generateId());\n        }\n        if (grpLI && options && options.groupTemplate) {\n            var compiledString = compileTemplate(options.groupTemplate);\n            if (componentInstance && componentInstance.getModuleName() !== 'listview') {\n                var compiledElement = compiledString(item, componentInstance, 'groupTemplate', curOpt.groupTemplateID, !!curOpt.isStringTemplate, null, li);\n                if (compiledElement) {\n                    append(compiledElement, li);\n                }\n            }\n            else {\n                append(compiledString(item, componentInstance, 'groupTemplate', curOpt.groupTemplateID, !!curOpt.isStringTemplate), li);\n            }\n        }\n        else if (!grpLI && options && options.template) {\n            var compiledString = compileTemplate(options.template);\n            if (componentInstance && componentInstance.getModuleName() !== 'listview') {\n                var compiledElement = compiledString(item, componentInstance, 'template', curOpt.templateID, !!curOpt.isStringTemplate, null, li);\n                if (compiledElement) {\n                    append(compiledElement, li);\n                }\n            }\n            else {\n                append(compiledString(item, componentInstance, 'template', curOpt.templateID, !!curOpt.isStringTemplate), li);\n            }\n        }\n        else {\n            var innerDiv = createElement('div', {\n                className: cssClass.textContent,\n                attrs: (ariaAttributes.wrapperRole !== '' ? { role: ariaAttributes.wrapperRole } : {})\n            });\n            if (dataSource && (fieldData[fields.url] || (fieldData[fields.urlAttributes] &&\n                fieldData[fields.urlAttributes].href))) {\n                innerDiv.appendChild(anchorTag(createElement, dataSource, fields, text, null, curOpt.itemNavigable));\n            }\n            else {\n                var element = createElement('span', {\n                    className: cssClass.text,\n                    attrs: (ariaAttributes.itemText !== '' ? { role: ariaAttributes.itemText } : {})\n                });\n                if (options && options.enableHtmlSanitizer) {\n                    element.innerText = text;\n                }\n                else {\n                    element.innerHTML = text;\n                }\n                innerDiv.appendChild(element);\n            }\n            li.appendChild(innerDiv);\n        }\n        return li;\n    }\n    /**\n     * Returns UL element based on the given LI element.\n     *\n     * @param {Function} createElement - Function for creating elements.\n     *\n     * @param  {HTMLElement[]} liElement - Specifies array of LI element.\n     *\n     * @param  {string} [className] - Specifies class name that need to be added in UL element.\n     *\n     * @param  {ListBaseOptions} [options] - Specifies ListBase options.\n     *\n     * @returns {HTMLElement} - The created UL element.\n     */\n    function generateUL(createElement, liElement, className, options) {\n        var curOpt = extend({}, defaultListBaseOptions, options);\n        var ariaAttributes = extend({}, defaultAriaAttributes, curOpt.ariaAttributes);\n        cssClass = getModuleClass(curOpt.moduleName);\n        var ulElement = createElement('ul', {\n            className: cssClass.ul + ' ' + (isNullOrUndefined(className) ? '' : className),\n            attrs: (ariaAttributes.listRole !== '' ? { role: ariaAttributes.listRole } : {})\n        });\n        append(liElement, ulElement);\n        return ulElement;\n    }\n    ListBase.generateUL = generateUL;\n    /**\n     * Returns LI element with additional DIV tag based on the given LI element.\n     *\n     * @param {Function} createElement - Function for creating elements.\n     *\n     * @param  {liElement} liElement - Specifies LI element.\n     *\n     * @param  {string} [className] - Specifies class name that need to be added in created DIV element.\n     *\n     * @param  {ListBaseOptions} [options] - Specifies ListBase options.\n     *\n     * @returns {HTMLElement} - The modified LI element.\n     */\n    function generateIcon(createElement, liElement, className, options) {\n        var curOpt = extend({}, defaultListBaseOptions, options);\n        cssClass = getModuleClass(curOpt.moduleName);\n        var expandElement = curOpt.expandIconPosition === 'Left' ? prepend : append;\n        expandElement([createElement('div', {\n                className: 'e-icons ' + curOpt.expandIconClass + ' ' +\n                    (isNullOrUndefined(className) ? '' : className)\n            })], liElement.querySelector('.' + cssClass.textContent));\n        return liElement;\n    }\n    ListBase.generateIcon = generateIcon;\n})(ListBase || (ListBase = {}));\n/**\n * Used to get dataSource item from complex data using fields.\n *\n * @param {Object} dataItem - Specifies an  JSON or String data.\n *\n * @param {FieldsMapping} fields - Fields that are mapped from the dataSource.\n * @returns {Object|string|number} - The retrieved field values.\n */\nexport function getFieldValues(dataItem, fields) {\n    var fieldData = {};\n    if (isNullOrUndefined(dataItem) || typeof (dataItem) === 'string' || typeof (dataItem) === 'number'\n        || !isNullOrUndefined(dataItem.isHeader)) {\n        return dataItem;\n    }\n    else {\n        for (var _i = 0, _a = Object.keys(fields); _i < _a.length; _i++) {\n            var field = _a[_i];\n            var dataField = fields[\"\" + field];\n            var value = !isNullOrUndefined(dataField) &&\n                typeof (dataField) === 'string' ? getValue(dataField, dataItem) : undefined;\n            if (!isNullOrUndefined(value)) {\n                fieldData[\"\" + dataField] = value;\n            }\n        }\n    }\n    return fieldData;\n}\n/**\n * Compiles a template string or function into a compiled function.\n *\n * @param {string | Function} template - The template string or function to compile.\n * @returns {Function | undefined} - The compiled function, or undefined if the input is false.\n */\nfunction compileTemplate(template) {\n    if (template) {\n        try {\n            if (typeof template !== 'function' && document.querySelector(template)) {\n                return compile(document.querySelector(template).innerHTML.trim());\n            }\n            else {\n                return compile(template);\n            }\n        }\n        catch (e) {\n            return compile(template);\n        }\n    }\n    return undefined;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}