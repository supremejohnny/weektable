{"ast":null,"code":"/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { isUndefined, throwError, isNullOrUndefined, extend, isBlazor, getValue } from '../util';\nimport { IntlBase as base, setNumberFormat, defaultCurrencyCode } from './intl-base';\nimport { ParserBase as parser } from './parser-base';\nvar errorText = {\n  'ms': 'minimumSignificantDigits',\n  'ls': 'maximumSignificantDigits',\n  'mf': 'minimumFractionDigits',\n  'lf': 'maximumFractionDigits'\n};\nvar percentSign = 'percentSign';\nvar minusSign = 'minusSign';\nvar mapper = ['infinity', 'nan', 'group', 'decimal', 'exponential'];\n/**\n * Module for number formatting.\n *\n * @private\n */\nvar NumberFormat = /** @class */function () {\n  function NumberFormat() {}\n  /**\n   * Returns the formatter function for given skeleton.\n   *\n   * @param {string} culture -  Specifies the culture name to be which formatting.\n   * @param {NumberFormatOptions} option - Specific the format in which number  will format.\n   * @param {Object} cldr - Specifies the global cldr data collection.\n   * @returns {Function} ?\n   */\n  NumberFormat.numberFormatter = function (culture, option, cldr) {\n    var _this = this;\n    var fOptions = extend({}, option);\n    var cOptions = {};\n    var dOptions = {};\n    var symbolPattern;\n    var dependable = base.getDependables(cldr, culture, '', true);\n    var numObject = dependable.numericObject;\n    dOptions.numberMapper = isBlazor() ? extend({}, numObject) : parser.getNumberMapper(dependable.parserObject, parser.getNumberingSystem(cldr), true);\n    dOptions.currencySymbol = isBlazor() ? getValue('currencySymbol', numObject) : base.getCurrencySymbol(dependable.numericObject, fOptions.currency || defaultCurrencyCode, option.altSymbol, option.ignoreCurrency);\n    dOptions.percentSymbol = isBlazor() ? getValue('numberSymbols.percentSign', numObject) : dOptions.numberMapper.numberSymbols[\"\" + percentSign];\n    dOptions.minusSymbol = isBlazor() ? getValue('numberSymbols.minusSign', numObject) : dOptions.numberMapper.numberSymbols[\"\" + minusSign];\n    var symbols = dOptions.numberMapper.numberSymbols;\n    if (option.format && !base.formatRegex.test(option.format)) {\n      cOptions = base.customFormat(option.format, dOptions, dependable.numericObject);\n      if (!isUndefined(fOptions.useGrouping) && fOptions.useGrouping) {\n        fOptions.useGrouping = cOptions.pData.useGrouping;\n      }\n    } else {\n      extend(fOptions, base.getProperNumericSkeleton(option.format || 'N'));\n      fOptions.isCurrency = fOptions.type === 'currency';\n      fOptions.isPercent = fOptions.type === 'percent';\n      if (!isBlazor()) {\n        symbolPattern = base.getSymbolPattern(fOptions.type, dOptions.numberMapper.numberSystem, dependable.numericObject, fOptions.isAccount);\n      }\n      fOptions.groupOne = this.checkValueRange(fOptions.maximumSignificantDigits, fOptions.minimumSignificantDigits, true);\n      this.checkValueRange(fOptions.maximumFractionDigits, fOptions.minimumFractionDigits, false, true);\n      if (!isUndefined(fOptions.fractionDigits)) {\n        fOptions.minimumFractionDigits = fOptions.maximumFractionDigits = fOptions.fractionDigits;\n      }\n      if (isUndefined(fOptions.useGrouping)) {\n        fOptions.useGrouping = true;\n      }\n      if (fOptions.isCurrency && !isBlazor()) {\n        symbolPattern = symbolPattern.replace(/\\u00A4/g, base.defaultCurrency);\n      }\n      if (!isBlazor()) {\n        var split = symbolPattern.split(';');\n        cOptions.nData = base.getFormatData(split[1] || '-' + split[0], true, dOptions.currencySymbol);\n        cOptions.pData = base.getFormatData(split[0], false, dOptions.currencySymbol);\n        if (fOptions.useGrouping) {\n          fOptions.groupSeparator = symbols[mapper[2]];\n          fOptions.groupData = this.getGroupingDetails(split[0]);\n        }\n      } else {\n        cOptions.nData = extend({}, {}, getValue(fOptions.type + 'nData', numObject));\n        cOptions.pData = extend({}, {}, getValue(fOptions.type + 'pData', numObject));\n        if (fOptions.type === 'currency' && option.currency) {\n          base.replaceBlazorCurrency([cOptions.pData, cOptions.nData], dOptions.currencySymbol, option.currency);\n        }\n      }\n      var minFrac = isUndefined(fOptions.minimumFractionDigits);\n      if (minFrac) {\n        fOptions.minimumFractionDigits = cOptions.nData.minimumFraction;\n      }\n      if (isUndefined(fOptions.maximumFractionDigits)) {\n        var mval = cOptions.nData.maximumFraction;\n        fOptions.maximumFractionDigits = isUndefined(mval) && fOptions.isPercent ? 0 : mval;\n      }\n      var mfrac = fOptions.minimumFractionDigits;\n      var lfrac = fOptions.maximumFractionDigits;\n      if (!isUndefined(mfrac) && !isUndefined(lfrac)) {\n        if (mfrac > lfrac) {\n          fOptions.maximumFractionDigits = mfrac;\n        }\n      }\n    }\n    extend(cOptions.nData, fOptions);\n    extend(cOptions.pData, fOptions);\n    return function (value) {\n      if (isNaN(value)) {\n        return symbols[mapper[1]];\n      } else if (!isFinite(value)) {\n        return symbols[mapper[0]];\n      }\n      return _this.intNumberFormatter(value, cOptions, dOptions, option);\n    };\n  };\n  /**\n   * Returns grouping details for the pattern provided\n   *\n   * @param {string} pattern ?\n   * @returns {GroupDetails} ?\n   */\n  NumberFormat.getGroupingDetails = function (pattern) {\n    var ret = {};\n    var match = pattern.match(base.negativeDataRegex);\n    if (match && match[4]) {\n      var pattern_1 = match[4];\n      var p = pattern_1.lastIndexOf(',');\n      if (p !== -1) {\n        var temp = pattern_1.split('.')[0];\n        ret.primary = temp.length - p - 1;\n        var s = pattern_1.lastIndexOf(',', p - 1);\n        if (s !== -1) {\n          ret.secondary = p - 1 - s;\n        }\n      }\n    }\n    return ret;\n  };\n  /**\n   * Returns if the provided integer range is valid.\n   *\n   * @param {number} val1 ?\n   * @param {number} val2 ?\n   * @param {boolean} checkbothExist ?\n   * @param {boolean} isFraction ?\n   * @returns {boolean} ?\n   */\n  NumberFormat.checkValueRange = function (val1, val2, checkbothExist, isFraction) {\n    var decide = isFraction ? 'f' : 's';\n    var dint = 0;\n    var str1 = errorText['l' + decide];\n    var str2 = errorText['m' + decide];\n    if (!isUndefined(val1)) {\n      this.checkRange(val1, str1, isFraction);\n      dint++;\n    }\n    if (!isUndefined(val2)) {\n      this.checkRange(val2, str2, isFraction);\n      dint++;\n    }\n    if (dint === 2) {\n      if (val1 < val2) {\n        throwError(str2 + 'specified must be less than the' + str1);\n      } else {\n        return true;\n      }\n    } else if (checkbothExist && dint === 1) {\n      throwError('Both' + str2 + 'and' + str2 + 'must be present');\n    }\n    return false;\n  };\n  /**\n   * Check if the provided fraction range is valid\n   *\n   * @param {number} val ?\n   * @param {string} text ?\n   * @param {boolean} isFraction ?\n   * @returns {void} ?\n   */\n  NumberFormat.checkRange = function (val, text, isFraction) {\n    var range = isFraction ? [0, 20] : [1, 21];\n    if (val < range[0] || val > range[1]) {\n      throwError(text + 'value must be within the range' + range[0] + 'to' + range[1]);\n    }\n  };\n  /**\n   * Returns formatted numeric string for provided formatting options\n   *\n   * @param {number} value ?\n   * @param {base.GenericFormatOptions} fOptions ?\n   * @param {CommonOptions} dOptions ?\n   * @param {NumberFormatOptions} [option] ?\n   * @returns {string} ?\n   */\n  NumberFormat.intNumberFormatter = function (value, fOptions, dOptions, option) {\n    var curData;\n    if (isUndefined(fOptions.nData.type)) {\n      return undefined;\n    } else {\n      if (value < 0) {\n        value = value * -1;\n        curData = fOptions.nData;\n      } else if (value === 0) {\n        curData = fOptions.zeroData || fOptions.pData;\n      } else {\n        curData = fOptions.pData;\n      }\n      var fValue = '';\n      if (curData.isPercent) {\n        value = value * 100;\n      }\n      if (curData.groupOne) {\n        fValue = this.processSignificantDigits(value, curData.minimumSignificantDigits, curData.maximumSignificantDigits);\n      } else {\n        fValue = this.processFraction(value, curData.minimumFractionDigits, curData.maximumFractionDigits, option);\n        if (curData.minimumIntegerDigits) {\n          fValue = this.processMinimumIntegers(fValue, curData.minimumIntegerDigits);\n        }\n        if (dOptions.isCustomFormat && curData.minimumFractionDigits < curData.maximumFractionDigits && /\\d+\\.\\d+/.test(fValue)) {\n          var temp = fValue.split('.');\n          var decimalPart = temp[1];\n          var len = decimalPart.length;\n          for (var i = len - 1; i >= 0; i--) {\n            if (decimalPart[parseInt(i.toString(), 10)] === '0' && i >= curData.minimumFractionDigits) {\n              decimalPart = decimalPart.slice(0, i);\n            } else {\n              break;\n            }\n          }\n          fValue = temp[0] + '.' + decimalPart;\n        }\n      }\n      if (curData.type === 'scientific') {\n        fValue = value.toExponential(curData.maximumFractionDigits);\n        fValue = fValue.replace('e', dOptions.numberMapper.numberSymbols[mapper[4]]);\n      }\n      fValue = fValue.replace('.', dOptions.numberMapper.numberSymbols[mapper[3]]);\n      fValue = curData.format === '#,###,,;(#,###,,)' ? this.customPivotFormat(parseInt(fValue, 10)) : fValue;\n      if (curData.useGrouping) {\n        fValue = this.groupNumbers(fValue, curData.groupData.primary, curData.groupSeparator || ',', dOptions.numberMapper.numberSymbols[mapper[3]] || '.', curData.groupData.secondary);\n      }\n      fValue = parser.convertValueParts(fValue, base.latnParseRegex, dOptions.numberMapper.mapper);\n      if (curData.nlead === 'N/A') {\n        return curData.nlead;\n      } else {\n        if (fValue === '0' && option && option.format === '0') {\n          return fValue + curData.nend;\n        }\n        return curData.nlead + fValue + curData.nend;\n      }\n    }\n  };\n  /**\n   * Returns significant digits processed numeric string\n   *\n   * @param {number} value ?\n   * @param {number} min ?\n   * @param {number} max ?\n   * @returns {string} ?\n   */\n  NumberFormat.processSignificantDigits = function (value, min, max) {\n    var temp = value + '';\n    var tn;\n    var length = temp.length;\n    if (length < min) {\n      return value.toPrecision(min);\n    } else {\n      temp = value.toPrecision(max);\n      tn = +temp;\n      return tn + '';\n    }\n  };\n  /**\n   * Returns grouped numeric string\n   *\n   * @param {string} val ?\n   * @param {number} level1 ?\n   * @param {string} sep ?\n   * @param {string} decimalSymbol ?\n   * @param {number} level2 ?\n   * @returns {string} ?\n   */\n  NumberFormat.groupNumbers = function (val, level1, sep, decimalSymbol, level2) {\n    var flag = !isNullOrUndefined(level2) && level2 !== 0;\n    var split = val.split(decimalSymbol);\n    var prefix = split[0];\n    var length = prefix.length;\n    var str = '';\n    while (length > level1) {\n      str = prefix.slice(length - level1, length) + (str.length ? sep + str : '');\n      length -= level1;\n      if (flag) {\n        level1 = level2;\n        flag = false;\n      }\n    }\n    split[0] = prefix.slice(0, length) + (str.length ? sep : '') + str;\n    return split.join(decimalSymbol);\n  };\n  /**\n   * Returns fraction processed numeric string\n   *\n   * @param {number} value ?\n   * @param {number} min ?\n   * @param {number} max ?\n   * @param {NumberFormatOptions} [option] ?\n   * @returns {string} ?\n   */\n  NumberFormat.processFraction = function (value, min, max, option) {\n    var temp = (value + '').split('.')[1];\n    var length = temp ? temp.length : 0;\n    if (min && length < min) {\n      var ret = '';\n      if (length === 0) {\n        ret = value.toFixed(min);\n      } else {\n        ret += value;\n        for (var j = 0; j < min - length; j++) {\n          ret += '0';\n        }\n        return ret;\n      }\n      return value.toFixed(min);\n    } else if (!isNullOrUndefined(max) && (length > max || max === 0)) {\n      return value.toFixed(max);\n    }\n    var str = value + '';\n    if (str[0] === '0' && option && option.format === '###.00') {\n      str = str.slice(1);\n    }\n    return str;\n  };\n  /**\n   * Returns integer processed numeric string\n   *\n   * @param {string} value ?\n   * @param {number} min ?\n   * @returns {string} ?\n   */\n  NumberFormat.processMinimumIntegers = function (value, min) {\n    var temp = value.split('.');\n    var lead = temp[0];\n    var len = lead.length;\n    if (len < min) {\n      for (var i = 0; i < min - len; i++) {\n        lead = '0' + lead;\n      }\n      temp[0] = lead;\n    }\n    return temp.join('.');\n  };\n  /**\n   * Returns custom format for pivot table\n   *\n   * @param {number} value ?\n   * @returns {string} ?\n   */\n  NumberFormat.customPivotFormat = function (value) {\n    if (value >= 500000) {\n      value /= 1000000;\n      var _a = value.toString().split('.'),\n        integer = _a[0],\n        decimal = _a[1];\n      return decimal && +decimal.substring(0, 1) >= 5 ? Math.ceil(value).toString() : Math.floor(value).toString();\n    }\n    return '';\n  };\n  return NumberFormat;\n}();\nexport { NumberFormat };\nsetNumberFormat(NumberFormat);","map":{"version":3,"names":["isUndefined","throwError","isNullOrUndefined","extend","isBlazor","getValue","IntlBase","base","setNumberFormat","defaultCurrencyCode","ParserBase","parser","errorText","percentSign","minusSign","mapper","NumberFormat","numberFormatter","culture","option","cldr","_this","fOptions","cOptions","dOptions","symbolPattern","dependable","getDependables","numObject","numericObject","numberMapper","getNumberMapper","parserObject","getNumberingSystem","currencySymbol","getCurrencySymbol","currency","altSymbol","ignoreCurrency","percentSymbol","numberSymbols","minusSymbol","symbols","format","formatRegex","test","customFormat","useGrouping","pData","getProperNumericSkeleton","isCurrency","type","isPercent","getSymbolPattern","numberSystem","isAccount","groupOne","checkValueRange","maximumSignificantDigits","minimumSignificantDigits","maximumFractionDigits","minimumFractionDigits","fractionDigits","replace","defaultCurrency","split","nData","getFormatData","groupSeparator","groupData","getGroupingDetails","replaceBlazorCurrency","minFrac","minimumFraction","mval","maximumFraction","mfrac","lfrac","value","isNaN","isFinite","intNumberFormatter","pattern","ret","match","negativeDataRegex","pattern_1","p","lastIndexOf","temp","primary","length","s","secondary","val1","val2","checkbothExist","isFraction","decide","dint","str1","str2","checkRange","val","text","range","curData","undefined","zeroData","fValue","processSignificantDigits","processFraction","minimumIntegerDigits","processMinimumIntegers","isCustomFormat","decimalPart","len","i","parseInt","toString","slice","toExponential","customPivotFormat","groupNumbers","convertValueParts","latnParseRegex","nlead","nend","min","max","tn","toPrecision","level1","sep","decimalSymbol","level2","flag","prefix","str","join","toFixed","j","lead","_a","integer","decimal","substring","Math","ceil","floor"],"sources":["D:/weektable/frontend/node_modules/@syncfusion/ej2-base/src/intl/number-formatter.js"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { isUndefined, throwError, isNullOrUndefined, extend, isBlazor, getValue } from '../util';\nimport { IntlBase as base, setNumberFormat, defaultCurrencyCode } from './intl-base';\nimport { ParserBase as parser } from './parser-base';\nvar errorText = {\n    'ms': 'minimumSignificantDigits',\n    'ls': 'maximumSignificantDigits',\n    'mf': 'minimumFractionDigits',\n    'lf': 'maximumFractionDigits'\n};\nvar percentSign = 'percentSign';\nvar minusSign = 'minusSign';\nvar mapper = ['infinity', 'nan', 'group', 'decimal', 'exponential'];\n/**\n * Module for number formatting.\n *\n * @private\n */\nvar NumberFormat = /** @class */ (function () {\n    function NumberFormat() {\n    }\n    /**\n     * Returns the formatter function for given skeleton.\n     *\n     * @param {string} culture -  Specifies the culture name to be which formatting.\n     * @param {NumberFormatOptions} option - Specific the format in which number  will format.\n     * @param {Object} cldr - Specifies the global cldr data collection.\n     * @returns {Function} ?\n     */\n    NumberFormat.numberFormatter = function (culture, option, cldr) {\n        var _this = this;\n        var fOptions = extend({}, option);\n        var cOptions = {};\n        var dOptions = {};\n        var symbolPattern;\n        var dependable = base.getDependables(cldr, culture, '', true);\n        var numObject = dependable.numericObject;\n        dOptions.numberMapper = isBlazor() ? extend({}, numObject) :\n            parser.getNumberMapper(dependable.parserObject, parser.getNumberingSystem(cldr), true);\n        dOptions.currencySymbol = isBlazor() ? getValue('currencySymbol', numObject) : base.getCurrencySymbol(dependable.numericObject, fOptions.currency || defaultCurrencyCode, option.altSymbol, option.ignoreCurrency);\n        dOptions.percentSymbol = isBlazor() ? getValue('numberSymbols.percentSign', numObject) :\n            dOptions.numberMapper.numberSymbols[\"\" + percentSign];\n        dOptions.minusSymbol = isBlazor() ? getValue('numberSymbols.minusSign', numObject) :\n            dOptions.numberMapper.numberSymbols[\"\" + minusSign];\n        var symbols = dOptions.numberMapper.numberSymbols;\n        if ((option.format) && !(base.formatRegex.test(option.format))) {\n            cOptions = base.customFormat(option.format, dOptions, dependable.numericObject);\n            if (!isUndefined(fOptions.useGrouping) && fOptions.useGrouping) {\n                fOptions.useGrouping = cOptions.pData.useGrouping;\n            }\n        }\n        else {\n            extend(fOptions, base.getProperNumericSkeleton(option.format || 'N'));\n            fOptions.isCurrency = fOptions.type === 'currency';\n            fOptions.isPercent = fOptions.type === 'percent';\n            if (!isBlazor()) {\n                symbolPattern = base.getSymbolPattern(fOptions.type, dOptions.numberMapper.numberSystem, dependable.numericObject, fOptions.isAccount);\n            }\n            fOptions.groupOne = this.checkValueRange(fOptions.maximumSignificantDigits, fOptions.minimumSignificantDigits, true);\n            this.checkValueRange(fOptions.maximumFractionDigits, fOptions.minimumFractionDigits, false, true);\n            if (!isUndefined(fOptions.fractionDigits)) {\n                fOptions.minimumFractionDigits = fOptions.maximumFractionDigits = fOptions.fractionDigits;\n            }\n            if (isUndefined(fOptions.useGrouping)) {\n                fOptions.useGrouping = true;\n            }\n            if (fOptions.isCurrency && !isBlazor()) {\n                symbolPattern = symbolPattern.replace(/\\u00A4/g, base.defaultCurrency);\n            }\n            if (!isBlazor()) {\n                var split = symbolPattern.split(';');\n                cOptions.nData = base.getFormatData(split[1] || '-' + split[0], true, dOptions.currencySymbol);\n                cOptions.pData = base.getFormatData(split[0], false, dOptions.currencySymbol);\n                if (fOptions.useGrouping) {\n                    fOptions.groupSeparator = symbols[mapper[2]];\n                    fOptions.groupData = this.getGroupingDetails(split[0]);\n                }\n            }\n            else {\n                cOptions.nData = extend({}, {}, getValue(fOptions.type + 'nData', numObject));\n                cOptions.pData = extend({}, {}, getValue(fOptions.type + 'pData', numObject));\n                if (fOptions.type === 'currency' && option.currency) {\n                    base.replaceBlazorCurrency([cOptions.pData, cOptions.nData], dOptions.currencySymbol, option.currency);\n                }\n            }\n            var minFrac = isUndefined(fOptions.minimumFractionDigits);\n            if (minFrac) {\n                fOptions.minimumFractionDigits = cOptions.nData.minimumFraction;\n            }\n            if (isUndefined(fOptions.maximumFractionDigits)) {\n                var mval = cOptions.nData.maximumFraction;\n                fOptions.maximumFractionDigits = isUndefined(mval) && fOptions.isPercent ? 0 : mval;\n            }\n            var mfrac = fOptions.minimumFractionDigits;\n            var lfrac = fOptions.maximumFractionDigits;\n            if (!isUndefined(mfrac) && !isUndefined(lfrac)) {\n                if (mfrac > lfrac) {\n                    fOptions.maximumFractionDigits = mfrac;\n                }\n            }\n        }\n        extend(cOptions.nData, fOptions);\n        extend(cOptions.pData, fOptions);\n        return function (value) {\n            if (isNaN(value)) {\n                return symbols[mapper[1]];\n            }\n            else if (!isFinite(value)) {\n                return symbols[mapper[0]];\n            }\n            return _this.intNumberFormatter(value, cOptions, dOptions, option);\n        };\n    };\n    /**\n     * Returns grouping details for the pattern provided\n     *\n     * @param {string} pattern ?\n     * @returns {GroupDetails} ?\n     */\n    NumberFormat.getGroupingDetails = function (pattern) {\n        var ret = {};\n        var match = pattern.match(base.negativeDataRegex);\n        if (match && match[4]) {\n            var pattern_1 = match[4];\n            var p = pattern_1.lastIndexOf(',');\n            if (p !== -1) {\n                var temp = pattern_1.split('.')[0];\n                ret.primary = (temp.length - p) - 1;\n                var s = pattern_1.lastIndexOf(',', p - 1);\n                if (s !== -1) {\n                    ret.secondary = p - 1 - s;\n                }\n            }\n        }\n        return ret;\n    };\n    /**\n     * Returns if the provided integer range is valid.\n     *\n     * @param {number} val1 ?\n     * @param {number} val2 ?\n     * @param {boolean} checkbothExist ?\n     * @param {boolean} isFraction ?\n     * @returns {boolean} ?\n     */\n    NumberFormat.checkValueRange = function (val1, val2, checkbothExist, isFraction) {\n        var decide = isFraction ? 'f' : 's';\n        var dint = 0;\n        var str1 = errorText['l' + decide];\n        var str2 = errorText['m' + decide];\n        if (!isUndefined(val1)) {\n            this.checkRange(val1, str1, isFraction);\n            dint++;\n        }\n        if (!isUndefined(val2)) {\n            this.checkRange(val2, str2, isFraction);\n            dint++;\n        }\n        if (dint === 2) {\n            if (val1 < val2) {\n                throwError(str2 + 'specified must be less than the' + str1);\n            }\n            else {\n                return true;\n            }\n        }\n        else if (checkbothExist && dint === 1) {\n            throwError('Both' + str2 + 'and' + str2 + 'must be present');\n        }\n        return false;\n    };\n    /**\n     * Check if the provided fraction range is valid\n     *\n     * @param {number} val ?\n     * @param {string} text ?\n     * @param {boolean} isFraction ?\n     * @returns {void} ?\n     */\n    NumberFormat.checkRange = function (val, text, isFraction) {\n        var range = isFraction ? [0, 20] : [1, 21];\n        if (val < range[0] || val > range[1]) {\n            throwError(text + 'value must be within the range' + range[0] + 'to' + range[1]);\n        }\n    };\n    /**\n     * Returns formatted numeric string for provided formatting options\n     *\n     * @param {number} value ?\n     * @param {base.GenericFormatOptions} fOptions ?\n     * @param {CommonOptions} dOptions ?\n     * @param {NumberFormatOptions} [option] ?\n     * @returns {string} ?\n     */\n    NumberFormat.intNumberFormatter = function (value, fOptions, dOptions, option) {\n        var curData;\n        if (isUndefined(fOptions.nData.type)) {\n            return undefined;\n        }\n        else {\n            if (value < 0) {\n                value = value * -1;\n                curData = fOptions.nData;\n            }\n            else if (value === 0) {\n                curData = fOptions.zeroData || fOptions.pData;\n            }\n            else {\n                curData = fOptions.pData;\n            }\n            var fValue = '';\n            if (curData.isPercent) {\n                value = value * 100;\n            }\n            if (curData.groupOne) {\n                fValue = this.processSignificantDigits(value, curData.minimumSignificantDigits, curData.maximumSignificantDigits);\n            }\n            else {\n                fValue = this.processFraction(value, curData.minimumFractionDigits, curData.maximumFractionDigits, option);\n                if (curData.minimumIntegerDigits) {\n                    fValue = this.processMinimumIntegers(fValue, curData.minimumIntegerDigits);\n                }\n                if (dOptions.isCustomFormat && curData.minimumFractionDigits < curData.maximumFractionDigits\n                    && /\\d+\\.\\d+/.test(fValue)) {\n                    var temp = fValue.split('.');\n                    var decimalPart = temp[1];\n                    var len = decimalPart.length;\n                    for (var i = len - 1; i >= 0; i--) {\n                        if (decimalPart[parseInt(i.toString(), 10)] === '0' && i >= curData.minimumFractionDigits) {\n                            decimalPart = decimalPart.slice(0, i);\n                        }\n                        else {\n                            break;\n                        }\n                    }\n                    fValue = temp[0] + '.' + decimalPart;\n                }\n            }\n            if (curData.type === 'scientific') {\n                fValue = value.toExponential(curData.maximumFractionDigits);\n                fValue = fValue.replace('e', dOptions.numberMapper.numberSymbols[mapper[4]]);\n            }\n            fValue = fValue.replace('.', dOptions.numberMapper.numberSymbols[mapper[3]]);\n            fValue = curData.format === '#,###,,;(#,###,,)' ? this.customPivotFormat(parseInt(fValue, 10)) : fValue;\n            if (curData.useGrouping) {\n                fValue = this.groupNumbers(fValue, curData.groupData.primary, curData.groupSeparator || ',', dOptions.numberMapper.numberSymbols[mapper[3]] || '.', curData.groupData.secondary);\n            }\n            fValue = parser.convertValueParts(fValue, base.latnParseRegex, dOptions.numberMapper.mapper);\n            if (curData.nlead === 'N/A') {\n                return curData.nlead;\n            }\n            else {\n                if (fValue === '0' && option && option.format === '0') {\n                    return fValue + curData.nend;\n                }\n                return curData.nlead + fValue + curData.nend;\n            }\n        }\n    };\n    /**\n     * Returns significant digits processed numeric string\n     *\n     * @param {number} value ?\n     * @param {number} min ?\n     * @param {number} max ?\n     * @returns {string} ?\n     */\n    NumberFormat.processSignificantDigits = function (value, min, max) {\n        var temp = value + '';\n        var tn;\n        var length = temp.length;\n        if (length < min) {\n            return value.toPrecision(min);\n        }\n        else {\n            temp = value.toPrecision(max);\n            tn = +temp;\n            return tn + '';\n        }\n    };\n    /**\n     * Returns grouped numeric string\n     *\n     * @param {string} val ?\n     * @param {number} level1 ?\n     * @param {string} sep ?\n     * @param {string} decimalSymbol ?\n     * @param {number} level2 ?\n     * @returns {string} ?\n     */\n    NumberFormat.groupNumbers = function (val, level1, sep, decimalSymbol, level2) {\n        var flag = !isNullOrUndefined(level2) && level2 !== 0;\n        var split = val.split(decimalSymbol);\n        var prefix = split[0];\n        var length = prefix.length;\n        var str = '';\n        while (length > level1) {\n            str = prefix.slice(length - level1, length) + (str.length ?\n                (sep + str) : '');\n            length -= level1;\n            if (flag) {\n                level1 = level2;\n                flag = false;\n            }\n        }\n        split[0] = prefix.slice(0, length) + (str.length ? sep : '') + str;\n        return split.join(decimalSymbol);\n    };\n    /**\n     * Returns fraction processed numeric string\n     *\n     * @param {number} value ?\n     * @param {number} min ?\n     * @param {number} max ?\n     * @param {NumberFormatOptions} [option] ?\n     * @returns {string} ?\n     */\n    NumberFormat.processFraction = function (value, min, max, option) {\n        var temp = (value + '').split('.')[1];\n        var length = temp ? temp.length : 0;\n        if (min && length < min) {\n            var ret = '';\n            if (length === 0) {\n                ret = value.toFixed(min);\n            }\n            else {\n                ret += value;\n                for (var j = 0; j < min - length; j++) {\n                    ret += '0';\n                }\n                return ret;\n            }\n            return value.toFixed(min);\n        }\n        else if (!isNullOrUndefined(max) && (length > max || max === 0)) {\n            return value.toFixed(max);\n        }\n        var str = value + '';\n        if (str[0] === '0' && option && option.format === '###.00') {\n            str = str.slice(1);\n        }\n        return str;\n    };\n    /**\n     * Returns integer processed numeric string\n     *\n     * @param {string} value ?\n     * @param {number} min ?\n     * @returns {string} ?\n     */\n    NumberFormat.processMinimumIntegers = function (value, min) {\n        var temp = value.split('.');\n        var lead = temp[0];\n        var len = lead.length;\n        if (len < min) {\n            for (var i = 0; i < min - len; i++) {\n                lead = '0' + lead;\n            }\n            temp[0] = lead;\n        }\n        return temp.join('.');\n    };\n    /**\n     * Returns custom format for pivot table\n     *\n     * @param {number} value ?\n     * @returns {string} ?\n     */\n    NumberFormat.customPivotFormat = function (value) {\n        if (value >= 500000) {\n            value /= 1000000;\n            var _a = value.toString().split('.'), integer = _a[0], decimal = _a[1];\n            return decimal && +decimal.substring(0, 1) >= 5\n                ? Math.ceil(value).toString()\n                : Math.floor(value).toString();\n        }\n        return '';\n    };\n    return NumberFormat;\n}());\nexport { NumberFormat };\nsetNumberFormat(NumberFormat);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}