{"ast":null,"code":"import { merge } from '@syncfusion/ej2-base';\n/**\n * Row\n *\n * @hidden\n */\nvar Row = /** @class */function () {\n  function Row(options, parent) {\n    merge(this, options);\n    this.parent = parent;\n  }\n  Row.prototype.clone = function () {\n    var row = new Row({});\n    merge(row, this);\n    row.cells = this.cells.map(function (cell) {\n      return cell.clone();\n    });\n    return row;\n  };\n  /**\n   * Replaces the row data and grid refresh the particular row element only.\n   *\n   * @param  {Object} data - To update new data for the particular row.\n   * @returns {void}\n   */\n  Row.prototype.setRowValue = function (data) {\n    if (!this.parent) {\n      return;\n    }\n    var key = this.data[this.parent.getPrimaryKeyFieldNames()[0]];\n    this.parent.setRowData(key, data);\n  };\n  /**\n   * Replaces the given field value and refresh the particular cell element only.\n   *\n   * @param {string} field - Specifies the field name which you want to update.\n   * @param {string | number | boolean | Date} value - To update new value for the particular cell.\n   * @returns {void}\n   */\n  Row.prototype.setCellValue = function (field, value) {\n    if (!this.parent) {\n      return;\n    }\n    var isValDiff = !(this.data[\"\" + field].toString() === value.toString());\n    if (isValDiff) {\n      var pKeyField = this.parent.getPrimaryKeyFieldNames()[0];\n      var key = this.data[\"\" + pKeyField];\n      this.parent.setCellValue(key, field, value);\n      this.makechanges(pKeyField, this.data);\n    } else {\n      return;\n    }\n  };\n  Row.prototype.makechanges = function (key, data) {\n    if (!this.parent) {\n      return;\n    }\n    var gObj = this.parent;\n    var dataManager = gObj.getDataModule().dataManager;\n    dataManager.update(key, data);\n  };\n  return Row;\n}();\nexport { Row };","map":{"version":3,"names":["merge","Row","options","parent","prototype","clone","row","cells","map","cell","setRowValue","data","key","getPrimaryKeyFieldNames","setRowData","setCellValue","field","value","isValDiff","toString","pKeyField","makechanges","gObj","dataManager","getDataModule","update"],"sources":["D:/weektable/frontend/node_modules/@syncfusion/ej2-grids/src/grid/models/row.js"],"sourcesContent":["import { merge } from '@syncfusion/ej2-base';\n/**\n * Row\n *\n * @hidden\n */\nvar Row = /** @class */ (function () {\n    function Row(options, parent) {\n        merge(this, options);\n        this.parent = parent;\n    }\n    Row.prototype.clone = function () {\n        var row = new Row({});\n        merge(row, this);\n        row.cells = this.cells.map(function (cell) { return cell.clone(); });\n        return row;\n    };\n    /**\n     * Replaces the row data and grid refresh the particular row element only.\n     *\n     * @param  {Object} data - To update new data for the particular row.\n     * @returns {void}\n     */\n    Row.prototype.setRowValue = function (data) {\n        if (!this.parent) {\n            return;\n        }\n        var key = this.data[this.parent.getPrimaryKeyFieldNames()[0]];\n        this.parent.setRowData(key, data);\n    };\n    /**\n     * Replaces the given field value and refresh the particular cell element only.\n     *\n     * @param {string} field - Specifies the field name which you want to update.\n     * @param {string | number | boolean | Date} value - To update new value for the particular cell.\n     * @returns {void}\n     */\n    Row.prototype.setCellValue = function (field, value) {\n        if (!this.parent) {\n            return;\n        }\n        var isValDiff = !(this.data[\"\" + field].toString() === value.toString());\n        if (isValDiff) {\n            var pKeyField = this.parent.getPrimaryKeyFieldNames()[0];\n            var key = this.data[\"\" + pKeyField];\n            this.parent.setCellValue(key, field, value);\n            this.makechanges(pKeyField, this.data);\n        }\n        else {\n            return;\n        }\n    };\n    Row.prototype.makechanges = function (key, data) {\n        if (!this.parent) {\n            return;\n        }\n        var gObj = this.parent;\n        var dataManager = gObj.getDataModule().dataManager;\n        dataManager.update(key, data);\n    };\n    return Row;\n}());\nexport { Row };\n"],"mappings":"AAAA,SAASA,KAAK,QAAQ,sBAAsB;AAC5C;AACA;AACA;AACA;AACA;AACA,IAAIC,GAAG,GAAG,aAAe,YAAY;EACjC,SAASA,GAAGA,CAACC,OAAO,EAAEC,MAAM,EAAE;IAC1BH,KAAK,CAAC,IAAI,EAAEE,OAAO,CAAC;IACpB,IAAI,CAACC,MAAM,GAAGA,MAAM;EACxB;EACAF,GAAG,CAACG,SAAS,CAACC,KAAK,GAAG,YAAY;IAC9B,IAAIC,GAAG,GAAG,IAAIL,GAAG,CAAC,CAAC,CAAC,CAAC;IACrBD,KAAK,CAACM,GAAG,EAAE,IAAI,CAAC;IAChBA,GAAG,CAACC,KAAK,GAAG,IAAI,CAACA,KAAK,CAACC,GAAG,CAAC,UAAUC,IAAI,EAAE;MAAE,OAAOA,IAAI,CAACJ,KAAK,CAAC,CAAC;IAAE,CAAC,CAAC;IACpE,OAAOC,GAAG;EACd,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;EACIL,GAAG,CAACG,SAAS,CAACM,WAAW,GAAG,UAAUC,IAAI,EAAE;IACxC,IAAI,CAAC,IAAI,CAACR,MAAM,EAAE;MACd;IACJ;IACA,IAAIS,GAAG,GAAG,IAAI,CAACD,IAAI,CAAC,IAAI,CAACR,MAAM,CAACU,uBAAuB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC7D,IAAI,CAACV,MAAM,CAACW,UAAU,CAACF,GAAG,EAAED,IAAI,CAAC;EACrC,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;EACIV,GAAG,CAACG,SAAS,CAACW,YAAY,GAAG,UAAUC,KAAK,EAAEC,KAAK,EAAE;IACjD,IAAI,CAAC,IAAI,CAACd,MAAM,EAAE;MACd;IACJ;IACA,IAAIe,SAAS,GAAG,EAAE,IAAI,CAACP,IAAI,CAAC,EAAE,GAAGK,KAAK,CAAC,CAACG,QAAQ,CAAC,CAAC,KAAKF,KAAK,CAACE,QAAQ,CAAC,CAAC,CAAC;IACxE,IAAID,SAAS,EAAE;MACX,IAAIE,SAAS,GAAG,IAAI,CAACjB,MAAM,CAACU,uBAAuB,CAAC,CAAC,CAAC,CAAC,CAAC;MACxD,IAAID,GAAG,GAAG,IAAI,CAACD,IAAI,CAAC,EAAE,GAAGS,SAAS,CAAC;MACnC,IAAI,CAACjB,MAAM,CAACY,YAAY,CAACH,GAAG,EAAEI,KAAK,EAAEC,KAAK,CAAC;MAC3C,IAAI,CAACI,WAAW,CAACD,SAAS,EAAE,IAAI,CAACT,IAAI,CAAC;IAC1C,CAAC,MACI;MACD;IACJ;EACJ,CAAC;EACDV,GAAG,CAACG,SAAS,CAACiB,WAAW,GAAG,UAAUT,GAAG,EAAED,IAAI,EAAE;IAC7C,IAAI,CAAC,IAAI,CAACR,MAAM,EAAE;MACd;IACJ;IACA,IAAImB,IAAI,GAAG,IAAI,CAACnB,MAAM;IACtB,IAAIoB,WAAW,GAAGD,IAAI,CAACE,aAAa,CAAC,CAAC,CAACD,WAAW;IAClDA,WAAW,CAACE,MAAM,CAACb,GAAG,EAAED,IAAI,CAAC;EACjC,CAAC;EACD,OAAOV,GAAG;AACd,CAAC,CAAC,CAAE;AACJ,SAASA,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}