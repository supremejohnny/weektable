{"ast":null,"code":"/**\n * IncrementalSearch module file\n */\nvar queryString = '';\nvar prevString = '';\nvar tempQueryString = '';\nvar matches = [];\nvar activeClass = 'e-active';\nvar prevElementId = '';\n/**\n * Search and focus the list item based on key code matches with list text content.\n *\n * @param {number} keyCode - Specifies the key code which pressed on keyboard events.\n * @param {HTMLElement[]} items - Specifies an array of HTMLElement, from which matches find has done.\n * @param {number} selectedIndex - Specifies the selected item in list item, so that search will happen after selected item otherwise it will do from initial.\n * @param {boolean} ignoreCase - Specifies the case consideration when search has done.\n * @param {string} elementId - Specifies the list element ID.\n * @param {boolean} [queryStringUpdated] - Optional parameter.\n * @param {string} [currentValue] - Optional parameter.\n * @param {boolean} [isVirtual] - Optional parameter.\n * @param {boolean} [refresh] - Optional parameter.\n * @returns {Element} Returns list item based on key code matches with list text content.\n */\nexport function incrementalSearch(keyCode, items, selectedIndex, ignoreCase, elementId, queryStringUpdated, currentValue, isVirtual, refresh) {\n  if (!queryStringUpdated || queryString === '') {\n    if (tempQueryString !== '') {\n      queryString = tempQueryString + String.fromCharCode(keyCode);\n      tempQueryString = '';\n    } else {\n      queryString += String.fromCharCode(keyCode);\n    }\n  } else if (queryString === prevString) {\n    tempQueryString = String.fromCharCode(keyCode);\n  }\n  if (isVirtual) {\n    setTimeout(function () {\n      tempQueryString = '';\n    }, 700);\n    setTimeout(function () {\n      queryString = '';\n    }, 3000);\n  } else {\n    setTimeout(function () {\n      queryString = '';\n    }, 1000);\n  }\n  var index;\n  queryString = ignoreCase ? queryString.toLowerCase() : queryString;\n  if (prevElementId === elementId && prevString === queryString && !refresh) {\n    for (var i = 0; i < matches.length; i++) {\n      if (matches[i].classList.contains(activeClass)) {\n        index = i;\n        break;\n      }\n      if (currentValue && matches[i].textContent.toLowerCase() === currentValue.toLowerCase()) {\n        index = i;\n        break;\n      }\n    }\n    index = index + 1;\n    if (isVirtual) {\n      return matches[index] && matches.length - 1 !== index ? matches[index] : matches[matches.length];\n    }\n    return matches[index] ? matches[index] : matches[0];\n  } else {\n    var listItems = items;\n    var strLength = queryString.length;\n    var text = void 0;\n    var item = void 0;\n    selectedIndex = selectedIndex ? selectedIndex + 1 : 0;\n    var i = selectedIndex;\n    matches = [];\n    do {\n      if (i === listItems.length) {\n        i = -1;\n      }\n      if (i === -1) {\n        index = 0;\n      } else {\n        index = i;\n      }\n      item = listItems[index];\n      text = ignoreCase ? item.innerText.toLowerCase() : item.innerText;\n      if (text.substr(0, strLength) === queryString) {\n        matches.push(listItems[index]);\n      }\n      i++;\n    } while (i !== selectedIndex);\n    prevString = queryString;\n    prevElementId = elementId;\n    if (isVirtual) {\n      var indexUpdated = false;\n      for (var i_1 = 0; i_1 < matches.length; i_1++) {\n        if (currentValue && matches[i_1].textContent.toLowerCase() === currentValue.toLowerCase()) {\n          index = i_1;\n          indexUpdated = true;\n          break;\n        }\n      }\n      if (currentValue && indexUpdated) {\n        index = index + 1;\n      }\n      return matches[index] ? matches[index] : matches[0];\n    }\n    return matches[0];\n  }\n}\n// eslint-disable-next-line valid-jsdoc\n/**\n * Search the list item based on given input value matches with search type.\n *\n * @param {string} inputVal - Specifies the given input value.\n * @param {HTMLElement[]} items - Specifies the list items.\n * @param {SearchType} searchType - Specifies the filter type.\n * @param {boolean} [ignoreCase=true] - Specifies the case sensitive option for search operation.\n * @param {(string | number | boolean | { [key: string]: Object })[]} [dataSource] - Specifies the data source.\n * @param {{ text: string, value: string }} [fields] - Specifies the fields.\n * @param {string} [type] - Specifies the type.\n * @returns {{ item: Element | null, index: number | null }} Returns the search matched items.\n */\nexport function Search(inputVal, items, searchType, ignoreCase, dataSource, fields, type, ignoreAccent) {\n  var listItems = items;\n  ignoreCase = ignoreCase !== undefined && ignoreCase !== null ? ignoreCase : true;\n  var itemData = {\n    item: null,\n    index: null\n  };\n  if (inputVal && inputVal.length) {\n    var strLength = inputVal.length;\n    var queryStr = ignoreCase ? inputVal.toLocaleLowerCase() : inputVal;\n    queryStr = escapeCharRegExp(queryStr);\n    var _loop_1 = function (i, itemsData) {\n      var item = itemsData[i];\n      var filterValue;\n      if (items && dataSource) {\n        var checkField_1 = item;\n        var fieldValue_1 = fields.text.split('.');\n        dataSource.filter(function (data) {\n          Array.prototype.slice.call(fieldValue_1).forEach(function (value) {\n            /* eslint-disable security/detect-object-injection */\n            if (type === 'object' && !data.isHeader && checkField_1.textContent.toString().indexOf(data[value]) !== -1 && data[fields.value] != null && checkField_1.getAttribute('data-value') === data[fields.value].toString() || type === 'string' && checkField_1.textContent.toString().indexOf(data) !== -1) {\n              filterValue = type === 'object' ? data[value] : data;\n            }\n          });\n        });\n      }\n      var text = dataSource && filterValue ? (ignoreCase ? filterValue.toString().toLocaleLowerCase() : filterValue).replace(/^\\s+|\\s+$/g, '') : (ignoreCase ? item.textContent.toLocaleLowerCase() : item.textContent).replace(/^\\s+|\\s+$/g, '');\n      /* eslint-disable security/detect-non-literal-regexp */\n      if (ignoreAccent && text && queryStr) {\n        text = text.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\n        queryStr = queryStr.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\n      }\n      if (searchType === 'Equal' && text === queryStr || searchType === 'StartsWith' && text.substr(0, strLength) === queryStr || searchType === 'EndsWith' && text.substr(text.length - queryStr.length) === queryStr || searchType === 'Contains' && new RegExp(queryStr, 'g').test(text)) {\n        itemData.item = item;\n        itemData.index = i;\n        return {\n          value: {\n            item: item,\n            index: i\n          }\n        };\n      }\n    };\n    for (var i = 0, itemsData = listItems; i < itemsData.length; i++) {\n      var state_1 = _loop_1(i, itemsData);\n      if (typeof state_1 === \"object\") return state_1.value;\n    }\n    return itemData;\n    /* eslint-enable security/detect-non-literal-regexp */\n  }\n  return itemData;\n}\n/**\n * @param {string} value - The value to escape.\n * @returns {string} Returns the escaped string.\n */\nexport function escapeCharRegExp(value) {\n  return value.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\n/**\n * @param {string} elementId - The ID of the list element.\n * @returns {void}\n */\nexport function resetIncrementalSearchValues(elementId) {\n  if (prevElementId === elementId) {\n    prevElementId = '';\n    prevString = '';\n    queryString = '';\n    matches = [];\n  }\n}","map":{"version":3,"names":["queryString","prevString","tempQueryString","matches","activeClass","prevElementId","incrementalSearch","keyCode","items","selectedIndex","ignoreCase","elementId","queryStringUpdated","currentValue","isVirtual","refresh","String","fromCharCode","setTimeout","index","toLowerCase","i","length","classList","contains","textContent","listItems","strLength","text","item","innerText","substr","push","indexUpdated","i_1","Search","inputVal","searchType","dataSource","fields","type","ignoreAccent","undefined","itemData","queryStr","toLocaleLowerCase","escapeCharRegExp","_loop_1","itemsData","filterValue","checkField_1","fieldValue_1","split","filter","data","Array","prototype","slice","call","forEach","value","isHeader","toString","indexOf","getAttribute","replace","normalize","RegExp","test","state_1","resetIncrementalSearchValues"],"sources":["D:/weektable/frontend/node_modules/@syncfusion/ej2-dropdowns/src/common/incremental-search.js"],"sourcesContent":["/**\n * IncrementalSearch module file\n */\nvar queryString = '';\nvar prevString = '';\nvar tempQueryString = '';\nvar matches = [];\nvar activeClass = 'e-active';\nvar prevElementId = '';\n/**\n * Search and focus the list item based on key code matches with list text content.\n *\n * @param {number} keyCode - Specifies the key code which pressed on keyboard events.\n * @param {HTMLElement[]} items - Specifies an array of HTMLElement, from which matches find has done.\n * @param {number} selectedIndex - Specifies the selected item in list item, so that search will happen after selected item otherwise it will do from initial.\n * @param {boolean} ignoreCase - Specifies the case consideration when search has done.\n * @param {string} elementId - Specifies the list element ID.\n * @param {boolean} [queryStringUpdated] - Optional parameter.\n * @param {string} [currentValue] - Optional parameter.\n * @param {boolean} [isVirtual] - Optional parameter.\n * @param {boolean} [refresh] - Optional parameter.\n * @returns {Element} Returns list item based on key code matches with list text content.\n */\nexport function incrementalSearch(keyCode, items, selectedIndex, ignoreCase, elementId, queryStringUpdated, currentValue, isVirtual, refresh) {\n    if (!queryStringUpdated || queryString === '') {\n        if (tempQueryString !== '') {\n            queryString = tempQueryString + String.fromCharCode(keyCode);\n            tempQueryString = '';\n        }\n        else {\n            queryString += String.fromCharCode(keyCode);\n        }\n    }\n    else if (queryString === prevString) {\n        tempQueryString = String.fromCharCode(keyCode);\n    }\n    if (isVirtual) {\n        setTimeout(function () {\n            tempQueryString = '';\n        }, 700);\n        setTimeout(function () {\n            queryString = '';\n        }, 3000);\n    }\n    else {\n        setTimeout(function () {\n            queryString = '';\n        }, 1000);\n    }\n    var index;\n    queryString = ignoreCase ? queryString.toLowerCase() : queryString;\n    if (prevElementId === elementId && prevString === queryString && !refresh) {\n        for (var i = 0; i < matches.length; i++) {\n            if (matches[i].classList.contains(activeClass)) {\n                index = i;\n                break;\n            }\n            if (currentValue && matches[i].textContent.toLowerCase() === currentValue.toLowerCase()) {\n                index = i;\n                break;\n            }\n        }\n        index = index + 1;\n        if (isVirtual) {\n            return matches[index] && matches.length - 1 !== index ? matches[index] : matches[matches.length];\n        }\n        return matches[index] ? matches[index] : matches[0];\n    }\n    else {\n        var listItems = items;\n        var strLength = queryString.length;\n        var text = void 0;\n        var item = void 0;\n        selectedIndex = selectedIndex ? selectedIndex + 1 : 0;\n        var i = selectedIndex;\n        matches = [];\n        do {\n            if (i === listItems.length) {\n                i = -1;\n            }\n            if (i === -1) {\n                index = 0;\n            }\n            else {\n                index = i;\n            }\n            item = listItems[index];\n            text = ignoreCase ? item.innerText.toLowerCase() : item.innerText;\n            if (text.substr(0, strLength) === queryString) {\n                matches.push(listItems[index]);\n            }\n            i++;\n        } while (i !== selectedIndex);\n        prevString = queryString;\n        prevElementId = elementId;\n        if (isVirtual) {\n            var indexUpdated = false;\n            for (var i_1 = 0; i_1 < matches.length; i_1++) {\n                if (currentValue && matches[i_1].textContent.toLowerCase() === currentValue.toLowerCase()) {\n                    index = i_1;\n                    indexUpdated = true;\n                    break;\n                }\n            }\n            if (currentValue && indexUpdated) {\n                index = index + 1;\n            }\n            return matches[index] ? matches[index] : matches[0];\n        }\n        return matches[0];\n    }\n}\n// eslint-disable-next-line valid-jsdoc\n/**\n * Search the list item based on given input value matches with search type.\n *\n * @param {string} inputVal - Specifies the given input value.\n * @param {HTMLElement[]} items - Specifies the list items.\n * @param {SearchType} searchType - Specifies the filter type.\n * @param {boolean} [ignoreCase=true] - Specifies the case sensitive option for search operation.\n * @param {(string | number | boolean | { [key: string]: Object })[]} [dataSource] - Specifies the data source.\n * @param {{ text: string, value: string }} [fields] - Specifies the fields.\n * @param {string} [type] - Specifies the type.\n * @returns {{ item: Element | null, index: number | null }} Returns the search matched items.\n */\nexport function Search(inputVal, items, searchType, ignoreCase, dataSource, fields, type, ignoreAccent) {\n    var listItems = items;\n    ignoreCase = ignoreCase !== undefined && ignoreCase !== null ? ignoreCase : true;\n    var itemData = { item: null, index: null };\n    if (inputVal && inputVal.length) {\n        var strLength = inputVal.length;\n        var queryStr = ignoreCase ? inputVal.toLocaleLowerCase() : inputVal;\n        queryStr = escapeCharRegExp(queryStr);\n        var _loop_1 = function (i, itemsData) {\n            var item = itemsData[i];\n            var filterValue;\n            if (items && dataSource) {\n                var checkField_1 = item;\n                var fieldValue_1 = fields.text.split('.');\n                dataSource.filter(function (data) {\n                    Array.prototype.slice.call(fieldValue_1).forEach(function (value) {\n                        /* eslint-disable security/detect-object-injection */\n                        if ((type === 'object' && !data.isHeader && checkField_1.textContent.toString().indexOf(data[value]) !== -1 && data[fields.value] != null && checkField_1.getAttribute('data-value') === data[fields.value].toString()) ||\n                            (type === 'string' && checkField_1.textContent.toString().indexOf(data) !== -1)) {\n                            filterValue = type === 'object' ? data[value] : data;\n                        }\n                    });\n                });\n            }\n            var text = dataSource && filterValue ? (ignoreCase ? filterValue.toString().toLocaleLowerCase() : filterValue).replace(/^\\s+|\\s+$/g, '') : (ignoreCase ? item.textContent.toLocaleLowerCase() : item.textContent).replace(/^\\s+|\\s+$/g, '');\n            /* eslint-disable security/detect-non-literal-regexp */\n            if (ignoreAccent && text && queryStr) {\n                text = text.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\n                queryStr = queryStr.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\n            }\n            if ((searchType === 'Equal' && text === queryStr) || (searchType === 'StartsWith' && text.substr(0, strLength) === queryStr) || (searchType === 'EndsWith' && text.substr(text.length - queryStr.length) === queryStr) || (searchType === 'Contains' && new RegExp(queryStr, 'g').test(text))) {\n                itemData.item = item;\n                itemData.index = i;\n                return { value: { item: item, index: i } };\n            }\n        };\n        for (var i = 0, itemsData = listItems; i < itemsData.length; i++) {\n            var state_1 = _loop_1(i, itemsData);\n            if (typeof state_1 === \"object\")\n                return state_1.value;\n        }\n        return itemData;\n        /* eslint-enable security/detect-non-literal-regexp */\n    }\n    return itemData;\n}\n/**\n * @param {string} value - The value to escape.\n * @returns {string} Returns the escaped string.\n */\nexport function escapeCharRegExp(value) {\n    return value.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\n/**\n * @param {string} elementId - The ID of the list element.\n * @returns {void}\n */\nexport function resetIncrementalSearchValues(elementId) {\n    if (prevElementId === elementId) {\n        prevElementId = '';\n        prevString = '';\n        queryString = '';\n        matches = [];\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}