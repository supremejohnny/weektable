{"ast":null,"code":"import { Encoding, StreamWriter } from '@syncfusion/ej2-file-utils';\nimport { PdfDocument } from './pdf-document';\n/**\n * `PdfDocumentBase` class represent common properties of PdfDocument classes.\n * @private\n */\nvar PdfDocumentBase = /** @class */function () {\n  function PdfDocumentBase(document) {\n    /**\n     * If the stream is copied,  then it specifies true.\n     * @private\n     */\n    this.isStreamCopied = false;\n    if (document instanceof PdfDocument) {\n      this.document = document;\n    }\n  }\n  Object.defineProperty(PdfDocumentBase.prototype, \"pdfObjects\", {\n    //Prpperties\n    /**\n     * Gets the `PDF objects` collection, which stores all objects and references to it..\n     * @private\n     */\n    get: function () {\n      return this.objects;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfDocumentBase.prototype, \"crossTable\", {\n    /**\n     * Gets the `cross-reference` table.\n     * @private\n     */\n    get: function () {\n      return this.pdfCrossTable;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfDocumentBase.prototype, \"currentSavingObj\", {\n    /**\n     * Gets or sets the current saving `object number`.\n     * @private\n     */\n    get: function () {\n      return this.currentSavingObject;\n    },\n    set: function (value) {\n      this.currentSavingObject = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfDocumentBase.prototype, \"catalog\", {\n    /**\n     * Gets the PDF document `catalog`.\n     * @private\n     */\n    get: function () {\n      return this.pdfCatalog;\n    },\n    set: function (value) {\n      this.pdfCatalog = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfDocumentBase.prototype, \"viewerPreferences\", {\n    /**\n     * Gets viewer preferences for presenting the PDF document in a viewer.\n     * ```typescript\n     * // Create a new PDF document\n     * let document : PdfDocument = new PdfDocument();\n     * // Gets viewer preferences\n     * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      return this.pdfCatalog.viewerPreferences;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  //Public methods\n  /**\n   * Sets the `main object collection`.\n   * @private\n   */\n  PdfDocumentBase.prototype.setMainObjectCollection = function (mainObjectCollection) {\n    this.objects = mainObjectCollection;\n  };\n  /**\n   * Sets the `cross table`.\n   * @private\n   */\n  PdfDocumentBase.prototype.setCrossTable = function (cTable) {\n    this.pdfCrossTable = cTable;\n  };\n  /**\n   * Sets the `catalog`.\n   * @private\n   */\n  PdfDocumentBase.prototype.setCatalog = function (catalog) {\n    this.pdfCatalog = catalog;\n  };\n  PdfDocumentBase.prototype.save = function (filename) {\n    var _this = this;\n    var encoding = new Encoding(true);\n    var SW = new StreamWriter(encoding);\n    if (typeof filename === 'undefined') {\n      var encoding_1 = new Encoding(true);\n      var SW_1 = new StreamWriter(encoding_1);\n      return new Promise(function (resolve, reject) {\n        /* tslint:disable-next-line:no-any */\n        var obj = {};\n        obj.blobData = new Blob([_this.document.docSave(SW_1, true)], {\n          type: 'application/pdf'\n        });\n        resolve(obj);\n      });\n    } else {\n      this.document.docSave(SW, filename, true);\n    }\n  };\n  /**\n   * `Clone` of parent object - PdfDocument.\n   * @private\n   */\n  PdfDocumentBase.prototype.clone = function () {\n    return this.document;\n  };\n  /**\n   * Save PDF document.\n   * @private\n   */\n  PdfDocumentBase.prototype._save = function () {\n    return this.document._docSave();\n  };\n  return PdfDocumentBase;\n}();\nexport { PdfDocumentBase };","map":{"version":3,"names":["Encoding","StreamWriter","PdfDocument","PdfDocumentBase","document","isStreamCopied","Object","defineProperty","prototype","get","objects","enumerable","configurable","pdfCrossTable","currentSavingObject","set","value","pdfCatalog","viewerPreferences","setMainObjectCollection","mainObjectCollection","setCrossTable","cTable","setCatalog","catalog","save","filename","_this","encoding","SW","encoding_1","SW_1","Promise","resolve","reject","obj","blobData","Blob","docSave","type","clone","_save","_docSave"],"sources":["D:/weektable/frontend/node_modules/@syncfusion/ej2-pdf-export/src/implementation/document/pdf-document-base.js"],"sourcesContent":["import { Encoding, StreamWriter } from '@syncfusion/ej2-file-utils';\nimport { PdfDocument } from './pdf-document';\n/**\n * `PdfDocumentBase` class represent common properties of PdfDocument classes.\n * @private\n */\nvar PdfDocumentBase = /** @class */ (function () {\n    function PdfDocumentBase(document) {\n        /**\n         * If the stream is copied,  then it specifies true.\n         * @private\n         */\n        this.isStreamCopied = false;\n        if (document instanceof PdfDocument) {\n            this.document = document;\n        }\n    }\n    Object.defineProperty(PdfDocumentBase.prototype, \"pdfObjects\", {\n        //Prpperties\n        /**\n         * Gets the `PDF objects` collection, which stores all objects and references to it..\n         * @private\n         */\n        get: function () {\n            return this.objects;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfDocumentBase.prototype, \"crossTable\", {\n        /**\n         * Gets the `cross-reference` table.\n         * @private\n         */\n        get: function () {\n            return this.pdfCrossTable;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfDocumentBase.prototype, \"currentSavingObj\", {\n        /**\n         * Gets or sets the current saving `object number`.\n         * @private\n         */\n        get: function () {\n            return this.currentSavingObject;\n        },\n        set: function (value) {\n            this.currentSavingObject = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfDocumentBase.prototype, \"catalog\", {\n        /**\n         * Gets the PDF document `catalog`.\n         * @private\n         */\n        get: function () {\n            return this.pdfCatalog;\n        },\n        set: function (value) {\n            this.pdfCatalog = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfDocumentBase.prototype, \"viewerPreferences\", {\n        /**\n         * Gets viewer preferences for presenting the PDF document in a viewer.\n         * ```typescript\n         * // Create a new PDF document\n         * let document : PdfDocument = new PdfDocument();\n         * // Gets viewer preferences\n         * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            return this.pdfCatalog.viewerPreferences;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    //Public methods\n    /**\n     * Sets the `main object collection`.\n     * @private\n     */\n    PdfDocumentBase.prototype.setMainObjectCollection = function (mainObjectCollection) {\n        this.objects = mainObjectCollection;\n    };\n    /**\n     * Sets the `cross table`.\n     * @private\n     */\n    PdfDocumentBase.prototype.setCrossTable = function (cTable) {\n        this.pdfCrossTable = cTable;\n    };\n    /**\n     * Sets the `catalog`.\n     * @private\n     */\n    PdfDocumentBase.prototype.setCatalog = function (catalog) {\n        this.pdfCatalog = catalog;\n    };\n    PdfDocumentBase.prototype.save = function (filename) {\n        var _this = this;\n        var encoding = new Encoding(true);\n        var SW = new StreamWriter(encoding);\n        if (typeof filename === 'undefined') {\n            var encoding_1 = new Encoding(true);\n            var SW_1 = new StreamWriter(encoding_1);\n            return new Promise(function (resolve, reject) {\n                /* tslint:disable-next-line:no-any */\n                var obj = {};\n                obj.blobData = new Blob([_this.document.docSave(SW_1, true)], { type: 'application/pdf' });\n                resolve(obj);\n            });\n        }\n        else {\n            this.document.docSave(SW, filename, true);\n        }\n    };\n    /**\n     * `Clone` of parent object - PdfDocument.\n     * @private\n     */\n    PdfDocumentBase.prototype.clone = function () {\n        return this.document;\n    };\n    /**\n     * Save PDF document.\n     * @private\n     */\n    PdfDocumentBase.prototype._save = function () {\n        return this.document._docSave();\n    };\n    return PdfDocumentBase;\n}());\nexport { PdfDocumentBase };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}