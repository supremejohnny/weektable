{"ast":null,"code":"/* eslint-disable valid-jsdoc */\n/* eslint-disable security/detect-object-injection */\nimport { DataUtil } from './util';\nimport { isNullOrUndefined } from '@syncfusion/ej2-base';\n/**\n * Query class is used to build query which is used by the DataManager to communicate with datasource.\n */\nvar Query = /** @class */function () {\n  /**\n   * Constructor for Query class.\n   *\n   * @param {string|string[]} from?\n   * @param from\n   * @hidden\n   */\n  function Query(from) {\n    /** @hidden */\n    this.subQuery = null;\n    /** @hidden */\n    this.isChild = false;\n    /** @hidden */\n    this.distincts = [];\n    this.queries = [];\n    this.key = '';\n    this.fKey = '';\n    if (typeof from === 'string') {\n      this.fromTable = from;\n    } else if (from && from instanceof Array) {\n      this.lookups = from;\n    }\n    this.expands = [];\n    this.sortedColumns = [];\n    this.groupedColumns = [];\n    this.subQuery = null;\n    this.isChild = false;\n    this.params = [];\n    this.lazyLoad = [];\n    return this;\n  }\n  Object.defineProperty(Query.prototype, \"moduleName\", {\n    /** @hidden */\n    get: function () {\n      return 'query';\n    },\n    enumerable: true,\n    configurable: true\n  });\n  ;\n  /**\n   * Sets the primary key.\n   *\n   * @param  {string} field - Defines the column field.\n   */\n  Query.prototype.setKey = function (field) {\n    this.key = field;\n    return this;\n  };\n  /**\n   * Sets default DataManager to execute query.\n   *\n   * @param  {DataManager} dataManager - Defines the DataManager.\n   */\n  Query.prototype.using = function (dataManager) {\n    this.dataManager = dataManager;\n    return this;\n  };\n  /**\n   * Executes query with the given DataManager.\n   *\n   * @param  {DataManager} dataManager - Defines the DataManager.\n   * @param  {Function} done - Defines the success callback.\n   * @param  {Function} fail - Defines the failure callback.\n   * @param  {Function} always - Defines the callback which will be invoked on either success or failure.\n   *\n   * <pre>\n   * let dataManager: DataManager = new DataManager([{ ID: '10' }, { ID: '2' }, { ID: '1' }, { ID: '20' }]);\n   * let query: Query = new Query();\n   * query.sortBy('ID', (x: string, y: string): number => { return parseInt(x, 10) - parseInt(y, 10) });\n   * let promise: Promise< Object > = query.execute(dataManager);\n   * promise.then((e: { result: Object }) => { });\n   * </pre>\n   */\n  Query.prototype.execute = function (dataManager, done, fail, always) {\n    dataManager = dataManager || this.dataManager;\n    if (dataManager) {\n      return dataManager.executeQuery(this, done, fail, always);\n    }\n    return DataUtil.throwError('Query - execute() : dataManager needs to be is set using \"using\" function or should be passed as argument');\n  };\n  /**\n   * Executes query with the local datasource.\n   *\n   * @param  {DataManager} dataManager - Defines the DataManager.\n   */\n  Query.prototype.executeLocal = function (dataManager) {\n    dataManager = dataManager || this.dataManager;\n    if (dataManager) {\n      return dataManager.executeLocal(this);\n    }\n    return DataUtil.throwError('Query - executeLocal() : dataManager needs to be is set using \"using\" function or should be passed as argument');\n  };\n  /**\n   * Creates deep copy of the Query object.\n   */\n  Query.prototype.clone = function () {\n    var cloned = new Query();\n    cloned.queries = this.queries.slice(0);\n    cloned.key = this.key;\n    cloned.isChild = this.isChild;\n    cloned.dataManager = this.dataManager;\n    cloned.fromTable = this.fromTable;\n    cloned.params = this.params.slice(0);\n    cloned.expands = this.expands.slice(0);\n    cloned.sortedColumns = this.sortedColumns.slice(0);\n    cloned.groupedColumns = this.groupedColumns.slice(0);\n    cloned.subQuerySelector = this.subQuerySelector;\n    cloned.subQuery = this.subQuery;\n    cloned.fKey = this.fKey;\n    cloned.isCountRequired = this.isCountRequired;\n    cloned.distincts = this.distincts.slice(0);\n    cloned.lazyLoad = this.lazyLoad.slice(0);\n    return cloned;\n  };\n  /**\n   * Specifies the name of table to retrieve data in query execution.\n   *\n   * @param  {string} tableName - Defines the table name.\n   */\n  Query.prototype.from = function (tableName) {\n    this.fromTable = tableName;\n    return this;\n  };\n  /**\n   * Adds additional parameter which will be sent along with the request which will be generated while DataManager execute.\n   *\n   * @param  {string} key - Defines the key of additional parameter.\n   * @param  {Function|string} value - Defines the value for the key.\n   */\n  Query.prototype.addParams = function (key, value) {\n    if (typeof value === 'function') {\n      this.params.push({\n        key: key,\n        fn: value\n      });\n    } else {\n      this.params.push({\n        key: key,\n        value: value\n      });\n    }\n    return this;\n  };\n  /**\n   * @param fields\n   * @hidden\n   */\n  Query.prototype.distinct = function (fields) {\n    if (typeof fields === 'string') {\n      this.distincts = [].slice.call([fields], 0);\n    } else {\n      this.distincts = fields.slice(0);\n    }\n    return this;\n  };\n  /**\n   * Expands the related table.\n   *\n   * @param  {string|Object[]} tables\n   */\n  Query.prototype.expand = function (tables) {\n    if (typeof tables === 'string') {\n      this.expands = [].slice.call([tables], 0);\n    } else {\n      this.expands = tables.slice(0);\n    }\n    return this;\n  };\n  /**\n   * Filter data with given filter criteria.\n   *\n   * @param {string|Predicate} fieldName - Defines the column field or Predicate.\n   * @param {string} operator - Defines the operator how to filter data.\n   * @param {string|number|boolean} value - Defines the values to match with data.\n   * @param {boolean} ignoreCase - If ignore case set to false, then filter data with exact match or else\n   * filter data with case insensitive.\n   * @param ignoreAccent\n   * @param matchCase\n   */\n  Query.prototype.where = function (fieldName, operator, value, ignoreCase, ignoreAccent, matchCase) {\n    operator = operator ? operator.toLowerCase() : null;\n    var predicate = null;\n    if (typeof fieldName === 'string') {\n      predicate = new Predicate(fieldName, operator, value, ignoreCase, ignoreAccent, matchCase);\n    } else if (fieldName instanceof Predicate) {\n      predicate = fieldName;\n    }\n    this.queries.push({\n      fn: 'onWhere',\n      e: predicate\n    });\n    return this;\n  };\n  /**\n   * Search data with given search criteria.\n   *\n   * @param {string|number|boolean} searchKey - Defines the search key.\n   * @param {string|string[]} fieldNames - Defines the collection of column fields.\n   * @param {string} operator - Defines the operator how to search data.\n   * @param {boolean} ignoreCase - If ignore case set to false, then filter data with exact match or else\n   * filter data with case insensitive.\n   * @param ignoreAccent\n   */\n  Query.prototype.search = function (searchKey, fieldNames, operator, ignoreCase, ignoreAccent) {\n    if (typeof fieldNames === 'string') {\n      fieldNames = [fieldNames];\n    }\n    if (!operator || operator === 'none') {\n      operator = 'contains';\n    }\n    var comparer = DataUtil.fnOperators[operator];\n    this.queries.push({\n      fn: 'onSearch',\n      e: {\n        fieldNames: fieldNames,\n        operator: operator,\n        searchKey: searchKey,\n        ignoreCase: ignoreCase,\n        ignoreAccent: ignoreAccent,\n        comparer: comparer\n      }\n    });\n    return this;\n  };\n  /**\n   * Sort the data with given sort criteria.\n   * By default, sort direction is ascending.\n   *\n   * @param {string|string[]} fieldName - Defines the single or collection of column fields.\n   * @param {string|Function} comparer - Defines the sort direction or custom sort comparer function.\n   * @param isFromGroup\n   */\n  Query.prototype.sortBy = function (fieldName, comparer, isFromGroup) {\n    return this.sortByForeignKey(fieldName, comparer, isFromGroup);\n  };\n  /**\n   * Sort the data with given sort criteria.\n   * By default, sort direction is ascending.\n   *\n   * @param {string|string[]} fieldName - Defines the single or collection of column fields.\n   * @param {string|Function} comparer - Defines the sort direction or custom sort comparer function.\n   * @param isFromGroup\n   * @param {string} direction - Defines the sort direction .\n   */\n  Query.prototype.sortByForeignKey = function (fieldName, comparer, isFromGroup, direction) {\n    var order = !isNullOrUndefined(direction) ? direction : 'ascending';\n    var sorts;\n    var temp;\n    if (typeof fieldName === 'string' && DataUtil.endsWith(fieldName.toLowerCase(), ' desc')) {\n      fieldName = fieldName.replace(/ desc$/i, '');\n      comparer = 'descending';\n    }\n    if (!comparer || typeof comparer === 'string') {\n      order = comparer ? comparer.toLowerCase() : 'ascending';\n      comparer = DataUtil.fnSort(comparer);\n    }\n    if (isFromGroup) {\n      sorts = Query.filterQueries(this.queries, 'onSortBy');\n      for (var i = 0; i < sorts.length; i++) {\n        temp = sorts[i].e.fieldName;\n        if (typeof temp === 'string') {\n          if (temp === fieldName) {\n            return this;\n          }\n        } else if (temp instanceof Array) {\n          for (var j = 0; j < temp.length; j++) {\n            if (temp[j] === fieldName || fieldName.toLowerCase() === temp[j] + ' desc') {\n              return this;\n            }\n          }\n        }\n      }\n    }\n    this.queries.push({\n      fn: 'onSortBy',\n      e: {\n        fieldName: fieldName,\n        comparer: comparer,\n        direction: order\n      }\n    });\n    return this;\n  };\n  /**\n   * Sorts data in descending order.\n   *\n   * @param  {string} fieldName - Defines the column field.\n   */\n  Query.prototype.sortByDesc = function (fieldName) {\n    return this.sortBy(fieldName, 'descending');\n  };\n  /**\n   * Groups data with the given field name.\n   *\n   * @param {string} fieldName - Defines the column field.\n   * @param fn\n   * @param format\n   */\n  Query.prototype.group = function (fieldName, fn, format) {\n    this.sortBy(fieldName, null, true);\n    this.queries.push({\n      fn: 'onGroup',\n      e: {\n        fieldName: fieldName,\n        comparer: fn ? fn : null,\n        format: format ? format : null\n      }\n    });\n    return this;\n  };\n  /**\n   * Gets data based on the given page index and size.\n   *\n   * @param  {number} pageIndex - Defines the current page index.\n   * @param  {number} pageSize - Defines the no of records per page.\n   */\n  Query.prototype.page = function (pageIndex, pageSize) {\n    this.queries.push({\n      fn: 'onPage',\n      e: {\n        pageIndex: pageIndex,\n        pageSize: pageSize\n      }\n    });\n    return this;\n  };\n  /**\n   * Gets data based on the given start and end index.\n   *\n   * @param  {number} start - Defines the start index of the datasource.\n   * @param  {number} end - Defines the end index of the datasource.\n   */\n  Query.prototype.range = function (start, end) {\n    this.queries.push({\n      fn: 'onRange',\n      e: {\n        start: start,\n        end: end\n      }\n    });\n    return this;\n  };\n  /**\n   * Gets data from the top of the data source based on given number of records count.\n   *\n   * @param  {number} nos - Defines the no of records to retrieve from datasource.\n   */\n  Query.prototype.take = function (nos) {\n    this.queries.push({\n      fn: 'onTake',\n      e: {\n        nos: nos\n      }\n    });\n    return this;\n  };\n  /**\n   * Skips data with given number of records count from the top of the data source.\n   *\n   * @param  {number} nos - Defines the no of records skip in the datasource.\n   */\n  Query.prototype.skip = function (nos) {\n    this.queries.push({\n      fn: 'onSkip',\n      e: {\n        nos: nos\n      }\n    });\n    return this;\n  };\n  /**\n   * Selects specified columns from the data source.\n   *\n   * @param  {string|string[]} fieldNames - Defines the collection of column fields.\n   */\n  Query.prototype.select = function (fieldNames) {\n    if (typeof fieldNames === 'string') {\n      fieldNames = [].slice.call([fieldNames], 0);\n    }\n    this.queries.push({\n      fn: 'onSelect',\n      e: {\n        fieldNames: fieldNames\n      }\n    });\n    return this;\n  };\n  /**\n   * Gets the records in hierarchical relationship from two tables. It requires the foreign key to relate two tables.\n   *\n   * @param  {Query} query - Defines the query to relate two tables.\n   * @param  {Function} selectorFn - Defines the custom function to select records.\n   */\n  Query.prototype.hierarchy = function (query, selectorFn) {\n    this.subQuerySelector = selectorFn;\n    this.subQuery = query;\n    return this;\n  };\n  /**\n   * Sets the foreign key which is used to get data from the related table.\n   *\n   * @param  {string} key - Defines the foreign key.\n   */\n  Query.prototype.foreignKey = function (key) {\n    this.fKey = key;\n    return this;\n  };\n  /**\n   * It is used to get total number of records in the DataManager execution result.\n   */\n  Query.prototype.requiresCount = function () {\n    this.isCountRequired = true;\n    return this;\n  };\n  //type - sum, avg, min, max\n  /**\n   * Aggregate the data with given type and field name.\n   *\n   * @param  {string} type - Defines the aggregate type.\n   * @param  {string} field - Defines the column field to aggregate.\n   */\n  Query.prototype.aggregate = function (type, field) {\n    this.queries.push({\n      fn: 'onAggregates',\n      e: {\n        field: field,\n        type: type\n      }\n    });\n    return this;\n  };\n  /**\n   * Pass array of filterColumn query for performing filter operation.\n   *\n   * @param  {QueryOptions[]} queries\n   * @param  {string} name\n   * @hidden\n   */\n  Query.filterQueries = function (queries, name) {\n    return queries.filter(function (q) {\n      return q.fn === name;\n    });\n  };\n  /**\n   * To get the list of queries which is already filtered in current data source.\n   *\n   * @param  {Object[]} queries\n   * @param  {string[]} singles\n   * @hidden\n   */\n  Query.filterQueryLists = function (queries, singles) {\n    var filtered = queries.filter(function (q) {\n      return singles.indexOf(q.fn) !== -1;\n    });\n    var res = {};\n    for (var i = 0; i < filtered.length; i++) {\n      if (!res[filtered[i].fn]) {\n        res[filtered[i].fn] = filtered[i].e;\n      }\n    }\n    return res;\n  };\n  return Query;\n}();\nexport { Query };\n/**\n * Predicate class is used to generate complex filter criteria.\n * This will be used by DataManager to perform multiple filtering operation.\n */\nvar Predicate = /** @class */function () {\n  /**\n   * Constructor for Predicate class.\n   *\n   * @param {string|Predicate} field\n   * @param {string} operator\n   * @param {string | number | Date | boolean | Predicate | Predicate[] | (string | number | boolean | Date)[] | null} value\n   * @param {boolean=false} ignoreCase\n   * @param ignoreAccent\n   * @param {boolean} matchCase\n   * @hidden\n   */\n  function Predicate(field, operator, value, ignoreCase, ignoreAccent, matchCase) {\n    if (ignoreCase === void 0) {\n      ignoreCase = false;\n    }\n    /** @hidden */\n    this.ignoreAccent = false;\n    /** @hidden */\n    this.isComplex = false;\n    if (typeof field === 'string') {\n      this.field = field;\n      this.operator = operator.toLowerCase();\n      this.value = value;\n      this.matchCase = matchCase;\n      this.ignoreCase = ignoreCase;\n      this.ignoreAccent = ignoreAccent;\n      this.isComplex = false;\n      this.comparer = DataUtil.fnOperators.processOperator(this.operator);\n    } else if (field instanceof Predicate && value instanceof Predicate || value instanceof Array) {\n      this.isComplex = true;\n      this.condition = operator.toLowerCase();\n      this.predicates = [field];\n      this.matchCase = field.matchCase;\n      this.ignoreCase = field.ignoreCase;\n      this.ignoreAccent = field.ignoreAccent;\n      if (value instanceof Array) {\n        [].push.apply(this.predicates, value);\n      } else {\n        this.predicates.push(value);\n      }\n    }\n    return this;\n  }\n  /**\n   * Adds n-number of new predicates on existing predicate with “and” condition.\n   *\n   * @param  {Object[]} args - Defines the collection of predicates.\n   */\n  Predicate.and = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    return Predicate.combinePredicates([].slice.call(args, 0), 'and');\n  };\n  /**\n   * Adds new predicate on existing predicate with “and” condition.\n   *\n   * @param {string} field - Defines the column field.\n   * @param {string} operator - Defines the operator how to filter data.\n   * @param {string} value - Defines the values to match with data.\n   * @param {boolean} ignoreCase? - If ignore case set to false, then filter data with exact match or else\n   * filter data with case insensitive.\n   * @param ignoreCase\n   * @param ignoreAccent\n   */\n  Predicate.prototype.and = function (field, operator, value, ignoreCase, ignoreAccent) {\n    return Predicate.combine(this, field, operator, value, 'and', ignoreCase, ignoreAccent);\n  };\n  /**\n   * Adds n-number of new predicates on existing predicate with “or” condition.\n   *\n   * @param  {Object[]} args - Defines the collection of predicates.\n   */\n  Predicate.or = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    return Predicate.combinePredicates([].slice.call(args, 0), 'or');\n  };\n  /**\n   * Adds new predicate on existing predicate with “or” condition.\n   *\n   * @param {string} field - Defines the column field.\n   * @param {string} operator - Defines the operator how to filter data.\n   * @param {string} value - Defines the values to match with data.\n   * @param {boolean} ignoreCase? - If ignore case set to false, then filter data with exact match or else\n   * filter data with case insensitive.\n   * @param ignoreCase\n   * @param ignoreAccent\n   */\n  Predicate.prototype.or = function (field, operator, value, ignoreCase, ignoreAccent) {\n    return Predicate.combine(this, field, operator, value, 'or', ignoreCase, ignoreAccent);\n  };\n  /**\n   * Adds n-number of new predicates on existing predicate with “and not” condition.\n   *\n   * @param  {Object[]} args - Defines the collection of predicates.\n   */\n  Predicate.ornot = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    return Predicate.combinePredicates([].slice.call(args, 0), 'or not');\n  };\n  /**\n   * Adds new predicate on existing predicate with “and not” condition.\n   *\n   * @param {string} field - Defines the column field.\n   * @param {string} operator - Defines the operator how to filter data.\n   * @param {string} value - Defines the values to match with data.\n   * @param {boolean} ignoreCase? - If ignore case set to false, then filter data with exact match or else\n   * filter data with case insensitive.\n   * @param ignoreCase\n   * @param ignoreAccent\n   */\n  Predicate.prototype.ornot = function (field, operator, value, ignoreCase, ignoreAccent) {\n    return Predicate.combine(this, field, operator, value, 'ornot', ignoreCase, ignoreAccent);\n  };\n  /**\n   * Adds n-number of new predicates on existing predicate with “and not” condition.\n   *\n   * @param  {Object[]} args - Defines the collection of predicates.\n   */\n  Predicate.andnot = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    return Predicate.combinePredicates([].slice.call(args, 0), 'and not');\n  };\n  /**\n   * Adds new predicate on existing predicate with “and not” condition.\n   *\n   * @param {string} field - Defines the column field.\n   * @param {string} operator - Defines the operator how to filter data.\n   * @param {string} value - Defines the values to match with data.\n   * @param {boolean} ignoreCase? - If ignore case set to false, then filter data with exact match or else\n   * filter data with case insensitive.\n   * @param ignoreCase\n   * @param ignoreAccent\n   */\n  Predicate.prototype.andnot = function (field, operator, value, ignoreCase, ignoreAccent) {\n    return Predicate.combine(this, field, operator, value, 'andnot', ignoreCase, ignoreAccent);\n  };\n  /**\n   * Converts plain JavaScript object to Predicate object.\n   *\n   * @param  {Predicate[]|Predicate} json - Defines single or collection of Predicate.\n   */\n  Predicate.fromJson = function (json) {\n    if (json instanceof Array) {\n      var res = [];\n      for (var i = 0, len = json.length; i < len; i++) {\n        res.push(this.fromJSONData(json[i]));\n      }\n      return res;\n    }\n    var pred = json;\n    return this.fromJSONData(pred);\n  };\n  /**\n   * Validate the record based on the predicates.\n   *\n   * @param  {Object} record - Defines the datasource record.\n   */\n  Predicate.prototype.validate = function (record) {\n    var predicate = this.predicates ? this.predicates : [];\n    var ret;\n    var isAnd;\n    if (!this.isComplex && this.comparer) {\n      if (this.condition && this.condition.indexOf('not') !== -1) {\n        this.condition = this.condition.split('not')[0] === '' ? undefined : this.condition.split('not')[0];\n        return !this.comparer.call(this, DataUtil.getObject(this.field, record), this.value, this.ignoreCase, this.ignoreAccent);\n      } else {\n        return this.comparer.call(this, DataUtil.getObject(this.field, record), this.value, this.ignoreCase, this.ignoreAccent);\n      }\n    }\n    if (this.condition && this.condition.indexOf('not') !== -1) {\n      isAnd = this.condition.indexOf('and') !== -1;\n    } else {\n      isAnd = this.condition === 'and';\n    }\n    for (var i = 0; i < predicate.length; i++) {\n      if (i > 0 && this.condition && this.condition.indexOf('not') !== -1) {\n        predicate[i].condition = predicate[i].condition ? predicate[i].condition + 'not' : 'not';\n      }\n      ret = predicate[i].validate(record);\n      if (isAnd) {\n        if (!ret) {\n          return false;\n        }\n      } else {\n        if (ret) {\n          return true;\n        }\n      }\n    }\n    return isAnd;\n  };\n  /**\n   * Converts predicates to plain JavaScript.\n   * This method is uses Json stringify when serializing Predicate object.\n   */\n  Predicate.prototype.toJson = function () {\n    var predicates;\n    var p;\n    if (this.isComplex) {\n      predicates = [];\n      p = this.predicates;\n      for (var i = 0; i < p.length; i++) {\n        predicates.push(p[i].toJson());\n      }\n    }\n    return {\n      isComplex: this.isComplex,\n      field: this.field,\n      operator: this.operator,\n      value: this.value,\n      ignoreCase: this.ignoreCase,\n      ignoreAccent: this.ignoreAccent,\n      condition: this.condition,\n      predicates: predicates,\n      matchCase: this.matchCase\n    };\n  };\n  Predicate.combinePredicates = function (predicates, operator) {\n    if (predicates.length === 1) {\n      if (!(predicates[0] instanceof Array)) {\n        return predicates[0];\n      }\n      predicates = predicates[0];\n    }\n    return new Predicate(predicates[0], operator, predicates.slice(1));\n  };\n  Predicate.combine = function (pred, field, operator, value, condition, ignoreCase, ignoreAccent) {\n    if (field instanceof Predicate) {\n      return Predicate[condition](pred, field);\n    }\n    if (typeof field === 'string') {\n      return Predicate[condition](pred, new Predicate(field, operator, value, ignoreCase, ignoreAccent));\n    }\n    return DataUtil.throwError('Predicate - ' + condition + ' : invalid arguments');\n  };\n  Predicate.fromJSONData = function (json) {\n    var preds = json.predicates || [];\n    var len = preds.length;\n    var predicates = [];\n    var result;\n    for (var i = 0; i < len; i++) {\n      predicates.push(this.fromJSONData(preds[i]));\n    }\n    if (!json.isComplex) {\n      result = new Predicate(json.field, json.operator, json.value, json.ignoreCase, json.ignoreAccent);\n    } else {\n      result = new Predicate(predicates[0], json.condition, predicates.slice(1));\n    }\n    return result;\n  };\n  return Predicate;\n}();\nexport { Predicate };","map":{"version":3,"names":["DataUtil","isNullOrUndefined","Query","from","subQuery","isChild","distincts","queries","key","fKey","fromTable","Array","lookups","expands","sortedColumns","groupedColumns","params","lazyLoad","Object","defineProperty","prototype","get","enumerable","configurable","setKey","field","using","dataManager","execute","done","fail","always","executeQuery","throwError","executeLocal","clone","cloned","slice","subQuerySelector","isCountRequired","tableName","addParams","value","push","fn","distinct","fields","call","expand","tables","where","fieldName","operator","ignoreCase","ignoreAccent","matchCase","toLowerCase","predicate","Predicate","e","search","searchKey","fieldNames","comparer","fnOperators","sortBy","isFromGroup","sortByForeignKey","direction","order","sorts","temp","endsWith","replace","fnSort","filterQueries","i","length","j","sortByDesc","group","format","page","pageIndex","pageSize","range","start","end","take","nos","skip","select","hierarchy","query","selectorFn","foreignKey","requiresCount","aggregate","type","name","filter","q","filterQueryLists","singles","filtered","indexOf","res","isComplex","processOperator","condition","predicates","apply","and","args","_i","arguments","combinePredicates","combine","or","ornot","andnot","fromJson","json","len","fromJSONData","pred","validate","record","ret","isAnd","split","undefined","getObject","toJson","p","preds","result"],"sources":["D:/weektable/frontend/node_modules/@syncfusion/ej2-data/src/query.js"],"sourcesContent":["/* eslint-disable valid-jsdoc */\n/* eslint-disable security/detect-object-injection */\nimport { DataUtil } from './util';\nimport { isNullOrUndefined } from '@syncfusion/ej2-base';\n/**\n * Query class is used to build query which is used by the DataManager to communicate with datasource.\n */\nvar Query = /** @class */ (function () {\n    /**\n     * Constructor for Query class.\n     *\n     * @param {string|string[]} from?\n     * @param from\n     * @hidden\n     */\n    function Query(from) {\n        /** @hidden */\n        this.subQuery = null;\n        /** @hidden */\n        this.isChild = false;\n        /** @hidden */\n        this.distincts = [];\n        this.queries = [];\n        this.key = '';\n        this.fKey = '';\n        if (typeof from === 'string') {\n            this.fromTable = from;\n        }\n        else if (from && from instanceof Array) {\n            this.lookups = from;\n        }\n        this.expands = [];\n        this.sortedColumns = [];\n        this.groupedColumns = [];\n        this.subQuery = null;\n        this.isChild = false;\n        this.params = [];\n        this.lazyLoad = [];\n        return this;\n    }\n    Object.defineProperty(Query.prototype, \"moduleName\", {\n        /** @hidden */\n        get: function () { return 'query'; },\n        enumerable: true,\n        configurable: true\n    });\n    ;\n    /**\n     * Sets the primary key.\n     *\n     * @param  {string} field - Defines the column field.\n     */\n    Query.prototype.setKey = function (field) {\n        this.key = field;\n        return this;\n    };\n    /**\n     * Sets default DataManager to execute query.\n     *\n     * @param  {DataManager} dataManager - Defines the DataManager.\n     */\n    Query.prototype.using = function (dataManager) {\n        this.dataManager = dataManager;\n        return this;\n    };\n    /**\n     * Executes query with the given DataManager.\n     *\n     * @param  {DataManager} dataManager - Defines the DataManager.\n     * @param  {Function} done - Defines the success callback.\n     * @param  {Function} fail - Defines the failure callback.\n     * @param  {Function} always - Defines the callback which will be invoked on either success or failure.\n     *\n     * <pre>\n     * let dataManager: DataManager = new DataManager([{ ID: '10' }, { ID: '2' }, { ID: '1' }, { ID: '20' }]);\n     * let query: Query = new Query();\n     * query.sortBy('ID', (x: string, y: string): number => { return parseInt(x, 10) - parseInt(y, 10) });\n     * let promise: Promise< Object > = query.execute(dataManager);\n     * promise.then((e: { result: Object }) => { });\n     * </pre>\n     */\n    Query.prototype.execute = function (dataManager, done, fail, always) {\n        dataManager = dataManager || this.dataManager;\n        if (dataManager) {\n            return dataManager.executeQuery(this, done, fail, always);\n        }\n        return DataUtil.throwError('Query - execute() : dataManager needs to be is set using \"using\" function or should be passed as argument');\n    };\n    /**\n     * Executes query with the local datasource.\n     *\n     * @param  {DataManager} dataManager - Defines the DataManager.\n     */\n    Query.prototype.executeLocal = function (dataManager) {\n        dataManager = dataManager || this.dataManager;\n        if (dataManager) {\n            return dataManager.executeLocal(this);\n        }\n        return DataUtil.throwError('Query - executeLocal() : dataManager needs to be is set using \"using\" function or should be passed as argument');\n    };\n    /**\n     * Creates deep copy of the Query object.\n     */\n    Query.prototype.clone = function () {\n        var cloned = new Query();\n        cloned.queries = this.queries.slice(0);\n        cloned.key = this.key;\n        cloned.isChild = this.isChild;\n        cloned.dataManager = this.dataManager;\n        cloned.fromTable = this.fromTable;\n        cloned.params = this.params.slice(0);\n        cloned.expands = this.expands.slice(0);\n        cloned.sortedColumns = this.sortedColumns.slice(0);\n        cloned.groupedColumns = this.groupedColumns.slice(0);\n        cloned.subQuerySelector = this.subQuerySelector;\n        cloned.subQuery = this.subQuery;\n        cloned.fKey = this.fKey;\n        cloned.isCountRequired = this.isCountRequired;\n        cloned.distincts = this.distincts.slice(0);\n        cloned.lazyLoad = this.lazyLoad.slice(0);\n        return cloned;\n    };\n    /**\n     * Specifies the name of table to retrieve data in query execution.\n     *\n     * @param  {string} tableName - Defines the table name.\n     */\n    Query.prototype.from = function (tableName) {\n        this.fromTable = tableName;\n        return this;\n    };\n    /**\n     * Adds additional parameter which will be sent along with the request which will be generated while DataManager execute.\n     *\n     * @param  {string} key - Defines the key of additional parameter.\n     * @param  {Function|string} value - Defines the value for the key.\n     */\n    Query.prototype.addParams = function (key, value) {\n        if (typeof value === 'function') {\n            this.params.push({ key: key, fn: value });\n        }\n        else {\n            this.params.push({ key: key, value: value });\n        }\n        return this;\n    };\n    /**\n     * @param fields\n     * @hidden\n     */\n    Query.prototype.distinct = function (fields) {\n        if (typeof fields === 'string') {\n            this.distincts = [].slice.call([fields], 0);\n        }\n        else {\n            this.distincts = fields.slice(0);\n        }\n        return this;\n    };\n    /**\n     * Expands the related table.\n     *\n     * @param  {string|Object[]} tables\n     */\n    Query.prototype.expand = function (tables) {\n        if (typeof tables === 'string') {\n            this.expands = [].slice.call([tables], 0);\n        }\n        else {\n            this.expands = tables.slice(0);\n        }\n        return this;\n    };\n    /**\n     * Filter data with given filter criteria.\n     *\n     * @param {string|Predicate} fieldName - Defines the column field or Predicate.\n     * @param {string} operator - Defines the operator how to filter data.\n     * @param {string|number|boolean} value - Defines the values to match with data.\n     * @param {boolean} ignoreCase - If ignore case set to false, then filter data with exact match or else\n     * filter data with case insensitive.\n     * @param ignoreAccent\n     * @param matchCase\n     */\n    Query.prototype.where = function (fieldName, operator, value, ignoreCase, ignoreAccent, matchCase) {\n        operator = operator ? (operator).toLowerCase() : null;\n        var predicate = null;\n        if (typeof fieldName === 'string') {\n            predicate = new Predicate(fieldName, operator, value, ignoreCase, ignoreAccent, matchCase);\n        }\n        else if (fieldName instanceof Predicate) {\n            predicate = fieldName;\n        }\n        this.queries.push({\n            fn: 'onWhere',\n            e: predicate\n        });\n        return this;\n    };\n    /**\n     * Search data with given search criteria.\n     *\n     * @param {string|number|boolean} searchKey - Defines the search key.\n     * @param {string|string[]} fieldNames - Defines the collection of column fields.\n     * @param {string} operator - Defines the operator how to search data.\n     * @param {boolean} ignoreCase - If ignore case set to false, then filter data with exact match or else\n     * filter data with case insensitive.\n     * @param ignoreAccent\n     */\n    Query.prototype.search = function (searchKey, fieldNames, operator, ignoreCase, ignoreAccent) {\n        if (typeof fieldNames === 'string') {\n            fieldNames = [fieldNames];\n        }\n        if (!operator || operator === 'none') {\n            operator = 'contains';\n        }\n        var comparer = DataUtil.fnOperators[operator];\n        this.queries.push({\n            fn: 'onSearch',\n            e: {\n                fieldNames: fieldNames,\n                operator: operator,\n                searchKey: searchKey,\n                ignoreCase: ignoreCase,\n                ignoreAccent: ignoreAccent,\n                comparer: comparer\n            }\n        });\n        return this;\n    };\n    /**\n     * Sort the data with given sort criteria.\n     * By default, sort direction is ascending.\n     *\n     * @param {string|string[]} fieldName - Defines the single or collection of column fields.\n     * @param {string|Function} comparer - Defines the sort direction or custom sort comparer function.\n     * @param isFromGroup\n     */\n    Query.prototype.sortBy = function (fieldName, comparer, isFromGroup) {\n        return this.sortByForeignKey(fieldName, comparer, isFromGroup);\n    };\n    /**\n     * Sort the data with given sort criteria.\n     * By default, sort direction is ascending.\n     *\n     * @param {string|string[]} fieldName - Defines the single or collection of column fields.\n     * @param {string|Function} comparer - Defines the sort direction or custom sort comparer function.\n     * @param isFromGroup\n     * @param {string} direction - Defines the sort direction .\n     */\n    Query.prototype.sortByForeignKey = function (fieldName, comparer, isFromGroup, direction) {\n        var order = !isNullOrUndefined(direction) ? direction : 'ascending';\n        var sorts;\n        var temp;\n        if (typeof fieldName === 'string' && DataUtil.endsWith(fieldName.toLowerCase(), ' desc')) {\n            fieldName = fieldName.replace(/ desc$/i, '');\n            comparer = 'descending';\n        }\n        if (!comparer || typeof comparer === 'string') {\n            order = comparer ? comparer.toLowerCase() : 'ascending';\n            comparer = DataUtil.fnSort(comparer);\n        }\n        if (isFromGroup) {\n            sorts = Query.filterQueries(this.queries, 'onSortBy');\n            for (var i = 0; i < sorts.length; i++) {\n                temp = sorts[i].e.fieldName;\n                if (typeof temp === 'string') {\n                    if (temp === fieldName) {\n                        return this;\n                    }\n                }\n                else if (temp instanceof Array) {\n                    for (var j = 0; j < temp.length; j++) {\n                        if (temp[j] === fieldName || fieldName.toLowerCase() === temp[j] + ' desc') {\n                            return this;\n                        }\n                    }\n                }\n            }\n        }\n        this.queries.push({\n            fn: 'onSortBy',\n            e: {\n                fieldName: fieldName,\n                comparer: comparer,\n                direction: order\n            }\n        });\n        return this;\n    };\n    /**\n     * Sorts data in descending order.\n     *\n     * @param  {string} fieldName - Defines the column field.\n     */\n    Query.prototype.sortByDesc = function (fieldName) {\n        return this.sortBy(fieldName, 'descending');\n    };\n    /**\n     * Groups data with the given field name.\n     *\n     * @param {string} fieldName - Defines the column field.\n     * @param fn\n     * @param format\n     */\n    Query.prototype.group = function (fieldName, fn, format) {\n        this.sortBy(fieldName, null, true);\n        this.queries.push({\n            fn: 'onGroup',\n            e: {\n                fieldName: fieldName,\n                comparer: fn ? fn : null,\n                format: format ? format : null\n            }\n        });\n        return this;\n    };\n    /**\n     * Gets data based on the given page index and size.\n     *\n     * @param  {number} pageIndex - Defines the current page index.\n     * @param  {number} pageSize - Defines the no of records per page.\n     */\n    Query.prototype.page = function (pageIndex, pageSize) {\n        this.queries.push({\n            fn: 'onPage',\n            e: {\n                pageIndex: pageIndex,\n                pageSize: pageSize\n            }\n        });\n        return this;\n    };\n    /**\n     * Gets data based on the given start and end index.\n     *\n     * @param  {number} start - Defines the start index of the datasource.\n     * @param  {number} end - Defines the end index of the datasource.\n     */\n    Query.prototype.range = function (start, end) {\n        this.queries.push({\n            fn: 'onRange',\n            e: {\n                start: start,\n                end: end\n            }\n        });\n        return this;\n    };\n    /**\n     * Gets data from the top of the data source based on given number of records count.\n     *\n     * @param  {number} nos - Defines the no of records to retrieve from datasource.\n     */\n    Query.prototype.take = function (nos) {\n        this.queries.push({\n            fn: 'onTake',\n            e: {\n                nos: nos\n            }\n        });\n        return this;\n    };\n    /**\n     * Skips data with given number of records count from the top of the data source.\n     *\n     * @param  {number} nos - Defines the no of records skip in the datasource.\n     */\n    Query.prototype.skip = function (nos) {\n        this.queries.push({\n            fn: 'onSkip',\n            e: { nos: nos }\n        });\n        return this;\n    };\n    /**\n     * Selects specified columns from the data source.\n     *\n     * @param  {string|string[]} fieldNames - Defines the collection of column fields.\n     */\n    Query.prototype.select = function (fieldNames) {\n        if (typeof fieldNames === 'string') {\n            fieldNames = [].slice.call([fieldNames], 0);\n        }\n        this.queries.push({\n            fn: 'onSelect',\n            e: { fieldNames: fieldNames }\n        });\n        return this;\n    };\n    /**\n     * Gets the records in hierarchical relationship from two tables. It requires the foreign key to relate two tables.\n     *\n     * @param  {Query} query - Defines the query to relate two tables.\n     * @param  {Function} selectorFn - Defines the custom function to select records.\n     */\n    Query.prototype.hierarchy = function (query, selectorFn) {\n        this.subQuerySelector = selectorFn;\n        this.subQuery = query;\n        return this;\n    };\n    /**\n     * Sets the foreign key which is used to get data from the related table.\n     *\n     * @param  {string} key - Defines the foreign key.\n     */\n    Query.prototype.foreignKey = function (key) {\n        this.fKey = key;\n        return this;\n    };\n    /**\n     * It is used to get total number of records in the DataManager execution result.\n     */\n    Query.prototype.requiresCount = function () {\n        this.isCountRequired = true;\n        return this;\n    };\n    //type - sum, avg, min, max\n    /**\n     * Aggregate the data with given type and field name.\n     *\n     * @param  {string} type - Defines the aggregate type.\n     * @param  {string} field - Defines the column field to aggregate.\n     */\n    Query.prototype.aggregate = function (type, field) {\n        this.queries.push({\n            fn: 'onAggregates',\n            e: { field: field, type: type }\n        });\n        return this;\n    };\n    /**\n     * Pass array of filterColumn query for performing filter operation.\n     *\n     * @param  {QueryOptions[]} queries\n     * @param  {string} name\n     * @hidden\n     */\n    Query.filterQueries = function (queries, name) {\n        return queries.filter(function (q) {\n            return q.fn === name;\n        });\n    };\n    /**\n     * To get the list of queries which is already filtered in current data source.\n     *\n     * @param  {Object[]} queries\n     * @param  {string[]} singles\n     * @hidden\n     */\n    Query.filterQueryLists = function (queries, singles) {\n        var filtered = queries.filter(function (q) {\n            return singles.indexOf(q.fn) !== -1;\n        });\n        var res = {};\n        for (var i = 0; i < filtered.length; i++) {\n            if (!res[filtered[i].fn]) {\n                res[filtered[i].fn] = filtered[i].e;\n            }\n        }\n        return res;\n    };\n    return Query;\n}());\nexport { Query };\n/**\n * Predicate class is used to generate complex filter criteria.\n * This will be used by DataManager to perform multiple filtering operation.\n */\nvar Predicate = /** @class */ (function () {\n    /**\n     * Constructor for Predicate class.\n     *\n     * @param {string|Predicate} field\n     * @param {string} operator\n     * @param {string | number | Date | boolean | Predicate | Predicate[] | (string | number | boolean | Date)[] | null} value\n     * @param {boolean=false} ignoreCase\n     * @param ignoreAccent\n     * @param {boolean} matchCase\n     * @hidden\n     */\n    function Predicate(field, operator, value, ignoreCase, ignoreAccent, matchCase) {\n        if (ignoreCase === void 0) { ignoreCase = false; }\n        /** @hidden */\n        this.ignoreAccent = false;\n        /** @hidden */\n        this.isComplex = false;\n        if (typeof field === 'string') {\n            this.field = field;\n            this.operator = operator.toLowerCase();\n            this.value = value;\n            this.matchCase = matchCase;\n            this.ignoreCase = ignoreCase;\n            this.ignoreAccent = ignoreAccent;\n            this.isComplex = false;\n            this.comparer = DataUtil.fnOperators.processOperator(this.operator);\n        }\n        else if (field instanceof Predicate && value instanceof Predicate || value instanceof Array) {\n            this.isComplex = true;\n            this.condition = operator.toLowerCase();\n            this.predicates = [field];\n            this.matchCase = field.matchCase;\n            this.ignoreCase = field.ignoreCase;\n            this.ignoreAccent = field.ignoreAccent;\n            if (value instanceof Array) {\n                [].push.apply(this.predicates, value);\n            }\n            else {\n                this.predicates.push(value);\n            }\n        }\n        return this;\n    }\n    /**\n     * Adds n-number of new predicates on existing predicate with “and” condition.\n     *\n     * @param  {Object[]} args - Defines the collection of predicates.\n     */\n    Predicate.and = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return Predicate.combinePredicates([].slice.call(args, 0), 'and');\n    };\n    /**\n     * Adds new predicate on existing predicate with “and” condition.\n     *\n     * @param {string} field - Defines the column field.\n     * @param {string} operator - Defines the operator how to filter data.\n     * @param {string} value - Defines the values to match with data.\n     * @param {boolean} ignoreCase? - If ignore case set to false, then filter data with exact match or else\n     * filter data with case insensitive.\n     * @param ignoreCase\n     * @param ignoreAccent\n     */\n    Predicate.prototype.and = function (field, operator, value, ignoreCase, ignoreAccent) {\n        return Predicate.combine(this, field, operator, value, 'and', ignoreCase, ignoreAccent);\n    };\n    /**\n     * Adds n-number of new predicates on existing predicate with “or” condition.\n     *\n     * @param  {Object[]} args - Defines the collection of predicates.\n     */\n    Predicate.or = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return Predicate.combinePredicates([].slice.call(args, 0), 'or');\n    };\n    /**\n     * Adds new predicate on existing predicate with “or” condition.\n     *\n     * @param {string} field - Defines the column field.\n     * @param {string} operator - Defines the operator how to filter data.\n     * @param {string} value - Defines the values to match with data.\n     * @param {boolean} ignoreCase? - If ignore case set to false, then filter data with exact match or else\n     * filter data with case insensitive.\n     * @param ignoreCase\n     * @param ignoreAccent\n     */\n    Predicate.prototype.or = function (field, operator, value, ignoreCase, ignoreAccent) {\n        return Predicate.combine(this, field, operator, value, 'or', ignoreCase, ignoreAccent);\n    };\n    /**\n     * Adds n-number of new predicates on existing predicate with “and not” condition.\n     *\n     * @param  {Object[]} args - Defines the collection of predicates.\n     */\n    Predicate.ornot = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return Predicate.combinePredicates([].slice.call(args, 0), 'or not');\n    };\n    /**\n     * Adds new predicate on existing predicate with “and not” condition.\n     *\n     * @param {string} field - Defines the column field.\n     * @param {string} operator - Defines the operator how to filter data.\n     * @param {string} value - Defines the values to match with data.\n     * @param {boolean} ignoreCase? - If ignore case set to false, then filter data with exact match or else\n     * filter data with case insensitive.\n     * @param ignoreCase\n     * @param ignoreAccent\n     */\n    Predicate.prototype.ornot = function (field, operator, value, ignoreCase, ignoreAccent) {\n        return Predicate.combine(this, field, operator, value, 'ornot', ignoreCase, ignoreAccent);\n    };\n    /**\n     * Adds n-number of new predicates on existing predicate with “and not” condition.\n     *\n     * @param  {Object[]} args - Defines the collection of predicates.\n     */\n    Predicate.andnot = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return Predicate.combinePredicates([].slice.call(args, 0), 'and not');\n    };\n    /**\n     * Adds new predicate on existing predicate with “and not” condition.\n     *\n     * @param {string} field - Defines the column field.\n     * @param {string} operator - Defines the operator how to filter data.\n     * @param {string} value - Defines the values to match with data.\n     * @param {boolean} ignoreCase? - If ignore case set to false, then filter data with exact match or else\n     * filter data with case insensitive.\n     * @param ignoreCase\n     * @param ignoreAccent\n     */\n    Predicate.prototype.andnot = function (field, operator, value, ignoreCase, ignoreAccent) {\n        return Predicate.combine(this, field, operator, value, 'andnot', ignoreCase, ignoreAccent);\n    };\n    /**\n     * Converts plain JavaScript object to Predicate object.\n     *\n     * @param  {Predicate[]|Predicate} json - Defines single or collection of Predicate.\n     */\n    Predicate.fromJson = function (json) {\n        if (json instanceof Array) {\n            var res = [];\n            for (var i = 0, len = json.length; i < len; i++) {\n                res.push(this.fromJSONData(json[i]));\n            }\n            return res;\n        }\n        var pred = json;\n        return this.fromJSONData(pred);\n    };\n    /**\n     * Validate the record based on the predicates.\n     *\n     * @param  {Object} record - Defines the datasource record.\n     */\n    Predicate.prototype.validate = function (record) {\n        var predicate = this.predicates ? this.predicates : [];\n        var ret;\n        var isAnd;\n        if (!this.isComplex && this.comparer) {\n            if (this.condition && this.condition.indexOf('not') !== -1) {\n                this.condition = this.condition.split('not')[0] === '' ? undefined : this.condition.split('not')[0];\n                return !this.comparer.call(this, DataUtil.getObject(this.field, record), this.value, this.ignoreCase, this.ignoreAccent);\n            }\n            else {\n                return this.comparer.call(this, DataUtil.getObject(this.field, record), this.value, this.ignoreCase, this.ignoreAccent);\n            }\n        }\n        if (this.condition && this.condition.indexOf('not') !== -1) {\n            isAnd = this.condition.indexOf('and') !== -1;\n        }\n        else {\n            isAnd = this.condition === 'and';\n        }\n        for (var i = 0; i < predicate.length; i++) {\n            if (i > 0 && this.condition && this.condition.indexOf('not') !== -1) {\n                predicate[i].condition = predicate[i].condition ? predicate[i].condition + 'not' : 'not';\n            }\n            ret = predicate[i].validate(record);\n            if (isAnd) {\n                if (!ret) {\n                    return false;\n                }\n            }\n            else {\n                if (ret) {\n                    return true;\n                }\n            }\n        }\n        return isAnd;\n    };\n    /**\n     * Converts predicates to plain JavaScript.\n     * This method is uses Json stringify when serializing Predicate object.\n     */\n    Predicate.prototype.toJson = function () {\n        var predicates;\n        var p;\n        if (this.isComplex) {\n            predicates = [];\n            p = this.predicates;\n            for (var i = 0; i < p.length; i++) {\n                predicates.push(p[i].toJson());\n            }\n        }\n        return {\n            isComplex: this.isComplex,\n            field: this.field,\n            operator: this.operator,\n            value: this.value,\n            ignoreCase: this.ignoreCase,\n            ignoreAccent: this.ignoreAccent,\n            condition: this.condition,\n            predicates: predicates,\n            matchCase: this.matchCase\n        };\n    };\n    Predicate.combinePredicates = function (predicates, operator) {\n        if (predicates.length === 1) {\n            if (!(predicates[0] instanceof Array)) {\n                return predicates[0];\n            }\n            predicates = predicates[0];\n        }\n        return new Predicate(predicates[0], operator, predicates.slice(1));\n    };\n    Predicate.combine = function (pred, field, operator, value, condition, ignoreCase, ignoreAccent) {\n        if (field instanceof Predicate) {\n            return Predicate[condition](pred, field);\n        }\n        if (typeof field === 'string') {\n            return Predicate[condition](pred, new Predicate(field, operator, value, ignoreCase, ignoreAccent));\n        }\n        return DataUtil.throwError('Predicate - ' + condition + ' : invalid arguments');\n    };\n    Predicate.fromJSONData = function (json) {\n        var preds = json.predicates || [];\n        var len = preds.length;\n        var predicates = [];\n        var result;\n        for (var i = 0; i < len; i++) {\n            predicates.push(this.fromJSONData(preds[i]));\n        }\n        if (!json.isComplex) {\n            result = new Predicate(json.field, json.operator, json.value, json.ignoreCase, json.ignoreAccent);\n        }\n        else {\n            result = new Predicate(predicates[0], json.condition, predicates.slice(1));\n        }\n        return result;\n    };\n    return Predicate;\n}());\nexport { Predicate };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}